*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="tastrade.dbc" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*

<DATABASE>
	<Name>TASTRADE</Name>
	<Comment></Comment>
	<Version>10</Version>
	<DBCEvents>.F.</DBCEvents>
	<DBCEventFilename></DBCEventFilename>


	<TABLES>

		<TABLE>
			<Name>CATEGORY</Name>
			<Comment>Product Category Lookup Table</Comment>
			<Path>category.dbf</Path>
			<DeleteTrigger>__ri_delete_category()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_category()</UpdateTrigger>
			<PrimaryKey>category_i</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				category_id
				category_name
				description
				picture_file
				picture
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>category_id</Name>
					<Caption></Caption>
					<Comment>Internal category ID</Comment>
					<DefaultValue>newid()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>category_name</Name>
					<Caption>Name:</Caption>
					<Comment>Category name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(category_name)</RuleExpression>
					<RuleText>"Category name cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>description</Name>
					<Caption></Caption>
					<Comment>Category description</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>picture</Name>
					<Caption></Caption>
					<Comment>Category picture</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>picture_file</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>category_i</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>category_n</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
			</INDEXES>

		</TABLE>

		<TABLE>
			<Name>CUSTOMER</Name>
			<Comment>Customer Information</Comment>
			<Path>customer.dbf</Path>
			<DeleteTrigger>__ri_delete_customer()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_customer()</UpdateTrigger>
			<PrimaryKey>customer_i</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				customer_id
				company_name
				contact_name
				contact_title
				address
				city
				region
				postal_code
				country
				phone
				fax
				max_order_amt
				min_order_amt
				discount
				sales_region
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>address</Name>
					<Caption></Caption>
					<Comment>Customer's address (e.g. 1060 Main Street)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment>Customer's city (e.g. Bloomingdale)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment>Company name (e.g. MJR Associates)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(company_name)</RuleExpression>
					<RuleText>"Company name cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>contact_name</Name>
					<Caption></Caption>
					<Comment>Contact name (e.g. Bill Scott)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>contact_title</Name>
					<Caption></Caption>
					<Comment>Customer contact's title (e.g. President)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment>Customer Country</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>customer_id</Name>
					<Caption></Caption>
					<Comment>Customer ID</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(customer_id)</RuleExpression>
					<RuleText>"Customer ID cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>discount</Name>
					<Caption></Caption>
					<Comment>Customer's normal discount</Comment>
					<DefaultValue>0</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>fax</Name>
					<Caption></Caption>
					<Comment>Customer's fax number</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>max_order_amt</Name>
					<Caption></Caption>
					<Comment>Customer's maximum allowed order amount</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>max_order_amt=>min_order_amt</RuleExpression>
					<RuleText>"Maximum order amount must be greater than or equal to minimum order amount."</RuleText>
				</FIELD>
				<FIELD>
					<Name>min_order_amt</Name>
					<Caption></Caption>
					<Comment>Customer's minimum allowed order amount</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>min_order_amt<=max_order_amt</RuleExpression>
					<RuleText>"Minimum order amount must be less than or equal to maximum order amount."</RuleText>
				</FIELD>
				<FIELD>
					<Name>phone</Name>
					<Caption></Caption>
					<Comment>Customer's phone number</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>postal_code</Name>
					<Caption></Caption>
					<Comment>Customer's postal (zip) code</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>region</Name>
					<Caption></Caption>
					<Comment>Customer's region/state (e.g. CA)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>sales_region</Name>
					<Caption></Caption>
					<Comment>Customer's sales region</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>company_na</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>customer_i</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
			</INDEXES>

		</TABLE>

		<TABLE>
			<Name>EMPLOYEE</Name>
			<Comment>Employee Information</Comment>
			<Path>employee.dbf</Path>
			<DeleteTrigger>__ri_delete_employee()</DeleteTrigger>
			<InsertTrigger>__ri_insert_employee()</InsertTrigger>
			<UpdateTrigger>__ri_update_employee()</UpdateTrigger>
			<PrimaryKey>employee_i</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				employee_id
				last_name
				first_name
				title
				birth_date
				hire_date
				address
				city
				region
				postal_code
				country
				home_phone
				extension
				group_id
				sales_region
				password
				photo_file
				notes
				photo
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>address</Name>
					<Caption></Caption>
					<Comment>Employee's address</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>birth_date</Name>
					<Caption></Caption>
					<Comment>Employee's birth date </Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment>Employee's city</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment>Employee country</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>employee_id</Name>
					<Caption></Caption>
					<Comment>Internal employee ID</Comment>
					<DefaultValue>newid()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>extension</Name>
					<Caption></Caption>
					<Comment>Emploee's home phone number extension</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>first_name</Name>
					<Caption></Caption>
					<Comment>Employee's first name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>group_id</Name>
					<Caption></Caption>
					<Comment>Internal group id of employee</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>hire_date</Name>
					<Caption></Caption>
					<Comment>Date employee was hired</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>home_phone</Name>
					<Caption></Caption>
					<Comment>Employee's home phone number</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>last_name</Name>
					<Caption></Caption>
					<Comment>Employee's last name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(last_name)</RuleExpression>
					<RuleText>"Last name cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>notes</Name>
					<Caption></Caption>
					<Comment>Notes about employee</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>password</Name>
					<Caption></Caption>
					<Comment>Employee's password</Comment>
					<DefaultValue>"Tastrade"</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>photo</Name>
					<Caption></Caption>
					<Comment>Employee's photo</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>photo_file</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>postal_code</Name>
					<Caption></Caption>
					<Comment>Employee's postal (zip) code</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>region</Name>
					<Caption></Caption>
					<Comment>Employee's region (e.g., TX)</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>sales_region</Name>
					<Caption></Caption>
					<Comment>Sales region employee is responsibile for</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>title</Name>
					<Caption></Caption>
					<Comment>Employee's job title</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>employee_i</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>group_id</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>last_name</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
			</INDEXES>

			<RELATIONS>
				<RELATION>
					<Name>Relation 8</Name>
					<ChildTable>EMPLOYEE</ChildTable>
					<ParentTable>USER_LEVEL</ParentTable>
					<ChildIndex>GROUP_ID</ChildIndex>
					<ParentIndex>GROUP_ID</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>ORDERS</Name>
			<Comment>Order Information</Comment>
			<Path>orders.dbf</Path>
			<DeleteTrigger>__ri_delete_orders()</DeleteTrigger>
			<InsertTrigger>__ri_insert_orders()</InsertTrigger>
			<UpdateTrigger>__ri_update_orders()</UpdateTrigger>
			<PrimaryKey>order_id</PrimaryKey>
			<RuleExpression>valorder()</RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				order_id
				customer_id
				shipper_id
				order_number
				order_date
				ship_to_name
				ship_to_address
				ship_to_city
				ship_to_region
				ship_to_postal_code
				ship_to_country
				discount
				freight
				paid
				deliver_by
				notes
				employee_id
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>customer_id</Name>
					<Caption></Caption>
					<Comment>ID of customer who placed order</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>deliver_by</Name>
					<Caption></Caption>
					<Comment>Date order must be delivered</Comment>
					<DefaultValue>DATE()+7</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>deliver_by=>order_date</RuleExpression>
					<RuleText>"Cannot be earlier than Order Date"</RuleText>
				</FIELD>
				<FIELD>
					<Name>discount</Name>
					<Caption></Caption>
					<Comment>Order discount percent</Comment>
					<DefaultValue>0</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>employee_id</Name>
					<Caption></Caption>
					<Comment>Employee ID</Comment>
					<DefaultValue>defaultemployee()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>freight</Name>
					<Caption></Caption>
					<Comment>Total freight charges</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>notes</Name>
					<Caption></Caption>
					<Comment>Miscellaneous notes</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>order_date</Name>
					<Caption></Caption>
					<Comment>Order date</Comment>
					<DefaultValue>DATE()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>order_id</Name>
					<Caption></Caption>
					<Comment>Unique ID of this order</Comment>
					<DefaultValue>newid()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>order_number</Name>
					<Caption></Caption>
					<Comment>Order number (automatically generated)</Comment>
					<DefaultValue>newid("order_number")</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>paid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>ship_to_address</Name>
					<Caption></Caption>
					<Comment>Ship to address</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>ship_to_city</Name>
					<Caption></Caption>
					<Comment>Ship to city</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>ship_to_country</Name>
					<Caption></Caption>
					<Comment>Ship to country</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>ship_to_name</Name>
					<Caption></Caption>
					<Comment>Ship to name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>ship_to_postal_code</Name>
					<Caption></Caption>
					<Comment>Ship to postal (zip) code</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>ship_to_region</Name>
					<Caption></Caption>
					<Comment>Ship to region</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>shipper_id</Name>
					<Caption></Caption>
					<Comment>Shipper ID</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>cust_ord</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>customer_i</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>employee_i</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>order_id</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>order_numb</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>shipper_id</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
			</INDEXES>

			<RELATIONS>
				<RELATION>
					<Name>Relation 2</Name>
					<ChildTable>ORDERS</ChildTable>
					<ParentTable>CUSTOMER</ParentTable>
					<ChildIndex>CUSTOMER_I</ChildIndex>
					<ParentIndex>CUSTOMER_I</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 3</Name>
					<ChildTable>ORDERS</ChildTable>
					<ParentTable>EMPLOYEE</ParentTable>
					<ChildIndex>EMPLOYEE_I</ChildIndex>
					<ParentIndex>EMPLOYEE_I</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 6</Name>
					<ChildTable>ORDERS</ChildTable>
					<ParentTable>SHIPPERS</ParentTable>
					<ChildIndex>SHIPPER_ID</ChildIndex>
					<ParentIndex>SHIPPER_ID</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>ORDER_LINE_ITEMS</Name>
			<Comment>Order Line Item Information</Comment>
			<Path>orditems.dbf</Path>
			<DeleteTrigger></DeleteTrigger>
			<InsertTrigger>__ri_insert_order_line_items()</InsertTrigger>
			<UpdateTrigger>__ri_update_order_line_items()</UpdateTrigger>
			<PrimaryKey></PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				order_id
				product_id
				unit_price
				quantity
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>order_id</Name>
					<Caption></Caption>
					<Comment>Internal order ID</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>product_id</Name>
					<Caption></Caption>
					<Comment>Internal product ID</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>quantity</Name>
					<Caption></Caption>
					<Comment>Quantity</Comment>
					<DefaultValue>1</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>unit_price</Name>
					<Caption></Caption>
					<Comment>Unit price of product</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>order_id</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>product_id</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
			</INDEXES>

			<RELATIONS>
				<RELATION>
					<Name>Relation 4</Name>
					<ChildTable>ORDER_LINE_ITEMS</ChildTable>
					<ParentTable>ORDERS</ParentTable>
					<ChildIndex>ORDER_ID</ChildIndex>
					<ParentIndex>ORDER_ID</ParentIndex>
					<RefIntegrity>CCR</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 5</Name>
					<ChildTable>ORDER_LINE_ITEMS</ChildTable>
					<ParentTable>PRODUCTS</ParentTable>
					<ChildIndex>PRODUCT_ID</ChildIndex>
					<ParentIndex>PRODUCT_ID</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>PRODUCTS</Name>
			<Comment>Product Inventory Information</Comment>
			<Path>products.dbf</Path>
			<DeleteTrigger>__ri_delete_products()</DeleteTrigger>
			<InsertTrigger>__ri_insert_products()</InsertTrigger>
			<UpdateTrigger>__ri_update_products()</UpdateTrigger>
			<PrimaryKey>product_id</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				product_id
				supplier_id
				category_id
				product_name
				english_name
				quantity_in_unit
				unit_price
				unit_cost
				units_in_stock
				units_on_order
				reorder_level
				discontinued
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>category_id</Name>
					<Caption></Caption>
					<Comment>ID of category to which this product belongs</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>discontinued</Name>
					<Caption></Caption>
					<Comment>True if product has been discontinued</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>english_name</Name>
					<Caption></Caption>
					<Comment>English name of product</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>product_id</Name>
					<Caption></Caption>
					<Comment>Internal product ID</Comment>
					<DefaultValue>newid()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>product_name</Name>
					<Caption></Caption>
					<Comment>Full name of product</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(product_name)</RuleExpression>
					<RuleText>"Product name cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>quantity_in_unit</Name>
					<Caption></Caption>
					<Comment>Quantity in each unit </Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>reorder_level</Name>
					<Caption></Caption>
					<Comment>Reorder level</Comment>
					<DefaultValue>0</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>supplier_id</Name>
					<Caption></Caption>
					<Comment>ID of supplier of this product</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>unit_cost</Name>
					<Caption></Caption>
					<Comment>Unit cost</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>unit_price</Name>
					<Caption></Caption>
					<Comment>Unit price</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>units_in_stock</Name>
					<Caption></Caption>
					<Comment>Number of units in stock</Comment>
					<DefaultValue>0</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>units_on_order</Name>
					<Caption></Caption>
					<Comment>Number of units on order</Comment>
					<DefaultValue>0</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>category_i</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>product_id</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>product_na</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>supplier_i</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
			</INDEXES>

			<RELATIONS>
				<RELATION>
					<Name>Relation 1</Name>
					<ChildTable>PRODUCTS</ChildTable>
					<ParentTable>CATEGORY</ParentTable>
					<ChildIndex>CATEGORY_I</ChildIndex>
					<ParentIndex>CATEGORY_I</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 7</Name>
					<ChildTable>PRODUCTS</ChildTable>
					<ParentTable>SUPPLIER</ParentTable>
					<ChildIndex>SUPPLIER_I</ChildIndex>
					<ParentIndex>SUPPLIER_I</ParentIndex>
					<RefIntegrity>CRR</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>SETUP</Name>
			<Comment>Holds unique keys</Comment>
			<Path>setup.dbf</Path>
			<DeleteTrigger></DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger></UpdateTrigger>
			<PrimaryKey></PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				key_name
				value
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>key_name</Name>
					<Caption></Caption>
					<Comment>Name of table's primary key</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>value</Name>
					<Caption></Caption>
					<Comment>The next unique key</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>key_name</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
			</INDEXES>

		</TABLE>

		<TABLE>
			<Name>SHIPPERS</Name>
			<Comment>Shipper Lookup Table</Comment>
			<Path>shippers.dbf</Path>
			<DeleteTrigger>__ri_delete_shippers()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_shippers()</UpdateTrigger>
			<PrimaryKey>shipper_id</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				shipper_id
				company_name
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment>Shipper company name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(company_name)</RuleExpression>
					<RuleText>"Company name cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>shipper_id</Name>
					<Caption></Caption>
					<Comment>Internal shipper ID</Comment>
					<DefaultValue>newid()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>company_na</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>shipper_id</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
			</INDEXES>

		</TABLE>

		<TABLE>
			<Name>SUPPLIER</Name>
			<Comment>Inventory Supplier Information</Comment>
			<Path>supplier.dbf</Path>
			<DeleteTrigger>__ri_delete_supplier()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_supplier()</UpdateTrigger>
			<PrimaryKey>supplier_i</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				supplier_id
				company_name
				contact_name
				contact_title
				address
				city
				region
				postal_code
				country
				phone
				fax
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>address</Name>
					<Caption></Caption>
					<Comment>Supplier's address</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment>Supplier's city</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment>Supplier's company name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression>.NOT.EMPTY(company_name)</RuleExpression>
					<RuleText>"Company name cannot be empty."</RuleText>
				</FIELD>
				<FIELD>
					<Name>contact_name</Name>
					<Caption></Caption>
					<Comment>Contact's name</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>contact_title</Name>
					<Caption></Caption>
					<Comment>Contact's title</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment>Supplier's country</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>fax</Name>
					<Caption></Caption>
					<Comment>Supplier's fax number</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>phone</Name>
					<Caption></Caption>
					<Comment>Supplier's phone number</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>postal_code</Name>
					<Caption></Caption>
					<Comment>Supplier's postal (zip) code</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>region</Name>
					<Caption></Caption>
					<Comment>Supplier region</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>supplier_id</Name>
					<Caption></Caption>
					<Comment>Internal supplier ID</Comment>
					<DefaultValue>newid()</DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>company_na</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>contact_na</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>supplier_i</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
			</INDEXES>

		</TABLE>

		<TABLE>
			<Name>USER_LEVEL</Name>
			<Comment>User Level (Security) Information</Comment>
			<Path>user_lev.dbf</Path>
			<DeleteTrigger>__ri_delete_user_level()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_user_level()</UpdateTrigger>
			<PrimaryKey>group_id</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>

			<FIELD_ORDER>
				group_id
				description
				startup_action
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>description</Name>
					<Caption></Caption>
					<Comment>Description of group</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>group_id</Name>
					<Caption></Caption>
					<Comment>Internal group ID</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
				<FIELD>
					<Name>startup_action</Name>
					<Caption></Caption>
					<Comment>Name of action to perform when logging in</Comment>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
				</FIELD>
			</FIELDS>

			<INDEXES>
				<INDEX>
					<Name>descriptio</Name>
					<Comment></Comment>
					<IsUnique>.F.</IsUnique>
				</INDEX>
				<INDEX>
					<Name>group_id</Name>
					<Comment></Comment>
					<IsUnique>.T.</IsUnique>
				</INDEX>
			</INDEXES>

		</TABLE>
	</TABLES>


	<VIEWS>

		<VIEW>
			<Name>CATEGORY LISTING</Name>
			<Comment></Comment>
			<Tables>category</Tables>
			<SQL>SELECT Category.category_name, Category.description, Category.picture FROM tastrade!category</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				category_name
				description
				picture
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>category_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Category.category_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>description</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>M</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Category.description</UpdateName>
				</FIELD>
				<FIELD>
					<Name>picture</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>G</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Category.picture</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>CUSTOMER LISTING</Name>
			<Comment></Comment>
			<Tables>customer</Tables>
			<SQL>SELECT Customer.company_name, Customer.contact_name, Customer.phone FROM tastrade!customer ORDER BY Customer.company_name, Customer.contact_name</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				company_name
				contact_name
				phone
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.company_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>contact_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(30)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.contact_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>phone</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(24)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.phone</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>EMPLOYEE LISTING</Name>
			<Comment></Comment>
			<Tables>employee</Tables>
			<SQL>SELECT Employee.title, Employee.last_name, Employee.first_name,  Employee.extension, Employee.notes FROM tastrade!employee WHERE Employee.title = ?cTitle ORDER BY Employee.title, Employee.last_name, Employee.first_name,  Employee.extension</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList>cTitle,'C'</ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				title
				last_name
				first_name
				extension
				notes
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>extension</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(4)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Employee.extension</UpdateName>
				</FIELD>
				<FIELD>
					<Name>first_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Employee.first_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>last_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(20)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Employee.last_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>notes</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>M</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Employee.notes</UpdateName>
				</FIELD>
				<FIELD>
					<Name>title</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(30)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Employee.title</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDER HISTORY</Name>
			<Comment></Comment>
			<Tables>tastrade!orders</Tables>
			<SQL>SELECT Orders.order_id, Orders.order_date, Orders.deliver_by, SUM((Orditems.unit_price*Orditems.quantity)-Orders.discount)*0.01*SUM((Orditems.unit_price*Orditems.quantity)+Orders.freight) AS ord_total, Orders.paid FROM  tastrade!orders  INNER JOIN tastrade!order_line_items Orditems  ON  Orders.order_id = Orditems.order_id WHERE  Orders.customer_id = ( ?customer.customer_id ) GROUP BY Orders.order_id, Orders.order_date, Orders.deliver_by, Orders.paid ORDER BY Orders.order_date DESC</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList>customer_id,'C'</ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				order_id
				order_date
				deliver_by
				ord_total
				paid
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>deliver_by</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>TASTRADE!ORDERS.deliver_by</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ord_total</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.deliver_by*</UpdateName>
				</FIELD>
				<FIELD>
					<Name>order_date</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>TASTRADE!ORDERS.order_date</UpdateName>
				</FIELD>
				<FIELD>
					<Name>order_id</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>TASTRADE!ORDERS.order_id</UpdateName>
				</FIELD>
				<FIELD>
					<Name>paid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>L</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>tastrade!orders.paid</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDER HISTORY LINE ITEMS</Name>
			<Comment></Comment>
			<Tables>tastrade!order_line_items</Tables>
			<SQL>SELECT .F., Products.product_name, Order_line_items.quantity,  Order_line_items.unit_price,  Order_line_items.unit_price*Order_line_items.quantity AS extension,  Order_line_items.product_id FROM tastrade!order_line_items, tastrade!products WHERE Products.product_id = Order_line_items.product_id   AND Order_line_items.order_id = ?orders.order_id</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				exp_1
				product_name
				quantity
				unit_price
				extension
				product_id
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>exp_1</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>L</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>exp_1</UpdateName>
				</FIELD>
				<FIELD>
					<Name>extension</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Order_line_items.unit_price*</UpdateName>
				</FIELD>
				<FIELD>
					<Name>product_id</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>tastrade!order_line_items.product_id</UpdateName>
				</FIELD>
				<FIELD>
					<Name>product_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Products.product_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantity</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(12,3)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Order_line_items.quantity</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unit_price</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Order_line_items.unit_price</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDERS VIEW</Name>
			<Comment></Comment>
			<Tables>orders,order_line_items,customer,shippers,products</Tables>
			<SQL>SELECT Orders.order_number, Orders.order_date, Orders.ship_to_name,  Orders.ship_to_address, Orders.ship_to_city, Orders.ship_to_region,  Orders.ship_to_postal_code, Orders.ship_to_country, Orders.discount,  Orders.freight, Order_line_items.unit_price, Order_line_items.quantity,  Customer.company_name, Customer.address, Customer.city, Customer.region,  Customer.postal_code, Customer.country, Shippers.company_name,  Products.product_name FROM tastrade!orders, tastrade!order_line_items, tastrade!customer,  tastrade!shippers, tastrade!products WHERE Orders.order_id = Order_line_items.order_id   AND Orders.customer_id = Customer.customer_id   AND Orders.shipper_id = Shippers.shipper_id   AND Order_line_items.product_id = Products.product_id   AND Orders.order_date BETWEEN ?dDateFrom AND ?dDateTo ORDER BY Orders.order_date, Orders.order_number</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList>dDateFrom,'D';dDateTo,'D'</ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				order_number
				order_date
				ship_to_name
				ship_to_address
				ship_to_city
				ship_to_region
				ship_to_postal_code
				ship_to_country
				discount
				freight
				unit_price
				quantity
				company_name_a
				address
				city
				region
				postal_code
				country
				company_name_b
				product_name
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>address</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(60)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.address</UpdateName>
				</FIELD>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.city</UpdateName>
				</FIELD>
				<FIELD>
					<Name>company_name_a</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.company_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>company_name_b</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Shippers.company_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.country</UpdateName>
				</FIELD>
				<FIELD>
					<Name>discount</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(2)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.discount</UpdateName>
				</FIELD>
				<FIELD>
					<Name>freight</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y NOCPTRANS</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.freight</UpdateName>
				</FIELD>
				<FIELD>
					<Name>order_date</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.order_date</UpdateName>
				</FIELD>
				<FIELD>
					<Name>order_number</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.order_number</UpdateName>
				</FIELD>
				<FIELD>
					<Name>postal_code</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.postal_code</UpdateName>
				</FIELD>
				<FIELD>
					<Name>product_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Products.product_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantity</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(12,3)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Order_line_items.quantity</UpdateName>
				</FIELD>
				<FIELD>
					<Name>region</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customer.region</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ship_to_address</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(60)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.ship_to_address</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ship_to_city</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.ship_to_city</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ship_to_country</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.ship_to_country</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ship_to_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.ship_to_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ship_to_postal_code</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.ship_to_postal_code</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ship_to_region</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.ship_to_region</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unit_price</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y NOCPTRANS</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Order_line_items.unit_price</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDERTOTAL</Name>
			<Comment></Comment>
			<Tables>tastrade!orders</Tables>
			<SQL>SELECT Orders.customer_id, SUM(Orditems.unit_price*Orditems.quantity-(0.01*Orders.discount*Orditems.unit_price*Orditems.quantity)+Orders.freight) AS ordertotal FROM  tastrade!orders  INNER JOIN tastrade!order_line_items Orditems  ON  Orders.order_id = Orditems.order_id GROUP BY Orders.customer_id</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				customer_id
				ordertotal
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>customer_id</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>customer_id</UpdateName>
				</FIELD>
				<FIELD>
					<Name>ordertotal</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>ordertotal</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>PRODUCT LISTING</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT Products.product_name, Products.quantity_in_unit,  Products.unit_price, Products.unit_cost FROM tastrade!Products ORDER BY Products.product_name, Products.quantity_in_unit</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				product_name
				quantity_in_unit
				unit_price
				unit_cost
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>product_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>PRODUCT_NAME</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantity_in_unit</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(20)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>QUANTITY_IN_UNIT</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unit_cost</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y NOCPTRANS</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>UNIT_COST</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unit_price</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y NOCPTRANS</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>UNIT_PRICE</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SALES DETAIL</Name>
			<Comment></Comment>
			<Tables>orders,order_line_items</Tables>
			<SQL>SELECT STR(YEAR(Orders.order_date),4)+STR(MONTH(Orders.order_date),2),  Orders.order_date, SUM(Order_line_items.unit_price) FROM tastrade!orders, tastrade!order_line_items WHERE Orders.order_id = Order_line_items.order_id GROUP BY 1, Orders.order_date</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				exp_1
				order_date
				sum_unit_price
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>exp_1</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>exp_1</UpdateName>
				</FIELD>
				<FIELD>
					<Name>order_date</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.order_date</UpdateName>
				</FIELD>
				<FIELD>
					<Name>sum_unit_price</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y NOCPTRANS</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>sum_unit_price</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SALES SUMMARY</Name>
			<Comment></Comment>
			<Tables>rectclass</Tables>
			<SQL>SELECT STR(YEAR(Orders.order_date), 4) + STR(MONTH(Orders.order_date), 2),  SUM(Order_line_items.unit_price) AS sum_unit_price FROM tastrade!Orders, tastrade!Order_Line_Items WHERE Orders.order_id = Order_line_items.order_id GROUP BY 1</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				exp_1
				sum_unit_price
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>exp_1</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>exp_1</UpdateName>
				</FIELD>
				<FIELD>
					<Name>sum_unit_price</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y NOCPTRANS</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>sum_unit_price</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SHIPPER LISTING</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT Shippers.company_name FROM tastrade!Shippers ORDER BY Shippers.company_name</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				company_name
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>COMPANY_NAME</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SUPPLIER LISTING</Name>
			<Comment></Comment>
			<Tables>supplier</Tables>
			<SQL>SELECT Supplier.company_name, Supplier.contact_name, Supplier.phone FROM tastrade!supplier ORDER BY Supplier.company_name, Supplier.contact_name</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.F.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				company_name
				contact_name
				phone
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Supplier.company_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>contact_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(30)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Supplier.contact_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>phone</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(24)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Supplier.phone</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>TOP25CUST</Name>
			<Comment></Comment>
			<Tables>tastrade!customer</Tables>
			<SQL>SELECT TOP 25 Customer.customer_id, Customer.company_name, Customer.country, SUM(Ordertotal.ordertotal) AS custtotal FROM  customer  INNER JOIN tastrade!ordertotal  ON  Customer.customer_id = Ordertotal.customer_id GROUP BY Customer.customer_id, Customer.company_name, Customer.country ORDER BY 4 DESC</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				customer_id
				company_name
				country
				custtotal
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>company_name</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>company_name</UpdateName>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>country</UpdateName>
				</FIELD>
				<FIELD>
					<Name>customer_id</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(6)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>tastrade!customer.customer_id</UpdateName>
				</FIELD>
				<FIELD>
					<Name>custtotal</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>custtotal</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>
	</VIEWS>



	<STOREDPROCEDURES><![CDATA[
#INCLUDE TASTRADE.H

FUNCTION NewID(tcAlias)
  LOCAL lcAlias, ;
        lcID, ;
        lcOldReprocess, ;
        lnOldArea

  lnOldArea = SELECT()

  IF PARAMETERS() < 1
    lcAlias = UPPER(ALIAS())
  ELSE
    lcAlias = UPPER(tcAlias)
  ENDIF

  lcID = ""
  lcOldReprocess = SET('REPROCESS')

  *-- Lock until user presses Esc
  SET REPROCESS TO AUTOMATIC

  IF !USED("SETUP")
    USE tastrade!setup IN 0
  ENDIF
  SELECT setup

  IF SEEK(lcAlias, "setup", "key_name")
    IF RLOCK()
      lcID = setup.value
      REPLACE setup.value WITH ;
              STR(VAL(ALLT(lcID)) + 1, LEN(setup.value))
      UNLOCK
    ENDIF
  ENDIF

  SELECT (lnOldArea)
  SET REPROCESS TO lcOldReprocess

  RETURN lcID
ENDFUNC

******************
FUNCTION RemainingCredit(tcCustomerID)
  LOCAL lyMaxOrderAmount, ;
        lyTotalOrders, ;
        lcCustomerAlias, ;
        lnOldArea

  IF PARAMETERS() < 1 OR EMPTY(tcCustomerID)
    RETURN 0
  ENDIF

  lyMaxOrderAmount = 0

  lnOldArea = SELECT(0)
  lcCustomerAlias = SYS(2015)
  USE tastrade!customer AGAIN IN 0 ALIAS (lcCustomerAlias)
  IF SEEK(tcCustomerID, lcCustomerAlias, "customer_i")
    lyMaxOrderAmount = EVAL(lcCustomerAlias + ".max_order_amt")
  ENDIF
  USE IN (lcCustomerAlias)

  *-- We use the orders table again to avoid "Illegal
  *-- recursion" errors.
  USE tastrade!orders AGAIN ALIAS _orders IN 0

  SELECT SUM((b.unit_price * b.quantity) - ;
      (a.discount * .01) * (b.unit_price * b.quantity) + a.freight) AS totalorder, a.order_id ;
    FROM _orders a, order_line_items b ;
   WHERE a.order_id = b.order_id AND ;
     a.customer_id = tcCustomerID AND ;
     !a.paid ;
   GROUP by a.order_id ;
    INTO CURSOR orderamounts

  SUM totalorder to lyTotalOrders

  USE IN _orders
  USE IN orderamounts

  SELECT (lnOldArea)

  RETURN lyMaxOrderAmount - lyTotalOrders
ENDFUNC

******************
FUNCTION ValOrder()
  LOCAL llRetVal, ;
        lnAnswer, ;
        llClose, ;
        lnOldRecNo, ;
        lnOrderTotal, ;
        lnOldArea, ;
        lcCustomerAlias, ;
        lyMinOrdAmount, ;
        lyOrderAmount

  *-- Don't bother checking if we're deleting the order
  IF DELETED()
    RETURN
  ENDIF

  lnOldArea = SELECT()

  *-- Check if we have at least one line item. Use the current
  *-- table if order_line_items is already opened to include
  *-- buffered records.
  IF !USED("order_line_items")
    USE tastrade!order_line_items AGAIN IN 0
    llClose = .T.
  ENDIF

  lnOldRecNo = IIF(RECCOUNT("order_line_items") > 0, RECNO("order_line_items"), 0)
  llRetVal = (SEEK(orders.order_id, "order_line_items", "order_id") AND ;
          !EMPTY(order_line_items.product_id))
  IF lnOldRecNo <> 0 AND llRetVal
    GO lnOldRecNo IN order_line_items
  ENDIF

  IF !llRetVal
    =MESSAGEBOX(ORDHASITEMS_LOC, ;
                MB_ICONEXCLAMATION, ;
                TASTRADE_LOC)
  ENDIF

  lyOrderAmount = CalcMinOrdAmount(orders.order_id)
  IF llRetVal
    *-- Check if customer is over credit limit. If
    *-- customer id is empty, the order will not be saved
    *-- because customer_id is a required foreign key, enforced
    *-- by the RI triggers, so we don't even bother checking.
    IF !EMPTY(orders.customer_id)
      IF !(GETFLDSTATE("paid","orders") == 2 AND OCCURS("2",GETFLDSTATE(-1,"Orders")) == 1) AND ;
      	LOWER(_screen.ActiveForm.Name) # "frmordhistory"
        *- didn't just change paid, and isn't on order history screen
        LOCAL lyRemainingCredit
        lyRemainingCredit = RemainingCredit(orders.customer_id) + IIF(orders.paid, lyOrderAmount, 0)
        IF lyRemainingCredit < $0
          lnAnswer = ;
            MESSAGEBOX(CUSTOVERMAX_LOC + ;
                        DOLLAR_FORMAT3_LOC + ALLT(STR(ABS(lyRemainingCredit), 15, 2)) + DOLLAR_FORMAT2_LOC + CR + ;
                        SAVEANYWAY_LOC, ;
                     MB_ICONQUESTION + MB_YESNO, ;
                     TASTRADE_LOC)
          llRetVal = (lnAnswer = IDYES)
        ENDIF
      ENDIF

      IF llRetVal
        *-- Get the customer's minimum order amount
        IF !(GETFLDSTATE("paid","orders") == 2 AND OCCURS("2",GETFLDSTATE(-1,"Orders")) == 1) AND ;
   		  LOWER(_screen.ActiveForm.Name) # "frmordhistory"
          lcCustomerAlias = SYS(2015)
          USE tastrade!customer AGAIN IN 0 ALIAS (lcCustomerAlias)
          IF SEEK(orders.customer_id, lcCustomerAlias, "customer_i")
            lyMinOrdAmount = EVAL(lcCustomerAlias + ".min_order_amt")
          ENDIF
          USE IN (lcCustomerAlias)

          IF lyOrderAmount < lyMinOrdAmount
            lnAnswer = ;
              MESSAGEBOX(CUSTUNDERMIN_LOC + ;
                         DOLLAR_FORMAT3_LOC + ALLT(STR(lyMinOrdAmount, 15, 2)) + DOLLAR_FORMAT2_LOC + CR + ;
                         SAVEANYWAY_LOC, ;
                       MB_ICONQUESTION + MB_YESNO, ;
                       TASTRADE_LOC)
            llRetVal = (lnAnswer = IDYES)
          ENDIF
        ENDIF
      ENDIF
    ENDIF	&& marked as paid only
  ENDIF

  IF llClose
    USE IN order_line_items
  ENDIF

  SELECT (lnOldArea)

  RETURN llRetVal
ENDFUNC

******************
FUNCTION CalcMinOrdAmount(tcOrderID)
  *-- Returns order amount
  *-- Assumes orders table is open and positioned on desired record
  LOCAL lyOrderTotal, ;
        llClose

  IF !USED("order_line_items")
    USE tastrade!order_line_items IN 0
    llClose = .T.
  ENDIF
  SELECT order_line_items

  lnOldRecNo = IIF(EOF(), 0, RECNO())
  SUM (unit_price * quantity) - ;
    (orders.discount * .01) * (unit_price * quantity) ;
    FOR order_id = tcOrderID ;
    TO lyOrderTotal

  IF lnOldRecNo <> 0
    GO lnOldRecNo IN order_line_items
  ENDIF

  IF llClose
    USE IN order_line_items
  ENDIF

  RETURN lyOrderTotal

ENDFUNC

******************
FUNCTION CalcOrdTotal(tcOrderID)
  *-- Returns total of order, after discount
  *-- Assumes orders table is open and positioned on desired record
  LOCAL lyOrderTotal, ;
        llClose,;
        liSelect

  IF !USED("order_line_items")
    USE tastrade!order_line_items IN 0
    llClose = .T.
  ENDIF
  liSelect = SELECT()
  SELECT order_line_items

  lnOldRecNo = IIF(EOF(), 0, RECNO())
  SUM (unit_price * quantity) - ;
    (orders.discount * .01) * (unit_price * quantity) ;
    FOR order_id = tcOrderID ;
    TO lyOrderTotal

  IF lnOldRecNo <> 0
    GO lnOldRecNo IN order_line_items
  ENDIF

  IF llClose
    USE IN order_line_items
  ENDIF

  SELECT (m.liSelect)
  RETURN lyOrderTotal

ENDFUNC

******************
FUNCTION DefaultEmployee()
  LOCAL lcEmployeeID
  *-- An order must have an employee ID associated with it
  *-- For the purposes of this sample application, we will
  *-- attempt to use the employee ID for the currently logged in
  *-- employee. If the oApp object does not exist (i.e., we are not
  *-- running the application), we will attempt to retrieve an arbitrary
  *-- employee ID from the employee file
  lcEmployeeID = ""
  IF TYPE("oApp") == "O"
    lcEmployeeID = oApp.GetEmployeeID()
  ENDIF
  IF EMPTY(lcEmployeeID)
    USE tastrade!employee AGAIN IN 0 ALIAS emp
    lcEmployeeID = emp.employee_id
    USE IN emp
  ENDIF

  RETURN lcEmployeeID
ENDFUNC


*---------------------------------------------------------------------

**__RI_HEADER!@ Do NOT REMOVE or MODIFY this line!!!! @!__RI_HEADER**
procedure RIDELETE
local llRetVal
llRetVal=.t.
 IF (ISRLOCKED() and !deleted()) OR !RLOCK()
    llRetVal=.F.
  ELSE
    IF !deleted()
      DELETE
      llRetVal=pnerror=0
    ENDIF not already deleted
  ENDIF
  UNLOCK RECORD (RECNO())
RETURN llRetVal

procedure RIUPDATE
lparameters tcFieldName,tcNewValue,tcCascadeParent
local llRetVal
llRetVal=.t.
 IF ISRLOCKED() OR !RLOCK()
    llRetVal=.F.
  ELSE
    IF EVAL(tcFieldName)<>tcNewValue
      PRIVATE pcCascadeParent
      pcCascadeParent=upper(iif(type("tcCascadeParent")<>"C","",tcCascadeParent))
      REPLACE (tcFieldName) WITH tcNewValue
      llRetVal=pnerror=0
    ENDIF values don't already match
  ENDIF it's locked already, or I was able to lock it
  UNLOCK RECORD (RECNO())
return llRetVal

procedure rierror
parameters tnErrNo,tcMessage,tcCode,tcProgram
local lnErrorRows,lnXX
lnErrorRows=alen(gaErrors,1)
if type('gaErrors[lnErrorRows,1]')<>"L"
  dimension gaErrors[lnErrorRows+1,alen(gaErrors,2)]
  lnErrorRows=lnErrorRows+1
endif
gaErrors[lnErrorRows,1]=tnErrNo
gaErrors[lnErrorRows,2]=tcMessage
gaErrors[lnErrorRows,3]=tcCode
gaErrors[lnErrorRows,4]=""
lnXX=1
do while !empty(program(lnXX))
  gaErrors[lnErrorRows,4]=gaErrors[lnErrorRows,4]+","+;
  program(lnXX)
  lnXX=lnXX+1
enddo
gaErrors[lnErrorRows,5]=pcParentDBF
gaErrors[lnErrorRows,6]=pnParentRec
gaErrors[lnErrorRows,7]=pcParentID
gaErrors[lnErrorRows,8]=pcParentExpr
gaErrors[lnErrorRows,9]=pcChildDBF
gaErrors[lnErrorRows,10]=pnChildRec
gaErrors[lnErrorRows,11]=pcChildID
gaErrors[lnErrorRows,12]=pcChildExpr
return tnErrNo


PROCEDURE riopen
PARAMETERS tcTable,tcOrder
local lcCurWkArea,lcNewWkArea,lnInUseSpot
lnInUseSpot=atc(tcTable+"*",pcRIcursors)
IF lnInUseSpot=0
  lcCurWkArea=select()
  SELECT 0
  lcNewWkArea=select()
  IF NOT EMPTY(tcOrder)
    USE (tcTable) AGAIN ORDER (tcOrder) ;
      ALIAS ("__ri"+LTRIM(STR(SELECT()))) share
  ELSE
    USE (tcTable) AGAIN ALIAS ("__ri"+LTRIM(STR(SELECT()))) share
  ENDIF
  if pnerror=0
    pcRIcursors=pcRIcursors+upper(tcTable)+"?"+STR(SELECT(),5)
  else
    lcNewWkArea=0
  endif something bad happened while attempting to open the file
ELSE
  lcNewWkArea=val(substr(pcRIcursors,lnInUseSpot+len(tcTable)+1,5))
  pcRIcursors = strtran(pcRIcursors,upper(tcTable)+"*"+str(lcNewWkArea,5),;
    upper(tcTable)+"?"+str(lcNewWkArea,5))
  IF NOT EMPTY(tcOrder)
    SET ORDER TO (tcOrder) IN (lcNewWkArea)
  ENDIF sent an order
  if pnerror<>0
    lcNewWkArea=0
  endif something bad happened while setting order
ENDIF
RETURN (lcNewWkArea)


PROCEDURE riend
PARAMETERS tlSuccess
local lnXX,lnSpot,lcWorkArea
IF tlSuccess
  END TRANSACTION
ELSE
  SET DELETED OFF
  ROLLBACK
  SET DELETED ON
ENDIF
IF EMPTY(pcRIolderror)
  ON ERROR
ELSE
  ON ERROR &pcRIolderror.
ENDIF
FOR lnXX=1 TO occurs("*",pcRIcursors)
  lnSpot=atc("*",pcRIcursors,lnXX)+1
  USE IN (VAL(substr(pcRIcursors,lnSpot,5)))
ENDFOR
IF pcOldCompat = "ON"
	SET COMPATIBLE ON
ENDIF
IF pcOldDele="OFF"
  SET DELETED OFF
ENDIF
IF pcOldExact="ON"
  SET EXACT ON
ENDIF
IF pcOldTalk="ON"
  SET TALK ON
ENDIF
do case
  case empty(pcOldDBC)
    set data to
  case pcOldDBC<>DBC()
    set data to (pcOldDBC)
endcase
RETURN .T.


PROCEDURE rireuse
* rireuse.prg
PARAMETERS tcTableName,tcWkArea
pcRIcursors = strtran(pcRIcursors,upper(tcTableName)+"?"+str(tcWkArea,5),;
  upper(tcTableName)+"*"+str(tcWkArea,5))
RETURN .t.

********************************************************************************
** "Referential integrity delete trigger for" category
PROCEDURE __RI_DELETE_category
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE CATEGORY_ID TO lcParentID,pcParentID
pcParentExpr="CATEGORY_ID"
lcChildWkArea=riopen("products","category_i")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=CATEGORY_ID
pcChildExpr="CATEGORY_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("products",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" category
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_category
** "Referential integrity update trigger for" category
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("CATEGORY_ID")
pcParentID=lcOldParentID
pcParentExpr="CATEGORY_ID"
lcParentID=CATEGORY_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("products")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR CATEGORY_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=CATEGORY_ID
    pcChildExpr="CATEGORY_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("CATEGORY_ID",lcParentID,"CATEGORY")
  ENDSCAN get all of the products records
  =rireuse("products",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" category
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" customer
PROCEDURE __RI_DELETE_customer
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE CUSTOMER_ID TO lcParentID,pcParentID
pcParentExpr="CUSTOMER_ID"
lcChildWkArea=riopen("orders","customer_i")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=CUSTOMER_ID
pcChildExpr="CUSTOMER_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("orders",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" customer
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_customer
** "Referential integrity update trigger for" customer
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("CUSTOMER_ID")
pcParentID=lcOldParentID
pcParentExpr="CUSTOMER_ID"
lcParentID=CUSTOMER_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("orders")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR CUSTOMER_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=CUSTOMER_ID
    pcChildExpr="CUSTOMER_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("CUSTOMER_ID",lcParentID,"CUSTOMER")
  ENDSCAN get all of the orders records
  =rireuse("orders",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" customer
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" employee
PROCEDURE __RI_DELETE_employee
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE EMPLOYEE_ID TO lcParentID,pcParentID
pcParentExpr="EMPLOYEE_ID"
lcChildWkArea=riopen("orders","employee_i")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=EMPLOYEE_ID
pcChildExpr="EMPLOYEE_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("orders",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" employee
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_employee
** "Referential integrity update trigger for" employee
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=select()
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="USER_LEVEL")
  SELECT (lcChildWkArea)
  lcChildID=GROUP_ID
  lcOldChildID=oldval("GROUP_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="GROUP_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("user_level","group_id")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("user_level",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "user_level"
lcParentWkArea=lcChildWkArea
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("EMPLOYEE_ID")
pcParentID=lcOldParentID
pcParentExpr="EMPLOYEE_ID"
lcParentID=EMPLOYEE_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("orders")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR EMPLOYEE_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=EMPLOYEE_ID
    pcChildExpr="EMPLOYEE_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("EMPLOYEE_ID",lcParentID,"EMPLOYEE")
  ENDSCAN get all of the orders records
  =rireuse("orders",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" employee
********************************************************************************

********************************************************************************
** "Referential integrity insert trigger for" employee
PROCEDURE __RI_INSERT_employee
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcChildWkArea && child's work area
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=SELECT()
SELECT (lcChildWkArea)
lcChildID=GROUP_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="GROUP_ID"
lcParentWkArea=riopen("user_level","group_id")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("user_level",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity insert trigger for" employee
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_order_line_items
** "Referential integrity update trigger for" order_line_items
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=select()
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="PRODUCTS")
  SELECT (lcChildWkArea)
  lcChildID=PRODUCT_ID
  lcOldChildID=oldval("PRODUCT_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="PRODUCT_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("products","product_id")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("products",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "products"
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="ORDERS")
  SELECT (lcChildWkArea)
  lcChildID=ORDER_ID
  lcOldChildID=oldval("ORDER_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="ORDER_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("orders","order_id")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("orders",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "orders"
lcParentWkArea=lcChildWkArea
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" order_line_items
********************************************************************************

********************************************************************************
** "Referential integrity insert trigger for" order_line_items
PROCEDURE __RI_INSERT_order_line_items
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcChildWkArea && child's work area
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=SELECT()
SELECT (lcChildWkArea)
lcChildID=PRODUCT_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="PRODUCT_ID"
lcParentWkArea=riopen("products","product_id")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("products",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcChildWkArea)
lcChildID=ORDER_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="ORDER_ID"
lcParentWkArea=riopen("orders","order_id")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("orders",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity insert trigger for" order_line_items
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" orders
PROCEDURE __RI_DELETE_orders
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE ORDER_ID TO lcParentID,pcParentID
pcParentExpr="ORDER_ID"
lcChildWkArea=riopen("order_line_items","order_id")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
SELECT (lcChildWkArea)
SEEK lcParentID
SCAN WHILE ORDER_ID=lcParentID AND llRetVal
  pnChildRec=recno()
  pcChildID=ORDER_ID
  pcChildExpr="ORDER_ID"
  llRetVal=ridelete()
ENDSCAN get all of the order_line_items records
=rireuse("order_line_items",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" orders
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_orders
** "Referential integrity update trigger for" orders
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=select()
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="CUSTOMER")
  SELECT (lcChildWkArea)
  lcChildID=CUSTOMER_ID
  lcOldChildID=oldval("CUSTOMER_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="CUSTOMER_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("customer","customer_i")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("customer",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "customer"
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="SHIPPERS")
  SELECT (lcChildWkArea)
  lcChildID=SHIPPER_ID
  lcOldChildID=oldval("SHIPPER_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="SHIPPER_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("shippers","shipper_id")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("shippers",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "shippers"
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="EMPLOYEE")
  SELECT (lcChildWkArea)
  lcChildID=EMPLOYEE_ID
  lcOldChildID=oldval("EMPLOYEE_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="EMPLOYEE_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("employee","employee_i")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("employee",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "employee"
lcParentWkArea=lcChildWkArea
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("ORDER_ID")
pcParentID=lcOldParentID
pcParentExpr="ORDER_ID"
lcParentID=ORDER_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("order_line_items")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR ORDER_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=ORDER_ID
    pcChildExpr="ORDER_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("ORDER_ID",lcParentID,"ORDERS")
  ENDSCAN get all of the order_line_items records
  =rireuse("order_line_items",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" orders
********************************************************************************

********************************************************************************
** "Referential integrity insert trigger for" orders
PROCEDURE __RI_INSERT_orders
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcChildWkArea && child's work area
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=SELECT()
SELECT (lcChildWkArea)
lcChildID=CUSTOMER_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="CUSTOMER_ID"
lcParentWkArea=riopen("customer","customer_i")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("customer",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcChildWkArea)
lcChildID=SHIPPER_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="SHIPPER_ID"
lcParentWkArea=riopen("shippers","shipper_id")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("shippers",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcChildWkArea)
lcChildID=EMPLOYEE_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="EMPLOYEE_ID"
lcParentWkArea=riopen("employee","employee_i")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("employee",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity insert trigger for" orders
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" products
PROCEDURE __RI_DELETE_products
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE PRODUCT_ID TO lcParentID,pcParentID
pcParentExpr="PRODUCT_ID"
lcChildWkArea=riopen("order_line_items","product_id")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=PRODUCT_ID
pcChildExpr="PRODUCT_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("order_line_items",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" products
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_products
** "Referential integrity update trigger for" products
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=select()
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="CATEGORY")
  SELECT (lcChildWkArea)
  lcChildID=CATEGORY_ID
  lcOldChildID=oldval("CATEGORY_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="CATEGORY_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("category","category_i")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("category",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "category"
IF _triggerlevel=1 or type("pccascadeparent")#"C" or (NOT pccascadeparent=="SUPPLIER")
  SELECT (lcChildWkArea)
  lcChildID=SUPPLIER_ID
  lcOldChildID=oldval("SUPPLIER_ID")
  pcChildDBF=dbf(lcChildWkArea)
  pnChildRec=recno(lcChildWkArea)
  pcChildID=lcOldChildID
  pcChildExpr="SUPPLIER_ID"
  IF lcChildID<>lcOldChildID
    lcParentWkArea=riopen("supplier","supplier_i")
    IF lcParentWkArea<=0
      IF _triggerlevel=1
        DO riend WITH .F.
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN .F.
    ENDIF not able to open the child work area
    pcParentDBF=dbf(lcParentWkArea)
    llRetVal=SEEK(lcChildID,lcParentWkArea)
    pnParentRec=recno(lcParentWkArea)
    =rireuse("supplier",lcParentWkArea)
    IF NOT llRetVal
      DO rierror with -1,"Insert restrict rule violated.","",""
      IF _triggerlevel=1
        DO riend WITH llRetVal
      ENDIF at the end of the highest trigger level
      SELECT (lcStartArea)
      RETURN llRetVal
    ENDIF no parent
  ENDIF this value was changed
ENDIF not part of a cascade from "supplier"
lcParentWkArea=lcChildWkArea
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("PRODUCT_ID")
pcParentID=lcOldParentID
pcParentExpr="PRODUCT_ID"
lcParentID=PRODUCT_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("order_line_items")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR PRODUCT_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=PRODUCT_ID
    pcChildExpr="PRODUCT_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("PRODUCT_ID",lcParentID,"PRODUCTS")
  ENDSCAN get all of the order_line_items records
  =rireuse("order_line_items",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" products
********************************************************************************

********************************************************************************
** "Referential integrity insert trigger for" products
PROCEDURE __RI_INSERT_products
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcChildWkArea && child's work area
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcChildWkArea=SELECT()
SELECT (lcChildWkArea)
lcChildID=CATEGORY_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="CATEGORY_ID"
lcParentWkArea=riopen("category","category_i")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("category",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcChildWkArea)
lcChildID=SUPPLIER_ID
pcChildDBF=dbf(lcChildWkArea)
pnChildRec=recno(lcChildWkArea)
pcChildID=lcChildID
pcChildExpr="SUPPLIER_ID"
lcParentWkArea=riopen("supplier","supplier_i")
IF lcParentWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN .F.
ENDIF not able to open the child work area
pcParentDBF=dbf(lcParentWkArea)
llRetVal=SEEK(lcChildID,lcParentWkArea)
pnParentRec=recno(lcParentWkArea)
=rireuse("supplier",lcParentWkArea)
IF NOT llRetVal
  DO rierror with -1,"Insert restrict rule violated.","",""
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity insert trigger for" products
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" shippers
PROCEDURE __RI_DELETE_shippers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE SHIPPER_ID TO lcParentID,pcParentID
pcParentExpr="SHIPPER_ID"
lcChildWkArea=riopen("orders","shipper_id")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=SHIPPER_ID
pcChildExpr="SHIPPER_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("orders",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" shippers
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_shippers
** "Referential integrity update trigger for" shippers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("SHIPPER_ID")
pcParentID=lcOldParentID
pcParentExpr="SHIPPER_ID"
lcParentID=SHIPPER_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("orders")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR SHIPPER_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=SHIPPER_ID
    pcChildExpr="SHIPPER_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("SHIPPER_ID",lcParentID,"SHIPPERS")
  ENDSCAN get all of the orders records
  =rireuse("orders",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" shippers
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" supplier
PROCEDURE __RI_DELETE_supplier
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE SUPPLIER_ID TO lcParentID,pcParentID
pcParentExpr="SUPPLIER_ID"
lcChildWkArea=riopen("products","supplier_i")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=SUPPLIER_ID
pcChildExpr="SUPPLIER_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("products",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" supplier
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_supplier
** "Referential integrity update trigger for" supplier
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("SUPPLIER_ID")
pcParentID=lcOldParentID
pcParentExpr="SUPPLIER_ID"
lcParentID=SUPPLIER_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("products")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR SUPPLIER_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=SUPPLIER_ID
    pcChildExpr="SUPPLIER_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("SUPPLIER_ID",lcParentID,"SUPPLIER")
  ENDSCAN get all of the products records
  =rireuse("products",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" supplier
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" user_level
PROCEDURE __RI_DELETE_user_level
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE GROUP_ID TO lcParentID,pcParentID
pcParentExpr="GROUP_ID"
lcChildWkArea=riopen("employee","group_id")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=GROUP_ID
pcChildExpr="GROUP_ID"
IF !llRetVal
  DO rierror with -1,"Delete restrict rule violated.","",""
ENDIF
=rireuse("employee",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" user_level
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_user_level
** "Referential integrity update trigger for" user_level
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("TASTRADE")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("GROUP_ID")
pcParentID=lcOldParentID
pcParentExpr="GROUP_ID"
lcParentID=GROUP_ID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("employee")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR GROUP_ID=lcOldParentID
    pnChildRec=recno()
    pcChildID=GROUP_ID
    pcChildExpr="GROUP_ID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("GROUP_ID",lcParentID,"USER_LEVEL")
  ENDSCAN get all of the employee records
  =rireuse("employee",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" user_level
********************************************************************************
**__RI_FOOTER!@ Do NOT REMOVE or MODIFY this line!!!! @!__RI_FOOTER**

	]]></STOREDPROCEDURES>
</DATABASE>