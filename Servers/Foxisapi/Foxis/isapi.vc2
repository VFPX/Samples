*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="isapi.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS combodist AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 24
	Name = "combodist"
	Width = 100
	
	PROCEDURE Destroy
		LOCAL cTmp
		IF USED("c"+this.name)
			USE IN ("c"+this.name)
		ENDIF
	ENDPROC

	PROCEDURE Init
		LOCAL cAlias,cColumn
		IF !EMPTY(THIS.controlSource) THEN
			cAlias = LEFTC(THIS.controlSource,AT_C(".",THIS.controlSource)-1)
			cColumn = SUBSTRC(THIS.controlSource,AT_C(".",THIS.controlSource)+1)
			THIS.rowSourceType = 3
			THIS.rowSource = "SELECT DISTINCT " + cColumn + " FROM " + cAlias + ;
			  " INTO CURSOR c" + THIS.name
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS htmlcmd AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
	*</DefinedPropArrayMethod>

	Caption = "Command1"
	Height = 27
	Name = "htmlcmd"
	Width = 84
	
	PROCEDURE genhtml
		RETURN ""
	ENDPROC

ENDDEFINE

DEFINE CLASS htmlcombodist AS combodist OF "isapi.vcx" 		&& Distinct Values Combo
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
		*p: origfield		&& name of main DBF field to fill in
		*p: replfield		&& name of data source field in related table
	*</DefinedPropArrayMethod>

	Name = "htmlcombodist"
	origfield = 		&& name of main DBF field to fill in
	replfield = 		&& name of data source field in related table
	
	PROCEDURE genhtml
		LOCAL rv,mt
		DO CASE
		CASE this.RowSourceType = 3	&& sql statement
			rv = '<SELECT NAME="' + this.origfield + '">'
			SELECT ("c" + this.name)
			* add the current value to the list
			rv = rv + '<option value="' 
			mt = EVAL(thisform.dbfalias+"." + this.origfield)
			DO CASE
			CASE TYPE("mt") = 'C'
				m.rv = m.rv + m.mt
			CASE TYPE("mt") $ "YNIB"
				m.rv = m.rv + ALLTRIM(STR(m.mt))
			ENDCASE
			=SEEK(m.mt,LEFT(this.controlsource,AT('.',this.controlsource)-1))
			mt = SUBSTR(this.controlsource,AT('.',this.controlsource)+1)
			m.rv = m.rv +'">' + EVAL(this.controlsource)
			SCAN
				rv = rv + '<option value="' + EVAL(this.replfield) +'">' + ALLTRIM(EVAL(m.mt))
			ENDSCAN
			rv = rv + '</SELECT>'
		OTHERWISE
			rv = "don't know"
		ENDCASE
		RETURN m.rv
	ENDPROC

ENDDEFINE

DEFINE CLASS htmledit AS editbox 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
	*</DefinedPropArrayMethod>

	Height = 53
	Name = "htmledit"
	Width = 100

ENDDEFINE

DEFINE CLASS htmlgrid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
	*</DefinedPropArrayMethod>

	Height = 200
	Name = "htmlgrid"
	Width = 320
	
	PROCEDURE genhtml
		LOCAL ii,rv,mt,mAllFields,nFields
		mAllFields = this.columncount = -1
		rv = '<table border = "10">' + chr(13)
		SELECT (this.RecordSource)
		IF cursorgetprop("sourcetype") = 3	&& it's a table, not a view
			LOCATE
		ENDIF
		nFields = IIF(m.mAllFields, FCOUNT(),this.columncount)
		for ii = 1 to m.nFields
			IF m.mAllFields
				IF type("EVAL(FIELD(m.ii))") = 'G'
					loop	&& don't proc general fields
				ENDIF
				rv = rv + "<th>" + PROPER(field(m.ii)) + "</th>" + chr(13)
			ELSE
				rv = rv + "<th>" + this.columns[m.ii].header1.caption + "</th>" + chr(13)
			ENDIF
		endfor
		rv = rv + "</tr>" + chr(13)
		SCAN
			rv = rv + "<tr>"
			for ii = 1 TO m.nFields
				IF m.mAllFields
					IF type("EVAL(FIELD(m.ii))") = 'G'
						loop	&& don't proc general fields
					ENDIF
					mt = eval(field(m.ii))
				ELSE
					mt = eval(this.columns[m.ii].text1.controlsource)
				ENDIF
				do case
				case type("mt") = 'C'
					rv = rv + "<td>" + mt + "</td>"
				case type("mt") = 'T'
					rv = rv + "<td>" + TTOC(mt) + "</td>"
				case type("mt") $ 'NY'
					rv = rv + "<td align=right>" + str(mt,8) + "</td>"
				case type("mt") = 'D'
					rv = rv + "<td>" + DTOC(mt) + "</td>"
				endcase
				rv = rv + chr(13)
			endfor
			rv = rv + "</tr>"
		ENDSCAN
		rv = rv +"</table>"
		return rv
	ENDPROC

ENDDEFINE

DEFINE CLASS htmllabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
	*</DefinedPropArrayMethod>

	Caption = "Label1"
	Height = 17
	Name = "htmllabel"
	Width = 40
	
	PROCEDURE genhtml
		return this.caption
	ENDPROC

ENDDEFINE

DEFINE CLASS htmlphoto AS oleboundcontrol 
 	*< CLASSDATA: Baseclass="oleboundcontrol" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
	*</DefinedPropArrayMethod>

	Height = 100
	Name = "htmlphoto"
	Width = 100
	
	PROCEDURE genhtml
		return ""
	ENDPROC

ENDDEFINE

DEFINE CLASS htmltext AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
	*</DefinedPropArrayMethod>

	Height = 23
	Name = "htmltext"
	Width = 100
	
	PROCEDURE genhtml
		return ""
	ENDPROC

ENDDEFINE

DEFINE CLASS isapivcr AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: genhtml
		*p: fisreadonly		&& For HTML forms, disables the SAVE button
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 26
	Name = "isapivcr"
	Width = 421

	ADD OBJECT 'cmdFirst' AS commandbutton WITH ;
		Caption = "\<First", ;
		Height = 27, ;
		Left = 0, ;
		Name = "cmdFirst", ;
		Top = 0, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdLast' AS commandbutton WITH ;
		Caption = "\<Last", ;
		Height = 27, ;
		Left = 252, ;
		Name = "cmdLast", ;
		Top = 0, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNext' AS commandbutton WITH ;
		Caption = "\<Next", ;
		Height = 27, ;
		Left = 168, ;
		Name = "cmdNext", ;
		Top = 0, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrev' AS commandbutton WITH ;
		Caption = "\<Prev", ;
		Height = 27, ;
		Left = 84, ;
		Name = "cmdPrev", ;
		Top = 0, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS commandbutton WITH ;
		Caption = "\<Save", ;
		Height = 27, ;
		Left = 336, ;
		Name = "cmdSave", ;
		Top = 0, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE genhtml
		LOCAL m.rv
		m.rv = ""
		m.rv = m.rv + '<form method="POST" action = "/scripts/foxisapi.dll/'
		m.rv = m.rv + thisform.srvname + "." + ;
			thisform.name + '.skipit?' + thisform.cookie + '">' + CHR(13)
		IF this.cmdFirst.visible
			m.rv = m.rv + '<input type="submit" name="First" value="' + STRTRAN(this.cmdFirst.caption,"\<","") + '">' + CHR(13)
		ENDIF
		
		m.rv = m.rv + '<input type="submit" name="Prev" value="' + STRTRAN(this.cmdPrev.caption,"\<","") +'">' + CHR(13)
		
		m.rv = m.rv + '<input type="submit" name="Next" value="' + STRTRAN(this.cmdNext.caption,"\<","") + '">' + CHR(13)
		
		IF this.cmdLast.visible
			m.rv = m.rv + '<input type="submit" name="Last" value="' + STRTRAN(this.cmdLast.caption,"\<","") + '">' + CHR(13)
		ENDIF
		
		
		IF !this.fIsReadOnly
			m.rv=m.rv+'<input type = "submit" name = "Save" value="' + STRTRAN(this.cmdSave.caption,"\<","") + '">'
		ENDIF
		m.rv=m.rv+'<input name="Cookie" type="hidden" value = "' + thisform.Cookie + '"><p>' +CHR(13)
		RETURN m.rv
		
	ENDPROC

	PROCEDURE Init
		IF THIS.fIsReadOnly
			this.cmdSave.visible=.f.
		ENDIF
	ENDPROC

	PROCEDURE cmdFirst.Click
		thisform.doskip("&first=first")
		
	ENDPROC

	PROCEDURE cmdLast.Click
		thisform.doskip("&last=last")
		
	ENDPROC

	PROCEDURE cmdNext.Click
		thisform.doskip("&next=next")
		
	ENDPROC

	PROCEDURE cmdPrev.Click
		thisform.doskip("&prev=prev")
		
	ENDPROC

ENDDEFINE

DEFINE CLASS isform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: bigoutput		&& output many lines for testing. First parameter is number of bytes to output
		*m: cmd		&& DOS cmd or FOX expr
		*m: delay
		*m: dosave		&& save
		*m: doscmd
		*m: doskip
		*m: download		&& user can download a file
		*m: fixurl		&& Parse out illegal chars in URL
		*m: foxcmd
		*m: foxdocmd
		*m: genhtml
		*m: genhtmlstats
		*m: getcookie
		*m: getval		&& Parse URL parameters
		*m: htmlgrid
		*m: log
		*m: makecookie
		*m: mydocmd
		*m: myeval
		*m: reset		&& release all instances
		*m: showdbf		&& Given a DBF, show it as an HTML table
		*m: skipit		&& Next & Prev
		*m: startup		&& Called from HTML Browser to start HTML
		*m: visible_assign
		*m: writecookieinfo
		*p: cdatapath
		*p: cookie
		*p: cscriptdir		&& The directory where ISAPI.DLL is executing, which will be the Fox CurDir
		*p: cwebservername
		*p: cwwwpath
		*p: dbcname		&& Name of the main DBC
		*p: dbfalias		&& alias of main DBF
		*p: dbfname
		*p: errorhtml
		*p: fasp		&& flag indicates whether started from an Active Server Page or not
		*p: htmlstats
		*p: htmlusername		&& name of remote site that hit our web site
		*p: inifile		&& Name of the INI file passed from IIS
		*p: nreleaseserver		&& If >0, will release server after each OLE Public call. If 0, will cache server
		*p: origdir		&& the saved value of the current dir
		*p: origpath		&& saved path
		*p: srvname		&& project name
	*</DefinedPropArrayMethod>

	PROTECTED AddObject,AddProperty,AlwaysOnTop,AutoCenter,BackColor,BorderStyle,Box,BufferMode,Circle,Click,ClipControls,CloneObject,Closable,Cls,ColorSource,Comment,ContinuousScroll,ControlBox,cscriptdir,CurrentX,CurrentY,DataSession,DataSessionId,dbcname,dbfalias,dbfname,DblClick,DefOleLCID,Desktop,DragDrop,DragOver,Draw,DrawMode,DrawStyle,DrawWidth,Error,errorhtml,FillColor,FillStyle,FontBold,FontCondense,FontExtend,FontItalic,FontName,FontOutline,FontShadow,FontSize,FontStrikethru,FontUnderline,ForeColor,GotFocus,HalfHeightCaption,HelpContextID,HScrollSmallChange,htmlstats,htmlusername,Icon,inifile,KeyPress,KeyPreview,Line,LockScreen,LostFocus,MacDesktop,MaxButton,MaxHeight,MaxLeft,MaxTop,MaxWidth,MDIForm,MiddleClick,MinButton,MinHeight,MinWidth,MouseDown,MouseIcon,MouseMove,MousePointer,MouseUp,MouseWheel,Movable,Move,Moved,NewObject,nreleaseserver,OLECompleteDrag,OLEDrag,OLEDragDrop,OLEDragMode,OLEDragOver,OLEDragPicture,OLEDropEffects,OLEDropHasData,OLEDropMode,OLEGiveFeedback,OLESetData,OLEStartDrag,origdir,origpath,Paint,Picture,Point,Print,PSet,QueryUnload,ReadExpression,ReadMethod,Refresh,ReleaseType,RemoveObject,ResetToDefault,Resize,RightClick,RightToLeft,SaveAs,SaveAsClass,ScaleMode,ScrollBars,Scrolled,SetAll,SetViewPort,ShowTips,ShowWhatsThis,ShowWindow,SizeBox,TabIndex,TabStop,Tag,TextHeight,TextWidth,TitleBar,ViewPortHeight,ViewPortLeft,ViewPortTop,ViewPortWidth,VScrollSmallChange,WhatsThisButton,WhatsThisHelp,WhatsThisHelpID,WhatsThisMode,WindowState,WindowType,WriteExpression,WriteMethod,ZoomBox,ZOrder
	Caption = "ISAPI"
	cdatapath = 
	cookie = 
	cscriptdir = 		&& The directory where ISAPI.DLL is executing, which will be the Fox CurDir
	cwebservername = 
	cwwwpath = 
	DataSession = 2
	dbcname = 		&& Name of the main DBC
	dbfalias = 		&& alias of main DBF
	dbfname = 
	DoCreate = .T.
	errorhtml = 
	Height = 121
	htmlstats = 
	htmlusername = 		&& name of remote site that hit our web site
	Left = 0
	Name = "isform"
	nreleaseserver = 0		&& If >0, will release server after each OLE Public call. If 0, will cache server
	origdir = 		&& the saved value of the current dir
	origpath = 		&& saved path
	ShowWindow = 2
	srvname = "foxis"		&& project name
	Top = 0
	Width = 199
	
	PROCEDURE bigoutput		&& output many lines for testing. First parameter is number of bytes to output
		LPARAMETERS p1,p2,pDisp
		pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
		LOCAL m.rv
		this.inifile = m.p2
		SELECT counter
		REPLACE counter WITH counter + 1
		thisform.genhtmlstats(m.p1)
		thisform.log("BigOutput" + m.p1)
		LOCAL nBytes
		nBytes = VAL(m.p1)
		m.rv = "HTTP/1.0 200 OK" + CHR(13)+CHR(10)
		m.rv = m.rv + "Content-Type: text/html" + CHR(13)+CHR(10)
		m.rv = m.rv + "Expires: Sunday 15-May-94 14:00:01 GMT" + CHR(13)+CHR(10) + CHR(13)+CHR(10)
		m.rv = m.rv + "<HTML>" + CHR(13)+CHR(10) + CHR(13)+CHR(10)
		m.rv = m.rv + '<font size=4 face="Lucida Console">'
		m.rv = m.rv + "<h1> BigOutput</h1><body bgcolor = 00FF50><pre>"
		m.rv = m.rv + STR(m.nBytes,10)  + CHR(13)
		
		FOR i = 1 to m.nBytes/100
			m.rv = m.rv + STR(i*100,8) + " " + REPL("1234567890",9)+ CHR(13)
		ENDFOR
		m.rv = m.rv+ thisform.htmlstats
		m.rv = m.rv + "</body></html>"
		thisform.htmlstats = ""
		RETURN m.rv 
	ENDPROC

	PROCEDURE cmd		&& DOS cmd or FOX expr
		LPARAMETERS p1,p2,pDisp
		LOCAL cmd,rv,lcTmpFile
		this.FixURL(@m.p1)
		thisform.inifile = m.p2
		*COPY FILE (p2) TO c:\myini.txt
		thisform.log("Cmd: " + m.p1)
		*Execute a DOS command or evaluate a Fox expression
		thisform.genhtmlstats("CMD: " +m.p1)
		m.cmd=SUBSTR(m.p1,AT('=',m.p1)+1)
		SELECT 300	&& allow a single work area for all commands
		DO CASE
		CASE !EMPTY(m.cmd)
			DO CASE
			CASE "RESET"$upper(m.p1)
				* Reset Command from web browser, execute on server.
				* <form action = "/scripts/foxisapi.dll/foxis.employee.cmd">
				* <input name="Cmd" value = "Reset"><input type="submit" value="Dos Command"></form>
				* Very much like the DOS cmd below, but if it's "Reset", then 
				* it will release all instances of the server
				m.p2 = "Release all instances"
			CASE "FOXCMD"$upper(m.p1) OR "FOXDOCMD"$UPPER(m.p1)
				pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
				* Evaluate a Fox expression passed from the web browser.
				* <form action = 
				* "/scripts/foxisapi.dll/foxis.employee.cmd?FOXCMD">
				* <input name="Cmd"><input type="submit" 
				* value="Fox Expression"> like "today is "+ cdow(date()) or 45 * 3 or SYS(2004)</form>		
				IF "FOXDOCMD"$UPPER(m.p1)
					&cmd
					m.p2=""
				ELSE
					m.p2 = EVAL(m.cmd)
					DO CASE
					CASE TYPE("m.p2") = 'C'
						IF UPPER(m.p2) = "VISIBLE"
							_vfp.visible = ! _vfp.visible
							
							m.p2 = "toggled visible"
						ENDIF
					CASE TYPE("m.p2") $ 'NY'
						IF TYPE("m.p2") = 'Y'
							m.rv = '$'
						ELSE 
							m.rv = ""
						ENDIF
						IF INT(m.p2) # m.p2
							m.p2 = m.rv + STR(m.p2,15,3)
						ELSE
							m.p2 = m.rv + STR(m.p2)
						ENDIF
					CASE TYPE("m.p2") = 'D'
						m.p2 = DTOC(m.p2)
					CASE TYPE("m.p2") = 'T'
						m.p2 = TTOC(m.p2)
					CASE TYPE("m.p2") = 'L'
						m.p2 = IIF(m.p2,".T.",".F.")
					OTHERWISE
						m.p2="unknown type"
					ENDCASE
				ENDIF
			OTHERWISE
				pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
				* Dos Command from web browser, execute on server.
				* <form action = "/scripts/foxisapi.dll/foxis.employee.cmd">
				* <input name="Cmd"><input type="submit" value="Dos Command">		
				creat curs temp (dat m)
				append blank
				m.cmd = ALLTRIM(UPPER(m.cmd))
				IF m.cmd = "DEL" OR m.cmd="FORMAT" OR m.cmd ="ERASE"
					REPLACE dat WITH "You do not have rights"
				ELSE
					lcTmpFile = ADDBS(SYS(2023))+SYS(2015)+".txt"
					! &cmd >&lcTmpFile.
					append memo dat from (lcTmpFile)
					DELETE FILE (lcTmpFile)
				ENDIF
				p2 = "<hr><p><pre>"+temp.dat+"<hr><p></pre>"
				use in temp
			ENDCASE
		OTHERWISE
			p2 = "No command given"			
		ENDCASE
		p2 = STRTRAN(m.p2,"<DIR>","(DIR)")
		p2 = left(m.p2,3500)
		rv = THIS.GenHTML("CMD")
		DO CASE
		CASE "FOXCMD"$m.p1
			rv = strtran(m.rv,"%CMDTYPE%","Fox Expression")
		CASE "FOXDOCMD"$m.p1
			rv = strtran(m.rv,"%CMDTYPE%","FOX Command")
		OTHERWISE
			rv = strtran(m.rv,"%CMDTYPE%","DOS Command")
		ENDCASE
		rv = strtran(m.rv,"%COMMAND%",m.cmd)
		rv = strtran(m.rv,"%RESULTS%",m.p2)
		RETURN m.rv
		
	ENDPROC

	PROCEDURE delay
		LPARAMETERS p1,p2,pDisp
		pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
		local m.rv,m.stop
		this.FixURL(@m.p1)
		thisform.inifile = m.p2
		thisform.log("Delay: " + m.p1)
		thisform.genhtmlstats("Delay: " +m.p1)
		DECLARE INTEGER Sleep IN win32api Integer
		sleep(VAL(m.p1)*1000)
		m.rv = "HTTP/1.0 200 OK" + CHR(13)+CHR(10)
		m.rv = m.rv + "Content-Type: text/html" + CHR(13)+CHR(10)
		m.rv = m.rv + "Expires: Sunday 15-May-94 14:00:01 GMT" + CHR(13)+CHR(10) + CHR(13)+CHR(10)
		m.rv = m.rv + "<HTML>" + CHR(13)+CHR(10) + CHR(13)+CHR(10)
		m.rv = m.rv + '<font size=4 face="Lucida Console">'
		m.rv = m.rv + "<h1> OLE Server Delay</h1><body bgcolor = 00FF50><pre>"
		m.rv = m.rv + m.p1+"<p>" + time() + CHR(13)
		IF !EMPTY(GETENV("computername"))
			m.rv = m.rv + m.p1+"<p>Machine name " + GETENV("computername")+ CHR(13)
		ENDIF
		m.rv = m.rv + "<p>Thread ID =" + RIGHT(TRANS(_vfp.ThreadId,"@0"),5)+ CHR(13)
		m.rv = m.rv + "</body></html>"
		return m.rv
	ENDPROC

	PROCEDURE Destroy
		IF !EMPTY(SET("LIBRARY")) AND VAL(FoxtoolVer()) >= 5.01
			=_WSockCleanup()
		ENDIF
		thisform.LOG("Destroy")
		IF _VFP.Startmode=0 AND !EMPTY(this.origdir)
			cd (this.origdir)
			SET PATH TO (this.origpath)
		ENDIF
		CLEAR EVENTS
		IF _VFP.StartMode = 0	&& not OLE server
			IF VERSION(2) = 0	&& if runtime
				QUIT
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE dosave		&& save
		LPARAMETERS m.p1
		LOCAL m.tt,m.tf,m.tv,m.ctype
		*This routine is called from the skipit method
		SELECT (thisform.dbfalias)
		thisform.log("DoSave "+m.p1)
		DO WHILE .t.
			tt = AT("=",m.p1)
			IF tt = 0
				exit
			ENDIF
			tf = ALLTRIM(LEFT(m.p1,m.tt - 1))
			m.tv = ALLTRIM(SUBSTR(m.p1,tt+1))
			m.tt = AT("&",m.tv)
			IF m.tt > 0
				m.p1 = SUBSTR(m.tv,m.tt +1)
				m.tv = ALLTRIM(LEFT(m.tv,m.tt-1))
			ELSE
				m.p1 = ""
			ENDIF
			IF m.tf = "&"
				m.tf = ALLTRIM(SUBSTR(m.tf,2))
			ENDIF
			m.tf = STRTRAN(m.tf," ","_")
			m.cType = TYPE(this.dbfalias+'.'+m.tf)
			* if it's a remote view and it's a keyfield
			if CURSORGETPROP("sourcetype",this.dbfalias) = 2 AND ;
				dbgetprop(this.dbfalias+'.'+m.tf,"field","keyfield")
				loop
			endif
			do case
			case m.cType = 'C'
				REPLACE (this.dbfalias+'.'+m.tf) WITH (m.tv)
			case m.cType = 'N'
				REPLACE (this.dbfalias+'.'+m.tf) WITH (VAL(m.tv))
			endcase
		ENDDO
		flush
		
	ENDPROC

	PROCEDURE doscmd
		LPARAMETERS p1,p2,pDisp
		RETURN THIS.cmd(@p1,p2,@pDisp)
	ENDPROC

	PROCEDURE doskip
		LPARAMETERS m.p1
		*This routine is called by the SkipIt Method as well as the ISAPI VCR class.
		LOCAL mr
		SELECT (this.dbfalias)
		*thisform.visible=.t.	&& invisible forms won't have values refreshed
		mr = RECNO(this.DBFALIAS)
		DO CASE
		CASE ATC("prev=prev",m.p1)>0
			IF USED("stats")
				REPLACE stats.logpath WITH stats.logpath + "Prev"
			ENDIF
			IF !BOF(this.DBFALIAS)
				skip -1 in (THIS.DBFALIAS)
				IF BOF(this.DBFALIAS)
					GO m.mr IN (this.DBFALIAS)
				ENDIF
			ENDIF
		CASE ATC("next=next",m.p1)>0
			IF USED("stats")
				REPLACE stats.logpath WITH stats.logpath + "Next"
			ENDIF
			IF !EOF(this.DBFALIAS)
				skip in (THIS.DBFALIAS)
				IF EOF(this.DBFALIAS)
					GO m.mr IN (this.DBFALIAS)
				ENDIF
			ENDIF
		CASE ATC("first=first",m.p1)>0
			IF USED("stats")
				REPLACE stats.logpath WITH stats.logpath + "First"
			ENDIF
			LOCATE
		CASE ATC("last=last",m.p1)>0
			IF USED("stats")
				REPLACE stats.logpath WITH stats.logpath + "Last"
			ENDIF
			GO BOTTOM IN (this.dbfalias)
		ENDCASE
		THISFORM.REFRESH	&& GenHTML reads the controls, so they must be refreshed
		
	ENDPROC

	PROCEDURE download		&& user can download a file
		LPARAMETERS p1,p2,pDisp
		*Gen HTML page that allows user to download a file
		pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
		LOCAL m.rv
		this.inifile = m.p2
		SELECT counter
		REPLACE counter WITH counter + 1
		thisform.genhtmlstats(m.p1)
		thisform.log("Download" + m.p1)
		m.rv = "HTTP/1.0 200 OK" + CHR(13)+CHR(10)
		m.rv = m.rv + "Content-Type: text/html" + CHR(13)+CHR(10)
		m.rv = m.rv + "Expires: Sunday 15-May-94 14:00:01 GMT" + CHR(13)+CHR(10) + CHR(13)+CHR(10)
		m.rv = m.rv + "<HTML>" + CHR(13)+CHR(10) + CHR(13)+CHR(10)
		m.rv = m.rv + '<font size=4 face="Lucida Console">'
		m.rv = m.rv + "<title> Download</title><body bgcolor = 00FF50><pre>"
		m.rv = m.rv + m.p1+CHR(13)
		LOCAL AA[1],nn
		nn=ADIR(aa,"..\wwwroot\"+m.p1)
		IF nn #1
			m.rv = m.rv + " not found"
		ELSE
			m.rv = m.rv + "Size      = " + ALLTRIM(STR(aa[2],10))+CHR(13)
			m.rv = m.rv + "File date = " + CDOW(aa[3]) + ", " + DTOC(aa[3]) + ' ' + aa[4]+CHR(13)
			m.rv = m.rv + '<a href = "HTTP://' + this.cWebServerName + ;
				'/' + m.p1 + '"> Get ' + m.p1 + '</a><p>'
		*	m.rv = m.rv +  '<a href="/default.htm"> Back to default home page</a><p>'
		
		ENDIF
		m.rv = m.rv+ thisform.htmlstats
		m.rv = m.rv + "</body></html>"
		thisform.htmlstats = ""
		RETURN m.rv 
	ENDPROC

	PROTECTED PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		* Error handling is critical in an OLE server, especially since it may be
		* running from a Service, such as Internet Information Server, and thus
		* won't have a desktop to show any UI.
		*Thus we should generate an HTML page that indicates an error occurred.
			LOCAL rv
			IF EMPTY(this.ErrorHTML)
				IF _vfp.startmode = 0
					SET STEP ON
				ELSE
					IF USED("html")
						SELECT html
						LOCATE FOR type = "ERROR"
						m.rv = html.html
						rv = strtran(m.rv,"%METHOD%",m.cMethod)
						rv = strtran(m.rv,"%ERRORNO%",STR(m.nError,4))
						rv = strtran(m.rv,"%ERRORMSG%",Message())
						rv = strtran(m.rv,"%LINENO%",this.name + " " +STR(m.nLine,4))
					ELSE
						m.rv = m.cMethod + " Err #: " + STR(m.nError,4) + ;
							Message() + this.name + STR(m.nLine,4)
					ENDIF
					thisform.log("Error occurred: " + m.rv)
					THIS.ErrorHTML = m.rv
				ENDIF
			ENDIF
		RETURN
		
	ENDPROC

	PROTECTED PROCEDURE fixurl		&& Parse out illegal chars in URL
		LPARAMETERS  m.cStr
		LOCAL m.n1,m.rv
		m.cstr=STRTRAN(m.cstr,"+"," ")
		m.rv = ""
		DO WHILE .T.
			IF "%" $ m.cStr
				m.n1 = AT('%',m.cStr)
				IF m.n1 > LEN(m.cStr) - 2
					m.rv = m.rv + m.cStr
					EXIT
				ENDIF
				* IF !ISDIGIT(SUBSTR(m.cStr,m.n1+1))
				* Update for DBCS support
				IF atc(SUBSTR(m.cStr,m.n1+1,1),"0123456789ABCDEF")=0 && not hex digit
					m.rv = m.rv + LEFT(m.cStr,m.n1)
					m.cStr = SUBSTR(m.cStr,m.n1+1)
					LOOP
				ENDIF
				m.rv = m.rv + LEFT(m.cStr,m.n1-1) + ;
					CHR(EVAL("0x"+SUBSTR(m.cStr,m.n1+1,2)))
				IF LEN(m.cStr) > m.n1 + 2
					m.cStr = SUBSTR(m.cStr,m.n1+3)
				ELSE
					EXIT
				ENDIF
			ELSE
				m.rv = m.rv + m.cStr
				EXIT
			ENDIF
		ENDDO
		m.cStr = m.rv
		RETURN m.rv
		
	ENDPROC

	PROCEDURE foxcmd
		LPARAMETERS p1,p2,pDisp
		IF ATC("FOXCMD",m.p1)=0
			p1 = "FOXCMD:"+m.p1
		ENDIF
		RETURN THIS.cmd(@p1,p2,@pDisp)
	ENDPROC

	PROCEDURE foxdocmd
		LPARAMETERS p1,p2,pDisp
		IF ATC("FOXDOCMD",m.p1)=0
			p1 = "FOXDOCMD:"+m.p1
		ENDIF
		RETURN THIS.cmd(@p1,p2,@pDisp)
	ENDPROC

	PROTECTED PROCEDURE genhtml
		LPARAMETERS m.Mode
		*This routine does all the work of dynamic HTML Generation.
		LOCAL tmp,oRef,fIsReadOnly
		fIsReadOnly = .f.
		LOCAL rv,nMemCount,aa[1],m.i,m.j,oObj,oObjT,cc,cTry1,fDidTable,m.t
		fDidTable = .f.
		* Keep count of the # of web hits
		
		SELECT counter
		REPLACE counter.counter WITH counter.counter + 1
		IF !EMPTY(THIS.ErrorHTML) OR m.mode = "ERROR"
			* if an error occurred, the error method would fill in an error page
			m.rv = this.ErrorHtml
			this.ErrorHtml = ""
			IF EMPTY(m.rv)
				* hope that someone can see this msg
				IF _vfp.startmode>0
					thisform.log("A fatal error occurred  " + Message() + m.rv)
				ELSE
					SET STEP ON
					RETRY
				ENDIF
			ENDIF
			m.rv = m.rv + thisform.Genhtmlstats("Error "+message())
			thisform.htmlstats=""
			RETURN m.rv
		ENDIF
		IF m.mode != "FORM"
			=SEEK(m.mode,"html")
			rv = html.html +thisform.Genhtmlstats()
			THISFORM.htmlStats=""
		    RETURN m.rv
		ENDIF
		oRef =thisform
			m.tmp=sys(2015)+".tmp"
			SET TEXTMERGE TO (m.tmp)
			SET TEXTMERGE ON NOSHOW
		IF !thisform.fASP	&& Active Server Pages don't require HTTP header
			\\HTTP/1.0 200 OK
			\Content-Type: text/html
			* The next line tells browsers not to refresh the page from the local cache,
			* but to re-request the page from the server. Note the date just needs to be
			* a date in the past.
			\Expires: Sunday 15-May-94 14:00:01 GMT
			\
			\<HTML>
		ENDIF
		\
		\<!--This HTML Page was generated by a Visual Foxpro OLE Automation server-->
		\
		* You can force the client to refresh every n seconds:
		*<META HTTP-EQUIV="Refresh" CONTENT=20>
		
		\<font size=4 face="Lucida Console">
			nMemCount=AMEMBERS(aa,m.oref,2)
		* Now sort the members in top.bottom, left.right order
		*This is necessary because Fox controls are located by x,y pixels, whereas
		* HTML is stream based. HTML2D tags can be used here when that becomes more prevalent.
			FOR m.i = 1 TO m.nMemCount
				FOR m.j = m.i+1 TO m.nMemCount
					oref1 = eval("oref."+aa[m.i])
					oref2 = eval("oref."+aa[m.j])
					DO CASE
					CASE oref1.top > oref2.top
						m.t = aa[m.i]
						aa[m.i] = aa[m.j]
						aa[m.j] = m.t
					CASE oref1.top = oref2.top
						IF oref1.left > oref2.left
							m.t = aa[m.i]
							aa[m.i] = aa[m.j]
							aa[m.j] = m.t
						ENDIF
					ENDCASE
				ENDFOR		
			ENDFOR
			oref1=.null.
			oref2=.null.
			=rlock(thisform.dbfAlias)
			\<title> <<thisform.caption>></title>
			LOCAL mcolor
			*Fox color is BBGGRR, HTML is RRGGBB
			m.mcolor = SUBSTR(TRANSFORM(thisform.backcolor,"@0"),5)
			m.mcolor = SUBSTR(m.mcolor,5,2) + SUBSTR(m.mcolor,3,2) + LEFT(m.mcolor,2)
			\<body bgcolor = <<m.mcolor>>>
			FOR m.i = 1 TO m.nMemCount
				oObj = aa[m.i]
				oObj = oRef.&oObj
				*if it has an enabled prop and it's !enabled, ignore it
				IF type('pemstatus(oObj,"enabled",3)')  = 'C' AND !oObj.enabled
					LOOP
				ENDIF
				IF type('pemstatus(oObj,"visible",3)')  = 'C' AND !oObj.visible
					LOOP
				ENDIF
				* if the object has it's own genhtml code, invoke it.
				IF type('pemstatus(oObj,"genhtml",4)')  # 'U'
					* if were doing the grid at the bottom of the fields for 1-many
					IF fDidTable AND oObj.baseclass = "Grid"
						\</TABLE>
					ENDIF
					\<<oObj.genhtml()>>
					IF oObj.class = "Isapivcr"
						\<TABLE Border = 0>
						fDidTable = .t.
						fIsReadonly = oObj.fIsReadOnly
					ENDIF
					LOOP
				ENDIF
				DO CASE
				CASE oObj.class = "Label"
					*find the associated textbox
					cc = UPPER(oObj.name)
					IF LEFT(cc,3) = "LBL"
						cc = SUBSTR(m.cc,4)
					ELSE
						cc = SUBSTR(m.cc,6)
					ENDIF
					DO CASE
					CASE TYPE("oRef.Text" + m.cc) = 'O'
						cc = "Text" + m.cc
						oObjT = oRef.&cc
					CASE TYPE("oRef.Txt" + m.cc) = 'O'
						cc = "Txt" + m.cc
						oObjT = oRef.&cc
					OTHERWISE
						LOOP
					ENDCASE
					m.cc = EVAL(oObjt.controlsource)
					IF TYPE("m.cc") = 'C'
						m.cc = ALLTRIM(m.cc)
					ENDIF
					IF !m.fDidTable
						\<TABLE Border = 0>
						fDidTable = .t.
					ENDIF
					\<TR>
					\ <TD colspan=50 align = right><<oObj.caption>> </TD>
					\ <TD colspan=60>
					IF fIsReadOnly AND AT_C("URL",oObj.caption) > 0 AND !EMPTY(m.cc)
						\<a href ="<<m.cc>>"><<m.cc>></a></TD>
					ELSE
						\<input name = "<<oObj.caption>>" size = "<<LTRIM(STR(oObjt.width / 8,4,0))>>" value = "<<m.cc>>"></TD>
					ENDIF
					\ </TR>
				ENDCASE
				\<P>
			ENDFOR
			IF fDidTable
				\</TABLE>
			ENDIF
			
			UNLOCK ALL
			\<p><p><p>
			\
			\<<thisform.Genhtmlstats()>>
			THISFORM.htmlStats=""
			\</form>
			\</body>
		
			\</html>
			SET TEXTMERGE OFF
			SET TEXTMERGE TO
			CREATE CURSOR temp (mm memo)
			APPEND BLANK
			APPEND MEMO mm FROM (m.tmp)
			erase (m.tmp)	&& erase the temp file
			rv = temp.mm
			USE IN temp
			IF !EMPTY(this.ErrorHTML)
				RETURN this.ErrorHTML
			ENDIF
			RETURN m.rv
		
		#if .f.
		The INI file looks like this:
		[FOXISAPI]
		Request Method=GET
		Query String=
		Logical Path=/foxis.employee.startup
		Physical Path=d:\inetsrv\wwwroot\foxis.employee.startup
		FoxISAPI Version=FoxISAPI v1.0
		Request Protocol=HTTP/1.0
		Referer=/scripts/foxisapi.dll
		Server Software=Microsoft-Internet-Information-Server/1.0
		Server Name=127.0.0.1
		Server Port=80
		Remote Host=127.0.0.1
		Remote Address=127.0.0.1
		[All_HTTP]
		HTTP_ACCEPT=*/*, q=0.300,audio/x-aiff,audio/basic,image/jpeg,image/gif,text/plain,text/html
		HTTP_USER_AGENT=Mozilla/1.22 (compatible; MSIE 1.5; Windows NT)
		HTTP_CONNECTION=Keep-Alive
		HTTP_EXTENSION=Security/Digest
		[Accept]
		*/*=Yes
		q=0.300=Yes
		audio/x-aiff=Yes
		audio/basic=Yes
		image/jpeg=Yes
		image/gif=Yes
		text/plain=Yes
		text/html=Yes
		[SYSTEM]
		GMT Offset=-28800
		#endif
	ENDPROC

	PROTECTED PROCEDURE genhtmlstats
		LPARAMETERS mparm
		IF !EMPTY(thisform.HtmlStats)	&& stats already generated for this web hit
			RETURN thisform.htmlstats
		ENDIF
		IF FILE("webbeep.txt")
			messagebeep()	&& beep for each web hit
		ENDIF
		IF TYPE("mparm") # 'C'
			mparm = ""
		ENDIF
		LOCAL m.rv
			m.rv = '<font size=2 face="Lucida Console">'
			m.rv=m.rv+' This page generated by ' + version(1) + ' at ' + time()
			IF !EMPTY(this.inifile) AND TYPE("this.inifile") = 'C'
				SELECT stats
				m.rv=m.rv+"<pre>"+REPLICATE(CHR(13)+CHR(10),4)
				m.rv=m.rv+'# of web hits served by this server = ' + ALLTRIM(STR(counter.counter)) + CHR(13)+CHR(10)
		
				buf = space(500)
				nlen = GetPrivateProfileString("all_http","http_user_agent","",@buf,len(buf),this.IniFile)
				m.rv=m.rv+'User Agent = ' +LEFT(m.buf,m.nlen) + CHR(13)+CHR(10)
				INSERT INTO stats (webhit,UserAgent,cookie,processid, threadid,sys1016) VALUES ;
					 (datetime(),LEFT(m.buf,m.nlen),thisform.cookie,RIGHT(TRANS(_vfp.processid,"@0"),5), ;
					 RIGHT(TRANS(_vfp.threadid,"@0"),5), val(sys(1016)))
				
				buf = space(500)
				nlen = GetPrivateProfileString("FOXISAPI","Logical Path","",@buf,len(buf),this.IniFile)
				m.rv=m.rv+'Logical Path = ' + LEFT(m.buf,m.nlen) + CHR(13)+CHR(10)
				REPLACE stats.LogPath WITH LEFT(m.buf,m.nlen) + " :: " + mparm
				
				buf = space(500)
				nlen = GetPrivateProfileString("FOXISAPI","Remote Host","",@buf,len(buf),this.IniFile)
				m.buf = LEFT(m.buf,m.nlen)
				m.rv=m.rv+'Remote Host = ' + m.buf + CHR(13)+CHR(10)
				IF SEEK(m.buf,"statsaddr")	&& if we already have it,don't bother finding it
					m.rHost = statsaddr.RemHost
				ELSE
					IF !EMPTY(SET("LIBRARY")) AND VAL(FoxtoolVer()) >=5.01
						rhost = space(30)
						_WSockGetHostByAddr(m.buf,@rHost)	&& this can take a long time
					ELSE
						rhost = m.buf
					ENDIF
				ENDIF
				REPLACE stats.RemHost WITH rHost
				thisform.HTMLUserName = m.rHost
				buf = space(500)
				nlen = GetPrivateProfileString("FOXISAPI","Remote Address","",@buf,len(buf),this.IniFile)
				m.rv=m.rv+'Remote Address = ' + LEFT(m.buf,m.nlen) + CHR(13)+CHR(10)
				REPLACE stats.RemAddress WITH LEFT(m.buf,m.nlen)
				
				m.rv=m.rv+'ProcessId  = ' + stats.processid + "ThreadId "+stats.threadid + CHR(13)+CHR(10)
				m.rv = m.rv + '</pre>'
			ENDIF
			thisform.htmlstats = m.rv
		RETURN m.rv
	ENDPROC

	PROTECTED PROCEDURE getcookie
		LPARAMETERS cstr
		this.FixURL(@m.cStr)
		*Get the cookie value from either a parameter or a 
		*hidden input field
		IF "Cookie="$ m.cStr
			this.cookie=this.getval(m.cStr,"Cookie")
			m.cStr = STRTRAN(m.cStr,"&Cookie=")
			m.cStr = STRTRAN(m.cStr,"Cookie=")
		ELSE
			this.cookie= LEFT(m.cstr,LEN(this.MakeCookie()))
		ENDIF
		cstr= STRTRAN(m.cstr,this.cookie,"")
		IF !SEEK(this.cookie,"cookies")
			INSERT INTO cookies (cookie) VALUES ;
					(this.cookie)
		ELSE
			GOTO (cookies.rnum) IN (thisform.dbfAlias)
		ENDIF
		thisform.GenHtmlStats()
		return m.cstr
		
	ENDPROC

	PROTECTED PROCEDURE getval		&& Parse URL parameters
		LPARAMETERS cstr,cVal
		LOCAL n1,c2
		n1 = AT(m.cVal,m.cStr)
		IF n1 = 0
			return ""
		ENDIF
		c2 = ALLTRIM(SUBSTR(m.cStr,n1 + LEN(m.cVal)))
		IF LEFT(m.c2,1) = '='
			c2 = SUBSTR(m.c2,2)
		ENDIF
		IF "&"$c2
			RETURN ALLTRIM(LEFT(m.c2,AT('&',m.c2)-1))
		ELSE
			RETURN ALLTRIM(m.c2)
		ENDIF
		
	ENDPROC

	PROTECTED PROCEDURE htmlgrid
		LPARAMETERS oObj
		LOCAL m.i,m.j,m.cc
		SELECT (oObj.Recordsource)
		LOCATE	&& go to the top
		IF EOF()
			RETURN
		ENDIF
		\<TABLE BORDER = 10>
		FOR m.j = 1 TO oObj.columncount
			\<TH><<oObj.columns[m.j].header1.caption>></TH>
		ENDFOR
		SCAN
			\<TR>
			FOR m.j = 1 TO oObj.columncount
				cc=EVAL(oObj.columns[m.j].text1.controlsource)
				DO CASE
				CASE TYPE("CC") $ "YN"	&& numeric or currency
					cc =  "<TD ALIGN = RIGHT>" + STR(cc,8) + "</TD>"
				OTHERWISE
					cc = "<TD>" + m.cc + "</TD>"
				ENDCASE 
				\<<m.cc>>
			ENDFOR
			\</TR>
		ENDSCAN
		\</TABLE>
		
	ENDPROC

	PROCEDURE Init
		* This disables user interface commands. Comment out for testing.
		SYS(2335,0)
		
	ENDPROC

	PROCEDURE Load
		#DEFINE HKEY_LOCAL_MACHINE       BITSET(0,31)+2 &&   -2147483646  && BITSET(0,31)+2
		#DEFINE REGPATH_COMPUTERNAME	"SYSTEM\CurrentcontrolSet\control\ComputerName\Computername"
		#DEFINE REGPATH_VROOTS			"SYSTEM\CurrentControlSet\Services\W3SVC\Parameters\Virtual Roots"
		
		LOCAL oreg,cValue,nErr,aWWWPaths,lnPos,i,lcRegFile
		DIMENSION aWWWPaths[1]
		
		CLOSE DATA ALL
		SET TALK OFF
		SET SAFETY OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DECLARE INTEGER MessageBeep in win32api
		DECLARE INTEGER GetPrivateProfileString in win32api String,String,String,;
			  String @, integer,string
		
		if _vfp.startmode>1	&&  automation server
			this.cScriptdir = JUSTPATH(_vfp.application.servername)
			this.srvname = JUSTSTEM(_vfp.application.servername)
		ELSE
			this.origdir = SET("DEFAULT") + SYS(2003)
			this.origpath = SET("PATH")
		endif
		
		SET DEFAULT TO (this.cScriptDir)
		SET PATH TO (this.cDatapath)
		
		lcRegFile = "registry.prg"
		IF !FILE(lcRegFile)
			lcRegFile = HOME()+"samples\classes\registry.prg"
		ENDIF
		oreg = NewObject('registry',lcRegFile)
		cValue = ""
		nErr=oReg.GetRegKey("ComputerName",@cValue,REGPATH_COMPUTERNAME,HKEY_LOCAL_MACHINE)
		IF nErr # 0
			IF !EMPTY(GETENV("computername"))
				cValue = GETENV("computername")
			ELSE
				MessageBox("Error reading registry for Computername. "+prog())
				RETURN .f.	&&IIS not installed properly?
			ENDIF
		ENDIF
		this.cWebServerName = m.cValue
		
		cValue = ""
		nErr=oReg.EnumOptions(@aWWWPaths,REGPATH_VROOTS,HKEY_LOCAL_MACHINE,.F.)
		IF nErr=0
			FOR i = 1 TO ALEN(aWWWPaths,1)
				IF aWWWPaths[m.i,1]=="/"
					lnPos=ATC(",",aWWWPaths[m.i,2])
					THIS.cWWWPath=LEFT(aWWWPaths[m.i,2],IIF(lnPos=0,LEN(aWWWPaths[m.i,2]),lnPos-1))
					EXIT
				ENDIF
			ENDFOR
		ENDIF
		
		IF EMPTY(thisform.dbfalias)
			thisform.dbfalias=thisform.dbfname
		ENDIF
		IF EMPTY(thisform.dbfname)
			thisform.dbfname = thisform.caption
			thisform.dbfalias = thisform.caption
		ENDIF
		IF !FILE(thisform.dbfalias+".dbf")
			Messagebox("fatal error: can't find " + thisform.dbfalias + ".dbf")
			RETURN .f.
		ENDIF
		IF FILE(home()+"foxtools.fll")
			SET LIBRARY TO (home() + "foxtools")
		ENDIF
		LOCAL b1,b2,b3,b4,b5,b6
		STORE "" TO b1,b2,b3,b4,b5,b6
		thisform.log("Load " + thisform.name)
		IF !EMPTY(SET("LIBRARY")) AND VAL(FoxtoolVer()) >=5.01
			=_WSockStartup(1 * 256 + 1,@b1,@b2,@b3,@b4,@b5,@b6)
		ENDIF
		
		*Output to a log file what's happening. Call log many times when debugging
		* For debugging you can also do the following (make sure the OLE Server has rights as
		* the interactive user
		*this.application.visible=.t.	&&make the instance visible
		*list stat to t
		*modi comm t.txt nowait
		
		IF !EMPTY(this.dbcName)
			open DATABASE (this.dbcName)
		ENDIF
		IF !EMPTY(this.dbfname)
			USE (this.dbfname)  ALIAS (this.dbfAlias)
		ELSE
			SELECT (this.dbfalias)
		ENDIF
		if cursorgetprop("sourcetype") # 2	&& not remote view
			IF !EMPTY(tag(2))		&& if there's an index tag, use it (UPPER(last_name+first_name))
				SET ORDER TO 2
			ENDIF
			LOCATE
		endif
		USE html ORDER 1 ALIAS html IN 2
		SELECT 3
		* Create or use a Cookies table that has a unique ID for each client. As a web server
		* this app can be hit dozens of times by various clients, and we need to keep track of
		* user state. In this case, we only track the current record number for that user.
		* We could present the user with a Login screen, and use the username as a key for
		* the cookie.
		
		IF !FILE("cookies.dbf")
			* a table to store user state based on a cookie (timestamp)
			CREATE TABLE cookies free (cookie c(20), rnum i, extra c(10))	
			INDEX ON cookie TAG cookie
		ENDIF
		USE cookies alias cookies ORDER 1  && Reopen shared
		
		SELECT 4
		IF !FILE("counter.dbf")
			CREATE TABLE counter free (counter i)
			APPEND BLANK
		ENDIF
		USE counter  && Reopen shared
		
		SELECT 5
		IF FILE("stats.dbf")	&& see if there is already one of the right structure
			USE stats SHARED alias stats
			IF TYPE("threadid") = 'U'	&& old style: we need to add fields
				USE
				ERASE statsbak.*
				RENAME stats.dbf TO statsbak.dbf
				RENAME stats.fpt TO statsbak.fpt
			ENDIF
			USE
		ENDIF
		IF !FILE("stats.dbf")
			CREATE TABLE stats free (webhit t,userAgent m,RemHost c(16),RemAddress C(16),LogPath m,cookie c(20), processid C(7), threadid C(7), sys1016 i)
			INDEX ON remaddress TAG remaddress
			IF FILE("statsbak.dbf")
				APPEND FROM statsbak
			ENDIF
			USE
			ERASE statsbak.*
		ENDIF
		USE stats SHARED alias stats
		USE stats AGAIN IN 0 ORDER 1 ALIAS statsAddr
		
	ENDPROC

	PROTECTED PROCEDURE log
		LPARAMETERS m.cStr
		
		*This will just output to a log file for easier debugging
		IF !FILE(this.cScriptdir+"\foxisapi.log")
		*	if there isn't a file, don't add to it...In multiinstance mode, we don't want collisions
			RETURN
		ENDIF
		m.cStr = dtoc(date()) + ' ' + time()+sys(1016)+' '+ALLTRIM(thisform.name) +;
			' ' + PADR(thisform.htmlusername,10) + ;
			'  ' + padr(thisform.cookie ,16)+m.cStr + CHR(13)
		*Strtofile will not cause an error if it fails (due to file access denied)
		strtofile(m.cStr,this.cScriptdir+"\foxisapi.log",.t.)
		
	ENDPROC

	PROTECTED PROCEDURE makecookie
		RETURN PADR(STRTRAN(STRTRAN(time()+TRANS(_vfp.threadid)+padl(seconds(),10,'0'),":",""),".",""), 15)
		
	ENDPROC

	PROCEDURE mydocmd
		LPARAMETERS p1
		&p1
		
	ENDPROC

	PROCEDURE myeval
		LPARAMETERS p1
		RETURN &p1
		
	ENDPROC

	PROCEDURE reset		&& release all instances
		LPARAMETERS p1,p2,pDisp
		LOCAL m.cmd,rv
		this.FixURL(@m.p1)
		thisform.log("Reset: " + m.p1)
		m.cmd=SUBSTR(m.p1,AT('=',m.p1)+1)
		* not changing pDisp automatically releases this instance
		m.p2 = "Release all instances"
		p2 = left(m.p2,3500)
		rv = THIS.GenHTML("CMD")
		rv = strtran(m.rv,"%COMMAND%",m.cmd)
		rv = strtran(m.rv,"%CMDTYPE%",m.cmd)
		rv = strtran(m.rv,"%RESULTS%",m.p2)
		RETURN m.rv
		
	ENDPROC

	PROCEDURE Show
		LPARAMETERS nStyle
		* This enables user interface commands. Comment out for testing.
		SYS(2335,1)
		
	ENDPROC

	PROCEDURE showdbf		&& Given a DBF, show it as an HTML table
		LPARAMETERS p1,p2,pDisp
		LOCAL m.rv,oForm
		*Show a DBF in HTML format
		pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
		this.inifile = m.p2
		thisform.GenHtmlStats(m.p1)
		thisform.log(program() + m.p1)
		IF !USED(m.p1)
			USE (m.p1) order (tag(1)) IN 0 SHARED
		ENDIF
		SELECT (m.p1)
		LOCATE
		
		LOCAL ii,rv,mt,mAllFields,nFields
		m.rv="HTTP/1.0 200 OK" + CHR(13) + CHR(10)
		m.rv=m.rv+"Content-Type: text/html" + CHR(13) + CHR(10)
		m.rv=m.rv+"Expires: Sunday 15-May-94 14:00:01 GMT" + CHR(13) + CHR(10) + CHR(13) + CHR(10) + "<html><body bgcolor = ffff00>" + CHR(13) + CHR(10)
		* m.rv = m.rv +  '<a href="/default.htm"> Back to default home page</a><p>'
		rv = m.rv+'<table border = "10">' + chr(13)
		for ii = 1 to FCOUNT()
			IF type("EVAL(FIELD(m.ii))") = 'G'
				loop	&& don't proc general fields
			ENDIF
			rv = rv + "<th>" + PROPER(field(m.ii)) + "</th>" + chr(13)
		ENDFOR
		rv = rv + "</tr>" + chr(13)
		LOCAL icnt
		icnt = 0
		SCAN WHILE m.icnt < 200	&& limit to 200 records
			icnt = m.icnt + 1
			rv = rv + "<tr>"
			for ii = 1 TO FCOUNT()
				IF type("EVAL(FIELD(m.ii))") = 'G'
					loop	&& don't proc general fields
				ENDIF
				mt = eval(field(m.ii))
				do case
				case type("mt") = 'C'
					rv = rv + "<td>" + mt + "</td>"
				case type("mt") = 'T'
					rv = rv + "<td>" + TTOC(mt) + "</td>"
				case type("mt") $ 'NY'
					rv = rv + "<td align=right>" + str(mt,8) + "</td>"
				case type("mt") = 'D'
					rv = rv + "<td>" + DTOC(mt) + "</td>"
				endcase
				rv = rv + chr(13)
			endfor
			rv = rv + "</tr>"
			
		ENDSCAN
		m.rv = m.rv +"</table>" + THISFORM.HTMLStats
		m.rv = m.rv + "</body></html>"
		THISFORM.HTMLStats = ""
		return m.rv 
		
	ENDPROC

	PROCEDURE skipit		&& Next & Prev
		LPARAMETERS p1,p2,pDisp
		*Skip forward or back in the main table. IsapiVCR buttons
		pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
		this.inifile = m.p2
		this.GetCookie(@m.p1)
		thisform.log("Skipit " + m.p1)
		IF ATC("save=save",m.p1)>0
			IF USED("stats")
				REPLACE stats.logpath WITH stats.logpath + "Save"
			ENDIF
			this.dosave(m.p1)	
		ELSE
			this.doSkip(m.p1)
		ENDIF
		this.writeCookieInfo()
		return THIS.GenHTML("FORM")
		
	ENDPROC

	PROCEDURE startup		&& Called from HTML Browser to start HTML
		LPARAMETERS p1,p2,pDisp
		thisform.Errorhtml = "" &&reset error property
		IF TYPE("m.p1") = 'C' AND m.p1= "ASP Cookie"
			thisform.fASP = .t.	&& started from an Active Server Framework page
			* use the ASP generated cookie
			thisform.cookie = SUBSTRC(m.p1,RATC("=",m.p1)+1)
		ELSE
			thisform.fASP = .f.	&&started from an HTML page
			pDisp = thisform.nReleaseServer	&& signal the client to not release this instance
			thisform.inifile = m.p2
			thisform.cookie = this.MakeCOOKIE()
		ENDIF
		thisform.GenHtmlStats(m.p1)
		thisform.log("startup" + IIF(type("m.p1") = 'C',m.p1,""))
		SELECT (thisform.dbfalias)
		LOCATE
		this.writeCookieInfo
		return this.GenHTML("FORM")
		
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS vNewVal
		IF (VARTYPE(vNewVal) = 'L' and vNewVal) OR (VARTYPE(vNewVal) = 'N' and vNewVal > 0)
			* Enable user interface
			SYS(2335,1)
		ENDIF
		THIS.Visible = m.vNewVal
		
	ENDPROC

	PROTECTED PROCEDURE writecookieinfo
		IF !EMPTY(this.cookie)
			SELECT cookies
			SEEK this.cookie
			IF !FOUND()
				INSERT INTO cookies (cookie) VALUES ;
					(this.cookie)
			ENDIF
			REPLACE rnum WITH RECNO(thisform.dbfAlias)
		ENDIF
		
	ENDPROC

ENDDEFINE
