*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="northwind.dbc" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*

<DATABASE>
	<Name>NORTHWIND</Name>
	<Comment></Comment>
	<Version>11</Version>
	<DBCEvents>.T.</DBCEvents>
	<DBCEventFilename></DBCEventFilename>


	<TABLES>

		<TABLE>
			<Name>CATEGORIES</Name>
			<Comment></Comment>
			<Path>categories.dbf</Path>
			<DeleteTrigger>__ri_delete_categories()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_categories()</UpdateTrigger>
			<PrimaryKey>categoryid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



		</TABLE>

		<TABLE>
			<Name>CUSTOMERCUSTOMERDEMO</Name>
			<Comment></Comment>
			<Path>customercustomerdemo.dbf</Path>
			<DeleteTrigger></DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger></UpdateTrigger>
			<PrimaryKey></PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 2</Name>
					<ChildTable>CUSTOMERCUSTOMERDEMO</ChildTable>
					<ParentTable>CUSTOMERDEMOGRAPHICS</ParentTable>
					<ChildIndex>CUSTTYPEID</ChildIndex>
					<ParentIndex>CUSTTYPEID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 4</Name>
					<ChildTable>CUSTOMERCUSTOMERDEMO</ChildTable>
					<ParentTable>CUSTOMERS</ParentTable>
					<ChildIndex>CUSTOMERID</ChildIndex>
					<ParentIndex>CUSTOMERID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>CUSTOMERDEMOGRAPHICS</Name>
			<Comment></Comment>
			<Path>customerdemographics.dbf</Path>
			<DeleteTrigger>__ri_delete_customerdemographics()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_customerdemographics()</UpdateTrigger>
			<PrimaryKey>custtypeid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



		</TABLE>

		<TABLE>
			<Name>CUSTOMERS</Name>
			<Comment></Comment>
			<Path>customers.dbf</Path>
			<DeleteTrigger>__ri_delete_customers()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_customers()</UpdateTrigger>
			<PrimaryKey>customerid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



		</TABLE>

		<TABLE>
			<Name>EMPLOYEES</Name>
			<Comment></Comment>
			<Path>employees.dbf</Path>
			<DeleteTrigger>__ri_delete_employees()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_employees()</UpdateTrigger>
			<PrimaryKey>employeeid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 5</Name>
					<ChildTable>EMPLOYEES</ChildTable>
					<ParentTable>EMPLOYEES</ParentTable>
					<ChildIndex>REPORTSTO</ChildIndex>
					<ParentIndex>EMPLOYEEID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>EMPLOYEETERRITORIES</Name>
			<Comment></Comment>
			<Path>employeeterritories.dbf</Path>
			<DeleteTrigger></DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger></UpdateTrigger>
			<PrimaryKey></PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 13</Name>
					<ChildTable>EMPLOYEETERRITORIES</ChildTable>
					<ParentTable>TERRITORIES</ParentTable>
					<ChildIndex>TERRITORYI</ChildIndex>
					<ParentIndex>TERRITORYI</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 6</Name>
					<ChildTable>EMPLOYEETERRITORIES</ChildTable>
					<ParentTable>EMPLOYEES</ParentTable>
					<ChildIndex>EMPLOYEEID</ChildIndex>
					<ParentIndex>EMPLOYEEID</ParentIndex>
					<RefIntegrity>RCI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>ORDERDETAILS</Name>
			<Comment></Comment>
			<Path>orderdetails.dbf</Path>
			<DeleteTrigger></DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger></UpdateTrigger>
			<PrimaryKey>primarykey</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 8</Name>
					<ChildTable>ORDERDETAILS</ChildTable>
					<ParentTable>ORDERS</ParentTable>
					<ChildIndex>ORDERID</ChildIndex>
					<ParentIndex>ORDERID</ParentIndex>
					<RefIntegrity>RCI</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 9</Name>
					<ChildTable>ORDERDETAILS</ChildTable>
					<ParentTable>PRODUCTS</ParentTable>
					<ChildIndex>PRODUCTID</ChildIndex>
					<ParentIndex>PRODUCTID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>ORDERS</Name>
			<Comment></Comment>
			<Path>orders.dbf</Path>
			<DeleteTrigger>__ri_delete_orders()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_orders()</UpdateTrigger>
			<PrimaryKey>orderid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 11</Name>
					<ChildTable>ORDERS</ChildTable>
					<ParentTable>SHIPPERS</ParentTable>
					<ChildIndex>SHIPPERID</ChildIndex>
					<ParentIndex>SHIPPERID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 3</Name>
					<ChildTable>ORDERS</ChildTable>
					<ParentTable>CUSTOMERS</ParentTable>
					<ChildIndex>CUSTOMERID</ChildIndex>
					<ParentIndex>CUSTOMERID</ParentIndex>
					<RefIntegrity>CRI</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 7</Name>
					<ChildTable>ORDERS</ChildTable>
					<ParentTable>EMPLOYEES</ParentTable>
					<ChildIndex>EMPLOYEEID</ChildIndex>
					<ParentIndex>EMPLOYEEID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>PRODUCTS</Name>
			<Comment></Comment>
			<Path>products.dbf</Path>
			<DeleteTrigger>__ri_delete_products()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_products()</UpdateTrigger>
			<PrimaryKey>productid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 12</Name>
					<ChildTable>PRODUCTS</ChildTable>
					<ParentTable>SUPPLIERS</ParentTable>
					<ChildIndex>SUPPLIERID</ChildIndex>
					<ParentIndex>SUPPLIERID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
				<RELATION>
					<Name>Relation 1</Name>
					<ChildTable>PRODUCTS</ChildTable>
					<ParentTable>CATEGORIES</ParentTable>
					<ChildIndex>CATEGORYID</ChildIndex>
					<ParentIndex>CATEGORYID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>

		<TABLE>
			<Name>REGION</Name>
			<Comment></Comment>
			<Path>region.dbf</Path>
			<DeleteTrigger>__ri_delete_region()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_region()</UpdateTrigger>
			<PrimaryKey>regionid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



		</TABLE>

		<TABLE>
			<Name>SHIPPERS</Name>
			<Comment></Comment>
			<Path>shippers.dbf</Path>
			<DeleteTrigger>__ri_delete_shippers()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_shippers()</UpdateTrigger>
			<PrimaryKey>shipperid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



		</TABLE>

		<TABLE>
			<Name>SUPPLIERS</Name>
			<Comment></Comment>
			<Path>suppliers.dbf</Path>
			<DeleteTrigger>__ri_delete_suppliers()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_suppliers()</UpdateTrigger>
			<PrimaryKey>supplierid</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



		</TABLE>

		<TABLE>
			<Name>TERRITORIES</Name>
			<Comment></Comment>
			<Path>territories.dbf</Path>
			<DeleteTrigger>__ri_delete_territories()</DeleteTrigger>
			<InsertTrigger></InsertTrigger>
			<UpdateTrigger>__ri_update_territories()</UpdateTrigger>
			<PrimaryKey>territoryi</PrimaryKey>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>



			<RELATIONS>
				<RELATION>
					<Name>Relation 10</Name>
					<ChildTable>TERRITORIES</ChildTable>
					<ParentTable>REGION</ParentTable>
					<ChildIndex>REGIONID</ChildIndex>
					<ParentIndex>REGIONID</ParentIndex>
					<RefIntegrity>RRI</RefIntegrity>
				</RELATION>
			</RELATIONS>

		</TABLE>
	</TABLES>


	<VIEWS>

		<VIEW>
			<Name>ALPHABETICAL_LIST_OF_PRODUCTS</Name>
			<Comment></Comment>
			<Tables>northwind!Products,northwind!Categories</Tables>
			<SQL>SELECT Products.*, Categories.categoryname FROM  northwind!Categories  INNER JOIN northwind!Products  ON  Categories.categoryid = Products.categoryid WHERE  Products.discontinued = .F. ORDER BY Products.productname</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				productid
				productname
				supplierid
				categoryid
				quantityperunit
				unitprice
				unitsinstock
				unitsonorder
				reorderlevel
				discontinued
				categoryname
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>categoryid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>categoryid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>categoryname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Categories.categoryname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>discontinued</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>L</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.discontinued</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>northwind!Products.productid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantityperunit</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(20)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.quantityperunit</UpdateName>
				</FIELD>
				<FIELD>
					<Name>reorderlevel</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.reorderlevel</UpdateName>
				</FIELD>
				<FIELD>
					<Name>supplierid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.supplierid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.unitprice</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitsinstock</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.unitsinstock</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitsonorder</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>northwind!Products.unitsonorder</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>CATEGORY_SALES_FOR_1997</Name>
			<Comment></Comment>
			<Tables>Product_Sales_For_1997</Tables>
			<SQL>SELECT Product_Sales_For_1997.CategoryName, Sum(Product_Sales_For_1997.ProductSales) AS CategorySales FROM Product_Sales_For_1997 GROUP BY Product_Sales_For_1997.CategoryName</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				categoryname
				categorysales
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>categoryname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Product_Sales_For_1997.categoryname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>categorysales</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>categorysales</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>CURRENT_PRODUCT_LIST</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT Product_List.ProductID, Product_List.ProductName  FROM Products AS Product_List  WHERE (((Product_List.Discontinued)=.F.))  ORDER BY Product_List.ProductName </SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				productid
				productname
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>productid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productname</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>CUSTOMER_AND_SUPPLIERS_BY_CITY</Name>
			<Comment></Comment>
			<Tables>Customers</Tables>
			<SQL>SELECT City, CompanyName, ContactName, 'Customers' AS Relationship  FROM Customers  UNION SELECT City, CompanyName, ContactName, 'Suppliers' FROM Suppliers</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				city
				companyname
				contactname
				relationship
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.city</UpdateName>
				</FIELD>
				<FIELD>
					<Name>companyname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.companyname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>contactname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(30)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.contactname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>relationship</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(9)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>relationship</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>INVOICES</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, Orders.ShipRegion, Orders.ShipPostalCode,  Orders.ShipCountry, Orders.CustomerID, Customers.CompanyName AS CustomerName, Customers.Address, Customers.City,  Customers.Region, Customers.PostalCode, Customers.Country,  (ALLTRIM(FirstName) + ' ' + ALLTRIM(LastName)) AS Salesperson,  Orders.OrderID, Orders.OrderDate, Orders.RequiredDate, Orders.ShippedDate, Shippers.CompanyName As ShipperName,  OrderDetails.ProductID, Products.ProductName, OrderDetails.UnitPrice, OrderDetails.Quantity,  OrderDetails.Discount,  (OrderDetails.UnitPrice*OrderDetails.Quantity*(1-OrderDetails.Discount)/100) *100 AS ExtendedPrice, Orders.Freight FROM Shippers INNER JOIN  (Products INNER JOIN (  (Employees INNER JOIN  (Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)  ON Employees.EmployeeID = Orders.EmployeeID)  INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID)  ON Products.ProductID = OrderDetails.ProductID)  ON Shippers.ShipperID = Orders.ShipVia ORDER BY Orders.CustomerID, Orders.ShippedDate DESC</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				shipname
				shipaddress
				shipcity
				shipregion
				shippostalcode
				shipcountry
				customerid
				customername
				address
				city
				region
				postalcode
				country
				salesperson
				orderid
				orderdate
				requireddate
				shippeddate
				shippername
				productid
				productname
				unitprice
				quantity
				discount
				extendedprice
				freight
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>address</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(60)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>address</UpdateName>
				</FIELD>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>city</UpdateName>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>country</UpdateName>
				</FIELD>
				<FIELD>
					<Name>customerid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>customerid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>customername</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>customername</UpdateName>
				</FIELD>
				<FIELD>
					<Name>discount</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(20,5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>discount</UpdateName>
				</FIELD>
				<FIELD>
					<Name>extendedprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>extendedprice</UpdateName>
				</FIELD>
				<FIELD>
					<Name>freight</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>freight</UpdateName>
				</FIELD>
				<FIELD>
					<Name>orderdate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>orderdate</UpdateName>
				</FIELD>
				<FIELD>
					<Name>orderid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>orderid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>postalcode</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>postalcode</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantity</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>quantity</UpdateName>
				</FIELD>
				<FIELD>
					<Name>region</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>region</UpdateName>
				</FIELD>
				<FIELD>
					<Name>requireddate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>requireddate</UpdateName>
				</FIELD>
				<FIELD>
					<Name>salesperson</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(31)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>salesperson</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipaddress</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(60)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shipaddress</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipcity</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shipcity</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipcountry</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shipcountry</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shipname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shippeddate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shippeddate</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shippername</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shippername</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shippostalcode</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shippostalcode</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipregion</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>shipregion</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>unitprice</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDERS_QRY</Name>
			<Comment></Comment>
			<Tables>Orders,Customers</Tables>
			<SQL>SELECT Orders.OrderID, Orders.CustomerID, Orders.EmployeeID, Orders.OrderDate, Orders.RequiredDate,  Orders.ShippedDate, Orders.ShipVia, Orders.Freight, Orders.ShipName, Orders.ShipAddress, Orders.ShipCity,  Orders.ShipRegion, Orders.ShipPostalCode, Orders.ShipCountry,  Customers.CompanyName, Customers.Address, Customers.City, Customers.Region, Customers.PostalCode, Customers.Country FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				orderid
				customerid
				employeeid
				orderdate
				requireddate
				shippeddate
				shipvia
				freight
				shipname
				shipaddress
				shipcity
				shipregion
				shippostalcode
				shipcountry
				companyname
				address
				city
				region
				postalcode
				country
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>address</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(60)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.address</UpdateName>
				</FIELD>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.city</UpdateName>
				</FIELD>
				<FIELD>
					<Name>companyname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.companyname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.country</UpdateName>
				</FIELD>
				<FIELD>
					<Name>customerid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.customerid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>employeeid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.employeeid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>freight</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.freight</UpdateName>
				</FIELD>
				<FIELD>
					<Name>orderdate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.orderdate</UpdateName>
				</FIELD>
				<FIELD>
					<Name>orderid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.orderid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>postalcode</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.postalcode</UpdateName>
				</FIELD>
				<FIELD>
					<Name>region</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.region</UpdateName>
				</FIELD>
				<FIELD>
					<Name>requireddate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.requireddate</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipaddress</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(60)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shipaddress</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipcity</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shipcity</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipcountry</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shipcountry</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shipname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shippeddate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shippeddate</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shippostalcode</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(10)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shippostalcode</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipregion</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shipregion</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shipvia</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shipvia</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDER_DETAILS_EXTENDED</Name>
			<Comment></Comment>
			<Tables>OrderDetails,Products</Tables>
			<SQL>SELECT OrderDetails.OrderID, OrderDetails.ProductID, Products.ProductName,  OrderDetails.UnitPrice, OrderDetails.Quantity, OrderDetails.Discount,  ((OrderDetails.UnitPrice*OrderDetails.Quantity*(1-OrderDetails.Discount)/100)*100) AS ExtendedPrice FROM Products INNER JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				orderid
				productid
				productname
				unitprice
				quantity
				discount
				extendedprice
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>discount</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(20,5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>OrderDetails.discount</UpdateName>
				</FIELD>
				<FIELD>
					<Name>extendedprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>extendedprice</UpdateName>
				</FIELD>
				<FIELD>
					<Name>orderid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>OrderDetails.orderid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>OrderDetails.productid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantity</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>OrderDetails.quantity</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>OrderDetails.unitprice</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>ORDER_SUBTOTALS</Name>
			<Comment></Comment>
			<Tables>OrderDetails</Tables>
			<SQL>SELECT OrderDetails.OrderID, Sum( (OrderDetails.UnitPrice*OrderDetails.Quantity*(1-OrderDetails.Discount)/100) *100) AS Subtotal FROM OrderDetails GROUP BY OrderDetails.OrderID</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				orderid
				subtotal
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>orderid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>OrderDetails.orderid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>subtotal</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>subtotal</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>PRODUCTS_ABOVE_AVERAGE_PRICE</Name>
			<Comment></Comment>
			<Tables>Products</Tables>
			<SQL>SELECT Products.ProductName, Products.UnitPrice FROM Products WHERE Products.UnitPrice>(SELECT AVG(UnitPrice) From Products)</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				productname
				unitprice
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.unitprice</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>PRODUCTS_BY_CATEGORY</Name>
			<Comment></Comment>
			<Tables>Categories,Products</Tables>
			<SQL>SELECT Categories.CategoryName, Products.ProductName, Products.QuantityPerUnit, Products.UnitsInStock, Products.Discontinued FROM Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.Discontinued = .F. ORDER BY Categories.CategoryName, Products.ProductName</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				categoryname
				productname
				quantityperunit
				unitsinstock
				discontinued
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>categoryname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Categories.categoryname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>discontinued</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>L</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.discontinued</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>quantityperunit</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(20)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.quantityperunit</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitsinstock</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.unitsinstock</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>PRODUCT_SALES_FOR_1997</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT Categories.CategoryName, Products.ProductName,  Sum( (OrderDetails.UnitPrice*OrderDetails.Quantity*(1-OrderDetails.Discount)/100) *100) AS ProductSales  FROM (Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID)  INNER JOIN (Orders INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID)  ON Products.ProductID = OrderDetails.ProductID  WHERE BETWEEN(Orders.ShippedDate, {^1997/01/01},{^1997/12/31}) GROUP BY Categories.CategoryName, Products.ProductName</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				categoryname
				productname
				productsales
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>categoryname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>categoryname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productsales</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productsales</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>QUARTERLY_ORDERS</Name>
			<Comment></Comment>
			<Tables>Customers</Tables>
			<SQL>SELECT DISTINCT Customers.CustomerID, Customers.CompanyName, Customers.City, Customers.Country FROM Customers RIGHT JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE BETWEEN(Orders.OrderDate, {^1997/01/01},{^1997/12/31})</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				customerid
				companyname
				city
				country
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>city</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.city</UpdateName>
				</FIELD>
				<FIELD>
					<Name>companyname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.companyname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>country</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.country</UpdateName>
				</FIELD>
				<FIELD>
					<Name>customerid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Customers.customerid</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SALES_BY_CATEGORY</Name>
			<Comment></Comment>
			<Tables>Categories,Products</Tables>
			<SQL>SELECT Categories.CategoryID, Categories.CategoryName, Products.ProductName,  Sum(Order_Details_Extended.ExtendedPrice) AS ProductSales FROM 	Categories INNER JOIN  (Products INNER JOIN  (Orders INNER JOIN Order_Details_Extended ON Orders.OrderID = Order_Details_Extended.OrderID)  ON Products.ProductID = Order_Details_Extended.ProductID)  ON Categories.CategoryID = Products.CategoryID WHERE BETWEEN(Orders.OrderDate, {^1997/01/01},{^1997/12/31}) GROUP BY Categories.CategoryID, Categories.CategoryName, Products.ProductName ORDER BY Products.ProductName</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				categoryid
				categoryname
				productname
				productsales
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>categoryid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Categories.categoryid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>categoryname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(15)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Categories.categoryname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.productname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>productsales</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>productsales</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SALES_TOTALS_BY_AMOUNT</Name>
			<Comment></Comment>
			<Tables>Orders,Customers</Tables>
			<SQL>SELECT Order_Subtotals.Subtotal AS SaleAmount, Orders.OrderID, Customers.CompanyName, Orders.ShippedDate FROM 	Customers INNER JOIN  (Orders INNER JOIN Order_Subtotals ON Orders.OrderID = Order_Subtotals.OrderID)  ON Customers.CustomerID = Orders.CustomerID WHERE (Order_Subtotals.Subtotal >2500) AND BETWEEN(Orders.ShippedDate, {^1997/01/01},{^1997/12/31})</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				saleamount
				orderid
				companyname
				shippeddate
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>companyname</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Customers.companyname</UpdateName>
				</FIELD>
				<FIELD>
					<Name>orderid</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>I</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.T.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>Orders.orderid</UpdateName>
				</FIELD>
				<FIELD>
					<Name>saleamount</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>saleamount</UpdateName>
				</FIELD>
				<FIELD>
					<Name>shippeddate</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>D</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Orders.shippeddate</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SUMMARY_OF_SALES_BY_QUARTER</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT     YEAR(Orders.ShippedDate) as Year, INT(MONTH(Orders.ShippedDate)/4)+1 as Quarter,   SUM(Order_Subtotals.Subtotal) as Total FROM         Orders INNER JOIN  Order_Subtotals ON Orders.OrderID = Order_Subtotals.OrderID  WHERE     NOT EMPTY(NVL(Orders.ShippedDate,"")) GROUP BY Year, Quarter  ORDER BY Year, Quarter</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				year
				quarter
				total
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>quarter</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(9)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>quarter</UpdateName>
				</FIELD>
				<FIELD>
					<Name>total</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>total</UpdateName>
				</FIELD>
				<FIELD>
					<Name>year</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>year</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>SUMMARY_OF_SALES_BY_YEAR</Name>
			<Comment></Comment>
			<Tables></Tables>
			<SQL>SELECT	 YEAR(Orders.ShippedDate) as Year, SUM(Order_Subtotals.Subtotal) as Total  FROM 	Orders INNER JOIN Order_Subtotals ON Orders.OrderID = Order_Subtotals.OrderID  WHERE     NOT EMPTY(NVL(Orders.ShippedDate,"")) GROUP BY Year  ORDER BY Year</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				year
				total
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>total</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>total</UpdateName>
				</FIELD>
				<FIELD>
					<Name>year</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>N(5)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>year</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>

		<VIEW>
			<Name>TEN_MOST_EXPENSIVE_PRODUCTS</Name>
			<Comment></Comment>
			<Tables>Products</Tables>
			<SQL>SELECT TOP 10 Products.ProductName AS TenMostExpensiveProducts, Products.UnitPrice FROM Products ORDER BY Products.UnitPrice DESC</SQL>
			<AllowSimultaneousFetch>.F.</AllowSimultaneousFetch>
			<BatchUpdateCount>1</BatchUpdateCount>
			<CompareMemo>.T.</CompareMemo>
			<ConnectName></ConnectName>
			<FetchAsNeeded>.F.</FetchAsNeeded>
			<FetchMemo>.T.</FetchMemo>
			<FetchSize>100</FetchSize>
			<MaxRecords>-1</MaxRecords>
			<Offline>.F.</Offline>
			<ParameterList></ParameterList>
			<Prepared>.F.</Prepared>
			<RuleExpression></RuleExpression>
			<RuleText></RuleText>
			<SendUpdates>.F.</SendUpdates>
			<ShareConnection>.F.</ShareConnection>
			<SourceType>1</SourceType>
			<UpdateType>1</UpdateType>
			<UseMemoSize>255</UseMemoSize>
			<WhereType>3</WhereType>

			<FIELD_ORDER>
				tenmostexpensiveproducts
				unitprice
			</FIELD_ORDER>

			<FIELDS>
				<FIELD>
					<Name>tenmostexpensiveproducts</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>C(40)</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.F.</Updatable>
					<UpdateName>tenmostexpensiveproducts</UpdateName>
				</FIELD>
				<FIELD>
					<Name>unitprice</Name>
					<Caption></Caption>
					<Comment></Comment>
					<DataType>Y</DataType>
					<DefaultValue></DefaultValue>
					<DisplayClass></DisplayClass>
					<DisplayClassLibrary></DisplayClassLibrary>
					<Format></Format>
					<InputMask></InputMask>
					<KeyField>.F.</KeyField>
					<RuleExpression></RuleExpression>
					<RuleText></RuleText>
					<Updatable>.T.</Updatable>
					<UpdateName>Products.unitprice</UpdateName>
				</FIELD>
			</FIELDS>


		</VIEW>
	</VIEWS>



	<STOREDPROCEDURES><![CDATA[

**__RI_HEADER!@ Do NOT REMOVE or MODIFY this line!!!! @!__RI_HEADER**
procedure RIDELETE
local llRetVal
llRetVal=.t.
 IF (ISRLOCKED() and !deleted()) OR !RLOCK()
    llRetVal=.F.
  ELSE
    IF !deleted()
      DELETE
      IF CURSORGETPROP('BUFFERING') > 1
      	=TABLEUPDATE()
      ENDIF
    ENDIF not already deleted
  ENDIF
  UNLOCK RECORD (RECNO())
  llRetVal=pnerror=0
RETURN llRetVal

procedure RIUPDATE
lparameters tcFieldName,tcNewValue,tcCascadeParent
local llRetVal
llRetVal=.t.
 IF ISRLOCKED() OR !RLOCK()
    llRetVal=.F.
  ELSE
    IF EVAL(tcFieldName)<>tcNewValue
      PRIVATE pcCascadeParent
      pcCascadeParent=upper(iif(type("tcCascadeParent")<>"C","",tcCascadeParent))
      REPLACE (tcFieldName) WITH tcNewValue
      IF CURSORGETPROP('BUFFERING') > 1
      	=TABLEUPDATE()
      ENDIF
    ENDIF values don't already match
  ENDIF it's locked already, or I was able to lock it
  UNLOCK RECORD (RECNO())
  llRetVal=pnerror=0
return llRetVal

procedure rierror
parameters tnErrNo,tcMessage,tcCode,tcProgram
local lnErrorRows,lnXX
lnErrorRows=alen(gaErrors,1)
if type('gaErrors[lnErrorRows,1]')<>"L"
  dimension gaErrors[lnErrorRows+1,alen(gaErrors,2)]
  lnErrorRows=lnErrorRows+1
endif
gaErrors[lnErrorRows,1]=tnErrNo
gaErrors[lnErrorRows,2]=tcMessage
gaErrors[lnErrorRows,3]=tcCode
gaErrors[lnErrorRows,4]=""
lnXX=1
do while !empty(program(lnXX))
  gaErrors[lnErrorRows,4]=gaErrors[lnErrorRows,4]+","+;
  program(lnXX)
  lnXX=lnXX+1
enddo
gaErrors[lnErrorRows,5]=pcParentDBF
gaErrors[lnErrorRows,6]=pnParentRec
gaErrors[lnErrorRows,7]=pcParentID
gaErrors[lnErrorRows,8]=pcParentExpr
gaErrors[lnErrorRows,9]=pcChildDBF
gaErrors[lnErrorRows,10]=pnChildRec
gaErrors[lnErrorRows,11]=pcChildID
gaErrors[lnErrorRows,12]=pcChildExpr
return tnErrNo


PROCEDURE riopen
PARAMETERS tcTable,tcOrder

LOCAL lcCurWkArea,lcNewWkArea,lnInUseSpot,lnOccurs,lnOccurance
lnInUseSpot=0
lnOccurs = OCCURS(UPPER(tcTable)+"*",UPPER(pcRIcursors))
FOR lnOccurance = 1 TO lnOccurs
	lnInUseSpot=ATC(tcTable+"*",pcRIcursors,lnOccurance)
	IF ISDIGIT(SUBSTR(pcRIcursors,lnInUseSpot-1,1)) OR;
		 EMPTY(SUBSTR(pcRIcursors,lnInUseSpot-1,1))
		EXIT
	ENDIF
	lnInUseSpot=0
ENDFOR

IF lnInUseSpot=0
  lcCurWkArea=select()
  SELECT 0
  lcNewWkArea=select()
  IF NOT EMPTY(tcOrder)
    USE (tcTable) AGAIN ORDER (tcOrder) ;
      ALIAS ("__ri"+LTRIM(STR(SELECT()))) share
  ELSE
    USE (tcTable) AGAIN ALIAS ("__ri"+LTRIM(STR(SELECT()))) share
  ENDIF
  if pnerror=0
    pcRIcursors=pcRIcursors+upper(tcTable)+"?"+STR(SELECT(),5)
  else
    lcNewWkArea=0
  endif something bad happened while attempting to open the file
ELSE
  lcNewWkArea=val(substr(pcRIcursors,lnInUseSpot+len(tcTable)+1,5))
  pcRIcursors = strtran(pcRIcursors,upper(tcTable)+"*"+str(lcNewWkArea,5),;
    upper(tcTable)+"?"+str(lcNewWkArea,5))
  IF NOT EMPTY(tcOrder)
    SET ORDER TO (tcOrder) IN (lcNewWkArea)
  ENDIF sent an order
  if pnerror<>0
    lcNewWkArea=0
  endif something bad happened while setting order
ENDIF
RETURN (lcNewWkArea)


PROCEDURE riend
PARAMETERS tlSuccess
local lnXX,lnSpot,lcWorkArea
IF tlSuccess
  END TRANSACTION
ELSE
  SET DELETED OFF
  ROLLBACK
  SET DELETED ON
ENDIF
IF EMPTY(pcRIolderror)
  ON ERROR
ELSE
  ON ERROR &pcRIolderror.
ENDIF
FOR lnXX=1 TO occurs("*",pcRIcursors)
  lnSpot=atc("*",pcRIcursors,lnXX)+1
  USE IN (VAL(substr(pcRIcursors,lnSpot,5)))
ENDFOR
IF pcOldCompat = "ON"
	SET COMPATIBLE ON
ENDIF
IF pcOldDele="OFF"
  SET DELETED OFF
ENDIF
IF pcOldExact="ON"
  SET EXACT ON
ENDIF
IF pcOldTalk="ON"
  SET TALK ON
ENDIF
do case
  case empty(pcOldDBC)
    set data to
  case pcOldDBC<>DBC()
    set data to (pcOldDBC)
endcase
RETURN .T.


PROCEDURE rireuse
* rireuse.prg
PARAMETERS tcTableName,tcWkArea
pcRIcursors = strtran(pcRIcursors,upper(tcTableName)+"?"+str(tcWkArea,5),;
  upper(tcTableName)+"*"+str(tcWkArea,5))
RETURN .t.

********************************************************************************
** "Referential integrity delete trigger for" Categories
PROCEDURE __RI_DELETE_Categories
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE CATEGORYID TO lcParentID,pcParentID
pcParentExpr="CATEGORYID"
lcChildWkArea=riopen("Products","categoryid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=CATEGORYID
pcChildExpr="CATEGORYID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Products",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Categories
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Categories
** "Referential integrity update trigger for" Categories
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("CATEGORYID")
pcParentID=lcOldParentID
pcParentExpr="CATEGORYID"
lcParentID=CATEGORYID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Products")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO categoryid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=CATEGORYID
  pcChildExpr="CATEGORYID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("Products",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Categories
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" CustomerDemographics
PROCEDURE __RI_DELETE_CustomerDemographics
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE ALLTRIM(UPPER(CUSTOMERTYPEID)) TO lcParentID,pcParentID
pcParentExpr="ALLTRIM(UPPER(CUSTOMERTYPEID))"
lcChildWkArea=riopen("CustomerCustomerDemo","custtypeid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=ALLTRIM(UPPER(CUSTOMERTYPEID))
pcChildExpr="ALLTRIM(UPPER(CUSTOMERTYPEID))"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("CustomerCustomerDemo",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" CustomerDemographics
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_CustomerDemographics
** "Referential integrity update trigger for" CustomerDemographics
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("ALLTRIM(UPPER(CUSTOMERTYPEID))")
pcParentID=lcOldParentID
pcParentExpr="ALLTRIM(UPPER(CUSTOMERTYPEID))"
lcParentID=ALLTRIM(UPPER(CUSTOMERTYPEID))
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("CustomerCustomerDemo")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO custtypeid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=ALLTRIM(UPPER(CUSTOMERTYPEID))
  pcChildExpr="ALLTRIM(UPPER(CUSTOMERTYPEID))"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("CustomerCustomerDemo",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" CustomerDemographics
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Customers
PROCEDURE __RI_DELETE_Customers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE CUSTOMERID TO lcParentID,pcParentID
pcParentExpr="CUSTOMERID"
lcChildWkArea=riopen("Orders","customerid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=CUSTOMERID
pcChildExpr="CUSTOMERID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Orders",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE CUSTOMERID TO lcParentID,pcParentID
pcParentExpr="CUSTOMERID"
lcChildWkArea=riopen("CustomerCustomerDemo","customerid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=ALLTRIM(UPPER(CUSTOMERID))
pcChildExpr="ALLTRIM(UPPER(CUSTOMERID))"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("CustomerCustomerDemo",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Customers
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Customers
** "Referential integrity update trigger for" Customers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("CUSTOMERID")
pcParentID=lcOldParentID
pcParentExpr="CUSTOMERID"
lcParentID=CUSTOMERID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Orders")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SELECT (lcChildWkArea)
  SCAN FOR CUSTOMERID=lcOldParentID
    pnChildRec=recno()
    pcChildID=CUSTOMERID
    pcChildExpr="CUSTOMERID"
    IF NOT llRetVal
      EXIT
    ENDIF && not llretval
    llRetVal=riupdate("CUSTOMERID",lcParentID,"CUSTOMERS")
  ENDSCAN get all of the Orders records
  =rireuse("Orders",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("CUSTOMERID")
pcParentID=lcOldParentID
pcParentExpr="CUSTOMERID"
lcParentID=CUSTOMERID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("CustomerCustomerDemo")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO customerid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=ALLTRIM(UPPER(CUSTOMERID))
  pcChildExpr="ALLTRIM(UPPER(CUSTOMERID))"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("CustomerCustomerDemo",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Customers
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Employees
PROCEDURE __RI_DELETE_Employees
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE EMPLOYEEID TO lcParentID,pcParentID
pcParentExpr="EMPLOYEEID"
lcChildWkArea=riopen("Employees","reportsto")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=REPORTSTO
pcChildExpr="REPORTSTO"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Employees",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE EMPLOYEEID TO lcParentID,pcParentID
pcParentExpr="EMPLOYEEID"
lcChildWkArea=riopen("Orders","employeeid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=EMPLOYEEID
pcChildExpr="EMPLOYEEID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Orders",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE EMPLOYEEID TO lcParentID,pcParentID
pcParentExpr="EMPLOYEEID"
lcChildWkArea=riopen("EmployeeTerritories","employeeid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
SELECT (lcChildWkArea)
SEEK lcParentID
SCAN WHILE EMPLOYEEID=lcParentID AND llRetVal
  pnChildRec=recno()
  pcChildID=EMPLOYEEID
  pcChildExpr="EMPLOYEEID"
  llRetVal=ridelete()
ENDSCAN get all of the EmployeeTerritories records
=rireuse("EmployeeTerritories",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Employees
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Employees
** "Referential integrity update trigger for" Employees
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("EMPLOYEEID")
pcParentID=lcOldParentID
pcParentExpr="EMPLOYEEID"
lcParentID=EMPLOYEEID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Employees")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO reportsto IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=REPORTSTO
  pcChildExpr="REPORTSTO"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("Employees",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("EMPLOYEEID")
pcParentID=lcOldParentID
pcParentExpr="EMPLOYEEID"
lcParentID=EMPLOYEEID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Orders")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO employeeid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=EMPLOYEEID
  pcChildExpr="EMPLOYEEID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("Orders",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("EMPLOYEEID")
pcParentID=lcOldParentID
pcParentExpr="EMPLOYEEID"
lcParentID=EMPLOYEEID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("EmployeeTerritories")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO employeeid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=EMPLOYEEID
  pcChildExpr="EMPLOYEEID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("EmployeeTerritories",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Employees
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Orders
PROCEDURE __RI_DELETE_Orders
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE ORDERID TO lcParentID,pcParentID
pcParentExpr="ORDERID"
lcChildWkArea=riopen("OrderDetails","orderid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
SELECT (lcChildWkArea)
SEEK lcParentID
SCAN WHILE ORDERID=lcParentID AND llRetVal
  pnChildRec=recno()
  pcChildID=ORDERID
  pcChildExpr="ORDERID"
  llRetVal=ridelete()
ENDSCAN get all of the OrderDetails records
=rireuse("OrderDetails",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Orders
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Orders
** "Referential integrity update trigger for" Orders
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("ORDERID")
pcParentID=lcOldParentID
pcParentExpr="ORDERID"
lcParentID=ORDERID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("OrderDetails")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO orderid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=ORDERID
  pcChildExpr="ORDERID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("OrderDetails",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Orders
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Products
PROCEDURE __RI_DELETE_Products
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE PRODUCTID TO lcParentID,pcParentID
pcParentExpr="PRODUCTID"
lcChildWkArea=riopen("OrderDetails","productid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=PRODUCTID
pcChildExpr="PRODUCTID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("OrderDetails",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Products
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Products
** "Referential integrity update trigger for" Products
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("PRODUCTID")
pcParentID=lcOldParentID
pcParentExpr="PRODUCTID"
lcParentID=PRODUCTID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("OrderDetails")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO productid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=PRODUCTID
  pcChildExpr="PRODUCTID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("OrderDetails",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Products
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Region
PROCEDURE __RI_DELETE_Region
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE REGIONID TO lcParentID,pcParentID
pcParentExpr="REGIONID"
lcChildWkArea=riopen("Territories","regionid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=REGIONID
pcChildExpr="REGIONID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Territories",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Region
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Region
** "Referential integrity update trigger for" Region
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("REGIONID")
pcParentID=lcOldParentID
pcParentExpr="REGIONID"
lcParentID=REGIONID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Territories")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO regionid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=REGIONID
  pcChildExpr="REGIONID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("Territories",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Region
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Shippers
PROCEDURE __RI_DELETE_Shippers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE SHIPPERID TO lcParentID,pcParentID
pcParentExpr="SHIPPERID"
lcChildWkArea=riopen("Orders","shipperid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=SHIPVIA
pcChildExpr="SHIPVIA"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Orders",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Shippers
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Shippers
** "Referential integrity update trigger for" Shippers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("SHIPPERID")
pcParentID=lcOldParentID
pcParentExpr="SHIPPERID"
lcParentID=SHIPPERID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Orders")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO shipperid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=SHIPVIA
  pcChildExpr="SHIPVIA"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("Orders",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Shippers
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Suppliers
PROCEDURE __RI_DELETE_Suppliers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE SUPPLIERID TO lcParentID,pcParentID
pcParentExpr="SUPPLIERID"
lcChildWkArea=riopen("Products","supplierid")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=SUPPLIERID
pcChildExpr="SUPPLIERID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("Products",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Suppliers
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Suppliers
** "Referential integrity update trigger for" Suppliers
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("SUPPLIERID")
pcParentID=lcOldParentID
pcParentExpr="SUPPLIERID"
lcParentID=SUPPLIERID
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("Products")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO supplierid IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=SUPPLIERID
  pcChildExpr="SUPPLIERID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("Products",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Suppliers
********************************************************************************

********************************************************************************
** "Referential integrity delete trigger for" Territories
PROCEDURE __RI_DELETE_Territories
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcParentWkArea
LOCAL llDelHeaderarea
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
STORE ALLTRIM(UPPER(TERRITORYID)) TO lcParentID,pcParentID
pcParentExpr="ALLTRIM(UPPER(TERRITORYID))"
lcChildWkArea=riopen("EmployeeTerritories","territoryi")
IF lcChildWkArea<=0
  IF _triggerlevel=1
    DO riend WITH .F.
  ENDIF at the end of the highest trigger level
  RETURN .F.
ENDIF not able to open the child work area
pcChildDBF=dbf(lcChildWkArea)
llRetVal=!SEEK(lcParentID,lcChildWkArea)
SELECT (lcChildWkArea)
pnChildRec=recno()
pcChildID=TERRITORYID
pcChildExpr="TERRITORYID"
IF !llRetVal
  pnError = rierror(-1,"Delete restrict rule violated.","","")
ENDIF
=rireuse("EmployeeTerritories",lcChildWkArea)
IF NOT llRetVal
  IF _triggerlevel=1
    DO riend WITH llRetVal
  ENDIF at the end of the highest trigger level
  SELECT (lcStartArea)
  RETURN llRetVal
ENDIF
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Delete trigger for" Territories
********************************************************************************

********************************************************************************
procedure __RI_UPDATE_Territories
** "Referential integrity update trigger for" Territories
LOCAL llRetVal
llRetVal = .t.
PRIVATE pcParentDBF,pnParentRec,pcChildDBF,pnChildRec,pcParentID,pcChildID
PRIVATE pcParentExpr,pcChildExpr
STORE "" TO pcParentDBF,pcChildDBF,pcParentID,pcChildID,pcParentExpr,pcChildExpr
STORE 0 TO pnParentRec,pnChildRec
IF _triggerlevel=1
  BEGIN TRANSACTION
  PRIVATE pcRIcursors,pcRIwkareas,pcRIolderror,pnerror,;
  pcOldDele,pcOldExact,pcOldTalk,pcOldCompat,PcOldDBC
  pcOldTalk=SET("TALK")
  SET TALK OFF
  pcOldDele=SET("DELETED")
  pcOldExact=SET("EXACT")
  pcOldCompat=SET("COMPATIBLE")
  SET COMPATIBLE OFF
  SET DELETED ON
  SET EXACT OFF
  pcRIcursors=""
  pcRIwkareas=""
  pcRIolderror=ON("error")
  pnerror=0
  ON ERROR pnerror=rierror(ERROR(),message(),message(1),program())
  IF TYPE('gaErrors(1)')<>"U"
    release gaErrors
  ENDIF
  PUBLIC gaErrors(1,12)
  pcOldDBC=DBC()
  SET DATA TO ("NORTHWIND")
ENDIF first trigger
LOCAL lcParentID && parent's value to be sought in child
LOCAL lcOldParentID && previous parent id value
LOCAL lcChildWkArea && child work area handle returned by riopen
LOCAL lcChildID && child's value to be sought in parent
LOCAL lcOldChildID && old child id value
LOCAL lcParentWkArea && parentwork area handle returned by riopen
LOCAL lcStartArea
lcStartArea=select()
llRetVal=.t.
lcParentWkArea=select()
SELECT (lcParentWkArea)
pcParentDBF=dbf()
pnParentRec=recno()
lcOldParentID=OLDVAL("ALLTRIM(UPPER(TERRITORYID))")
pcParentID=lcOldParentID
pcParentExpr="ALLTRIM(UPPER(TERRITORYID))"
lcParentID=ALLTRIM(UPPER(TERRITORYID))
IF lcParentID<>lcOldParentID
  lcChildWkArea=riopen("EmployeeTerritories")
  IF lcChildWkArea<=0
    IF _triggerlevel=1
      DO riend WITH .F.
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN .F.
  ENDIF not able to open the child work area
  pcChildDBF=dbf(lcChildWkArea)
  SET ORDER TO territoryi IN (lcChildWkArea)
  llRetVal=!SEEK(lcOldParentID,lcChildWkArea)
  pnChildRec=recno()
  pcChildID=TERRITORYID
  pcChildExpr="TERRITORYID"
  IF !llRetVal
    pnError = rierror(-1,"Update restrict rule violated.","","")
  ENDIF
  =rireuse("EmployeeTerritories",lcChildWkArea)
  IF NOT llRetVal
    IF _triggerlevel=1
      DO riend WITH llRetVal
    ENDIF at the end of the highest trigger level
    SELECT (lcStartArea)
    RETURN llRetVal
  ENDIF
ENDIF this parent id changed
IF _triggerlevel=1
  do riend with llRetVal
ENDIF at the end of the highest trigger level
SELECT (lcStartArea)
RETURN llRetVal
** "End of Referential integrity Update trigger for" Territories
********************************************************************************
**__RI_FOOTER!@ Do NOT REMOVE or MODIFY this line!!!! @!__RI_FOOTER**

*------------------------------------------------
PROCEDURE CustOrderHist(tcCustomerID as String )
*------------------------------------------------
LOCAL lcCustomerID as String
lcCustomerID = IIF(VARTYPE(tcCustomerID)!="C","",tcCustomerID)

SELECT ProductName, SUM(Quantity) AS Total ;
  FROM Products P, OrderDetails OD, Orders O, Customers C ;
  WHERE C.CustomerID = lcCustomerID ;
    AND C.CustomerID = O.CustomerID ;
    AND O.OrderID = OD.OrderID ;
    AND OD.ProductID = P.ProductID ;
  GROUP BY ProductName ;
  INTO CURSOR CustOrderHist

SETRESULTSET('CustOrderHist')
RETURN RECCOUNT('CustOrderHist')

ENDPROC

*------------------------------------------------
PROCEDURE CustOrdersDetail(tiOrderID as Integer )
*------------------------------------------------
LOCAL liOrderID as Integer
liOrderID = IIF(VARTYPE(tiOrderID)!="N",0,tiOrderID)

SELECT ProductName, ;
  ROUND(Od.UnitPrice, 2) AS UnitPrice, ;
  Quantity, ;
  (Discount*100) AS Discount, ;
  ROUND(Quantity * (1 - Discount) * Od.UnitPrice, 2) AS ExtendedPrice ;
  FROM Products P, OrderDetails Od ;
  WHERE Od.ProductID = P.ProductID and Od.OrderID = liOrderID ;
  INTO CURSOR CustOrdersDetail

SETRESULTSET('CustOrdersDetail')
RETURN RECCOUNT('CustOrdersDetail')

ENDPROC

*------------------------------------------------
PROCEDURE CustOrdersOrders(tcCustomerID as String)
*------------------------------------------------
LOCAL lcCustomerID as String
lcCustomerID = IIF(VARTYPE(tcCustomerID)!="C","",tcCustomerID)

SELECT OrderID, OrderDate, RequiredDate, ShippedDate ;
  FROM Orders ;
  WHERE CustomerID = lcCustomerID ;
  ORDER BY OrderID ;
  INTO CURSOR CustOrdersOrders

SETRESULTSET('CustOrdersOrders')
RETURN RECCOUNT('CustOrdersOrders')

ENDPROC

*---------------------------------------------------------------------------------
PROCEDURE SalesByYear(tdBeginning_Date as Date, tdEnding_Date as Date)
*---------------------------------------------------------------------------------
ldBeginning_Date= IIF(VARTYPE(tdBeginning_Date)!="D",{^1901/01/01},tdBeginning_Date)
ldEnding_Date 	= IIF(VARTYPE(tdEnding_Date)!="D",{^2101/01/01},tdEnding_Date)

SELECT Orders.ShippedDate, Orders.OrderID, Order_Subtotals.Subtotal, YEAR(ShippedDate) AS Year ;
  FROM Orders ;
  INNER JOIN Order_Subtotals ON Orders.OrderID = Order_Subtotals.OrderID ;
  WHERE BETWEEN(Orders.ShippedDate, ldBeginning_Date, ldEnding_Date) ;
  INTO CURSOR SalesByYear

SETRESULTSET('SalesByYear')
RETURN RECCOUNT('SalesByYear')

ENDPROC

*---------------------------------------------------------------------------------
PROCEDURE EmployeeSalesbyCountry(tdBeginning_Date as Date, tdEnding_Date as Date)
*---------------------------------------------------------------------------------
LOCAL ldBeginning_Date as Date, ldEnding_Date as Date
ldBeginning_Date = IIF(VARTYPE(tdBeginning_Date)!="D",{^1901/01/01},tdBeginning_Date)
ldEnding_Date 	 = IIF(VARTYPE(tdEnding_Date)!="D",{^2101/01/01},tdEnding_Date)

SELECT Employees.Country, Employees.LastName, ;
  Employees.FirstName, Orders.ShippedDate, ;
  Orders.OrderID, Order_Subtotals.Subtotal AS SaleAmount ;
  FROM Employees INNER JOIN ;
	(Orders INNER JOIN Order_Subtotals ON Orders.OrderID = Order_Subtotals.OrderID) ;
	ON Employees.EmployeeID = Orders.EmployeeID ;
  WHERE BETWEEN(Orders.ShippedDate, ldBeginning_Date, ldEnding_Date) ;
  INTO CURSOR SalesbyCountry

SETRESULTSET('SalesbyCountry')
RETURN RECCOUNT('SalesbyCountry')

ENDPROC


	]]></STOREDPROCEDURES>
</DATABASE>