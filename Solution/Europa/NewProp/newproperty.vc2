*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="newproperty.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS newpropertydialog AS baseform OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVisibility" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboVisibility" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAccess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAssign" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkFavorites" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />

	#INCLUDE "newpropertydialog.h"
	*<DefinedPropArrayMethod>
		*m: addmembertoobject		&& Adds the property or method to the object
		*m: adjustform		&& Adjusts the form based on the dialog and edited object types
		*m: clearform		&& Clears the controls so the form is ready for a new member
		*m: updatememberdata		&& Updates _MemberData (adding that property if necessary) for the new member
		*p: laddcr		&& .T. to add a carriage return after each element in the member data XML
		*p: ladjustedforclass		&& .T. if the form has been adjusted based on Form vs. Class Designer
		*p: ladjustedformethod		&& .T. if the form has been adjusted based on Property vs. Method
		*p: lclass		&& .T. if we've been launched from the Class menu or .F. if it was from the Form menu
		*p: lmethod		&& .T. if we're adding methods
		*p: oobject		&& A reference to the object we're adding members for
		*p: opositions		&& A collection of object positions
	*</DefinedPropArrayMethod>

	Caption = "New Property"
	cfoxuserid = NEWPROPDLG
	cfoxusername = NewPropertyDialog
	DoCreate = .T.
	Height = 341
	lmethod = .F.		&& .T. if we're adding methods
	MinHeight = 341
	MinWidth = 402
	Name = "newpropertydialog"
	oobject = .NULL.		&& A reference to the object we're adding members for
	opositions = .NULL.		&& A collection of object positions
	Width = 402
	_memberdata = <VFPData>
		<memberdata name="addmembertoobject" type="method" display="AddMemberToObject"/>
		<memberdata name="clearform" type="method" display="ClearForm"/>
		<memberdata name="laddcr" type="property" display="lAddCR"/>
		<memberdata name="lclass" type="property" display="lClass"/>
		<memberdata name="lmethod" type="property" display="lMethod"/>
		<memberdata name="oobject" type="property" display="oObject"/>
		<memberdata name="updatememberdata" type="method" display="UpdateMemberData"/>
		<memberdata name="adjustform" type="method" display="AdjustForm"/>
		<memberdata name="opositions" type="property" display="oPositions"/>
		<memberdata name="ladjustedforclass" type="property" display="lAdjustedForClass"/>
		<memberdata name="ladjustedformethod" type="property" display="lAdjustedForMethod"/>
		</VFPData>

	ADD OBJECT 'cboVisibility' AS basecombobox WITH ;
		Left = 61, ;
		Name = "cboVisibility", ;
		RowSource = "Public,Protected,Hidden", ;
		RowSourceType = 1, ;
		TabIndex = 4, ;
		Top = 36
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAccess' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Acce\<ss Method", ;
		Left = 6, ;
		Name = "chkAccess", ;
		TabIndex = 5, ;
		Top = 68
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkAssign' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Assign \<Method", ;
		Left = 116, ;
		Name = "chkAssign", ;
		TabIndex = 6, ;
		Top = 68
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkFavorites' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Favorites", ;
		Left = 230, ;
		Name = "chkFavorites", ;
		TabIndex = 7, ;
		Top = 68
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAdd' AS basecommandbutton WITH ;
		Anchor = 8, ;
		Caption = "Add", ;
		Default = .T., ;
		Left = 320, ;
		Name = "cmdAdd", ;
		TabIndex = 14, ;
		Top = 6
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAddClose' AS basecommandbutton WITH ;
		Anchor = 8, ;
		Caption = "Add & Close", ;
		Left = 320, ;
		Name = "cmdAddClose", ;
		TabIndex = 15, ;
		Top = 35
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdClose' AS basecommandbutton WITH ;
		Anchor = 8, ;
		Cancel = .T., ;
		Caption = "Close", ;
		Left = 320, ;
		Name = "cmdClose", ;
		TabIndex = 16, ;
		Top = 64
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtDefault' AS baseeditbox WITH ;
		Anchor = 10, ;
		Height = 47, ;
		Left = 6, ;
		Name = "edtDefault", ;
		TabIndex = 9, ;
		Top = 116, ;
		Width = 390
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtDescription' AS baseeditbox WITH ;
		Anchor = 15, ;
		Height = 112, ;
		IntegralHeight = .F., ;
		Left = 6, ;
		Name = "edtDescription", ;
		TabIndex = 11, ;
		Top = 196, ;
		Width = 390
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblDefault' AS baselabel WITH ;
		Caption = "Defaul\<t/Initial Value", ;
		Left = 6, ;
		Name = "lblDefault", ;
		TabIndex = 8, ;
		Top = 96
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblDescription' AS baselabel WITH ;
		Caption = "\<Description", ;
		Left = 6, ;
		Name = "lblDescription", ;
		TabIndex = 10, ;
		Top = 176
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblname' AS baselabel WITH ;
		Caption = "\<Name", ;
		Left = 6, ;
		Name = "lblname", ;
		TabIndex = 1, ;
		Top = 10
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblType' AS baselabel WITH ;
		Anchor = 4, ;
		Caption = "Member t\<yoe", ;
		Left = 6, ;
		Name = "lblType", ;
		TabIndex = 12, ;
		Top = 315
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblVisibility' AS baselabel WITH ;
		Caption = "\<Visibility", ;
		Left = 6, ;
		Name = "lblVisibility", ;
		TabIndex = 3, ;
		Top = 40
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'opgType' AS baseoptiongroup WITH ;
		Anchor = 4, ;
		Height = 25, ;
		Left = 75, ;
		Name = "opgType", ;
		TabIndex = 13, ;
		Top = 310, ;
		Width = 129, ;
		baseoptionbutton1.Caption = "\<Property", ;
		baseoptionbutton1.Left = 5, ;
		baseoptionbutton1.Name = "baseoptionbutton1", ;
		baseoptionbutton1.Top = 5, ;
		baseoptionbutton2.Caption = "M\<ethod", ;
		baseoptionbutton2.Left = 70, ;
		baseoptionbutton2.Name = "baseoptionbutton2", ;
		baseoptionbutton2.Top = 5
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtName' AS basetextbox WITH ;
		Anchor = 10, ;
		Format = "T", ;
		Left = 61, ;
		Name = "txtName", ;
		TabIndex = 2, ;
		Top = 6, ;
		Width = 221
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		local lcCaption, ;
			laObject[1], ;
			loObject
		with This
			dodefault()
		
		* Get a reference to the selected object. If there isn't one, bug out.
		
			lcCaption = iif(.lMethod, ccLOC_CAP_NEW_METHOD, ccLOC_CAP_NEW_PROPERTY)
			if aselobj(laObject, 1) = 0
				This.Release()
				return .F.
			endif aselobj(laObject, 1) = 0
		
		* Determine whether we're being used from the Class or Form Designer. Adjust
		* the form appropriately.
		
			aselobj(laObject, 3)
			.lClass = lower(justext(laObject[1, 2])) = 'vcx'
			.AdjustForm()
		
		* Make sure it's the form or class itself that we're working with, regardless
		* of what's selected.
		
			.oObject = FindTopMostParent(laObject[1], .lClass)
		
		* Include the class/form and VCX/SCX name in the Caption.
		
			.Caption = lcCaption + ' - ' + iif(.lClass, .oObject.Name + ' (', '') + ;
				justfname(laObject[1, 2]) + iif(.lClass, ')', '')
		endwith
		
	ENDPROC

	PROCEDURE addmembertoobject		&& Adds the property or method to the object
		local lcName, ;
			lnVisibility, ;
			llAccess, ;
			llAssign, ;
			llFavorites, ;
			lcDefault, ;
			lcDescription, ;
			llReturn, ;
			lcCode, ;
			lcScriptFile, ;
			loException as Exception
		with This
		
		* Get the values to use for the new member.
		
			lcName        = .txtName.Value
			lnVisibility  = .cboVisibility.ListIndex
			llAccess      = .chkAccess.Value
			llAssign      = .chkAssign.Value
			llFavorites   = .chkFavorites.Value
			lcDefault     = .edtDefault.Value
			lcDescription = .edtDescription.Value
			llReturn      = .T.
			do case
		
		* If the member already exists, display a warning. This should be handled in
		* txtName.Valid, but just in case.
		
				case pemstatus(.oObject, lcName, 5)
					messagebox(strtran(ccLOC_MEMBER_EXISTS, '<Insert1>', lcName), ;
						MB_OK + MB_ICONEXCLAMATION, .Caption)
					.txtName.SetFocus()
					llReturn = .F.
		
		* Add the method.
		
				case .lMethod
					.oObject.WriteMethod(lcName, '', .T., lnVisibility, lcDescription)
		
		* Add the property, and access and/or assign methods as necessary.
		
				otherwise
					.oObject.AddProperty(lcName, lcDefault, lnVisibility, ;
						lcDescription)
					if llAccess
						lcCode = strtran(ccACCESS_CODE, '<Insert1>', lcName) + chr(13)
						.oObject.WriteMethod(lcName + '_Access', lcCode, .T.)
					endif llAccess
					if llAssign
						lcCode = strtran(ccASSIGN_CODE, '<Insert1>', lcName) + chr(13)
						.oObject.WriteMethod(lcName + '_Assign', lcCode, .T.)
					endif llAssign
			endcase
		
		* If this member should go on the Favorites tab or its name wasn't entered in
		* lower case, let's update the Member Data for the object.
		
			if llReturn and (llFavorites or lower(lcName) <> lcName)
				.UpdateMemberData(lcName, llFavorites)
				if llAccess
					.UpdateMemberData(lcName + '_Access', llFavorites)
				endif llAccess
				if llAssign
					.UpdateMemberData(lcName + '_Assign', llFavorites)
				endif llAssign
			endif llReturn ...
		
		* If everything was successful and we have a script to execute, do so.
		
			lcScriptFile = forcepath('NewPropertyDialogScript.prg', home(7))
			if file(lcScriptFile)
				try
					do (lcScriptFile) with .lClass, .lMethod, lcName, lnVisibility, ;
						llAccess, llAssign, llFavorites, lcDefault, lcDescription, ;
						.oObject
				catch to loException
					messagebox('Script file: NewPropertyDialogScript.prg' + ccCRLF + ;
						'Location: ' + displaypath(home(7), 80) + ccCRLF + ;
						'Error: ' + transform(loException.ErrorNo) + ccCRLF + ;
						'Message: ' + loException.Message + ccCRLF + ;
						'Line: ' + transform(loException.LineNo) + ccCRLF + ;
						'Code: ' + loException.LineContents, ;
						MB_OK + MB_ICONEXCLAMATION, 'Script Failure')
				endtry
			endif file(lcScriptFile)
		endwith
		return llReturn
		
	ENDPROC

	PROCEDURE adjustform		&& Adjusts the form based on the dialog and edited object types
		local lnAnchor, ;
			lnAdjust
		with This
		
		* Set the Anchor property of edtDescription so its Top doesn't change while we
		* manually size the form.
		
			lnAnchor = .edtDescription.Anchor
			.edtDescription.Anchor = 10
			do case
		
		* If we're being called from the Form Designer and we haven't already done so,
		* hide the Visibility combo and adjust the positions of the other controls.
		
				case not .lClass and not .lAdjustedForClass
					.lblVisibility.Visible = .F.
					.cboVisibility.Visible = .F.
					store .lblVisibility.Top to .chkAccess.Top, .chkAssign.Top, ;
						.chkFavorites.Top
					lnAdjust = .lblDefault.Top - .cmdClose.Top - .cmdClose.Height/2
					.lblDefault.Top        = .lblDefault.Top     - lnAdjust
					.edtDefault.Top        = .edtDefault.Top     - lnAdjust
					.lblDescription.Top    = .lblDescription.Top - lnAdjust
					.edtDescription.Top    = .edtDescription.Top - lnAdjust
					.edtDescription.Height = .edtDescription.Height + lnAdjust
					.lAdjustedForClass     = .T.
		
		* If we're being called from the Class Designer and we previously adjusted the
		* form, undo the adjustments.
		
				case .lClass and .lAdjustedForClass
					.lblVisibility.Visible = .T.
					.cboVisibility.Visible = .T.
					for lnI = 1 to .oPositions.Count
						lcProperty = .oPositions.GetKey(lnI)
						lnValue    = .oPositions.Item(lnI)
						store lnValue to ('.' + lcProperty)
					next lnI
					.lAdjustedForClass = .F.
			endcase
		
		* If this is the "New Method" dialog, adjust the dialog accordingly.
		
			do case
				case .lMethod and not .lAdjustedForMethod
					.chkAccess.Visible     = .F.
					.chkAssign.Visible     = .F.
					.lblDefault.Visible    = .F.
					.edtDefault.Visible    = .F.
					.chkFavorites.Left     = .chkAccess.Left
					lnAdjust               = .lblDescription.Top - .lblDefault.Top
					.lblDescription.Top    = .lblDefault.Top
					.edtDescription.Top    = .edtDefault.Top
					.edtDescription.Height = .edtDescription.Height + lnAdjust
					.lAdjustedForMethod    = .T.
				case not .lMethod and .lAdjustedForMethod
					.chkAccess.Visible     = .T.
					.chkAssign.Visible     = .T.
					.lblDefault.Visible    = .T.
					.edtDefault.Visible    = .T.
					.chkFavorites.Left     = .oPositions.Item('chkFavorites.Left')
					lnAdjust               = .oPositions.Item('lblDescription.Top') - ;
						.oPositions.Item('lblDefault.Top')
					.lblDescription.Top    = .lblDescription.Top + lnAdjust
					.edtDescription.Top    = .edtDescription.Top + lnAdjust
					.edtDescription.Height = .edtDescription.Height - lnAdjust
					.lAdjustedForMethod    = .F.
			endcase
		
		* Restore the anchor for edtDescription.
		
			.edtDescription.Anchor = lnAnchor
		endwith
		
	ENDPROC

	PROCEDURE clearform		&& Clears the controls so the form is ready for a new member
		* Clear the controls so the form is ready for a new member.
		
		with This
			store '' to .txtName.Value, .edtDefault.Value, .edtDescription.Value
			store .F. to .chkAccess.Value, .chkAssign.Value, .chkFavorites.Value
			.RefreshForm()
			.cboVisibility.ListIndex = 1
			.txtName.SetFocus()
		endwith
		
	ENDPROC

	PROCEDURE Init
		lparameters tlMethod, ;
			tlClass
		local loPersist, ;
			loControl
		with This
			dodefault()
		
		* Use the MemberData Editor setting about adding a CR after each item.
		
			loPersist = newobject('FoxResource', 'FoxResource.prg')
			loPersist.Load('MEMBERDATAED', 'MemberDataEditor')
			.lAddCR = nvl(loPersist.Get('lAddCR'), .lAddCR)
		
		* Save the tlMethod and tlClass parameters.
		
			.lMethod = tlMethod
			.lClass  = tlClass
		
		* Create a collection of original object positions.
		
			.oPositions = createobject('Collection')
			for each loControl in .Objects
				.oPositions.Add(loControl.Top, loControl.Name + '.Top')
			next loControl
			.oPositions.Add(.edtDescription.Height, 'edtDescription.Height')
			.oPositions.Add(.chkFavorites.Left,     'chkFavorites.Left')
		
		* Declare the MessageBeep function.
		
			declare integer MessageBeep in Win32API integer wType
		endwith
		
	ENDPROC

	PROCEDURE restoresettings
		* I'm not sure why this is necessary, but without it, edtDescription isn't
		* resized when the form's size is restored.
		
		local lnHeight, ;
			lnWidth
		lnHeight = This.Height
		lnWidth  = This.Width
		dodefault()
		This.edtDescription.Height = This.edtDescription.Height + This.Height - lnHeight
		This.edtDescription.Width  = This.edtDescription.Width  + This.Width  - lnWidth
		
	ENDPROC

	PROCEDURE savesettings
		* In addition to the usual settings, persist Dockable.
		
		with This
			.oPersist.Set('Dockable', .Dockable)
			dodefault()
		endwith
		
	ENDPROC

	PROCEDURE Show
		* Restore the Dockable setting if we're not being invoked modally. We have to
		* do it here because the form becomes visible as soon as Dockable is set to 1,
		* so we don't want this done earlier.
		
		lparameters tnStyle
		local lnTop
		with This
			if vartype(tnStyle) <> 'N' or tnStyle <> 1
				lnTop     = .Top
				.Dockable = nvl(.oPersist.Get('Dockable'), 1)
				.Top      = lnTop
			endif vartype(tnStyle) <> 'N' ...
		endwith
		dodefault(tnStyle)
		
	ENDPROC

	PROCEDURE updatememberdata		&& Updates _MemberData (adding that property if necessary) for the new member
		lparameters tcName, ;
			tlFavorites
		local loXML as msxml2.DOMDocument, ;
			llOK, ;
			lcType, ;
			lcName, ;
			lnPos, ;
			loNode as msxml2.IXMLDOMElement, ;
			loRoot as msxml2.IXMLDOMElement, ;
			lcMemberData
		with This
		
		* Create the _MemberData property if necessary.
		
			if not pemstatus(.oObject, '_MemberData', 5)
				.oObject.AddProperty('_MemberData', '')
			endif not pemstatus(.oObject, '_MemberData', 5)
		
		* Create an XML DOM object and load the existing MemberData (if there is any).
		
			loXML = createobject(ccXML_DOM_CLASS)
			loXML.async = .F.
			llOK = .T.
			if not empty(.oObject._MemberData) and ;
				not loXML.loadXML(.oObject._MemberData)
				messagebox(ccLOC_INVALID_XML, MB_OK + MB_ICONEXCLAMATION, .Caption)
				llOK = .F.
			endif not empty(.oObject._MemberData) ...
		
		* If everything is OK, add a node for the new member to the XML. Strip off the
		* index if this is an array property.
		
			if llOK
				lcType = iif(.lMethod, 'method', 'property')
				lcName = tcName
				lnPos  = at('[', lcName)
				if lnPos > 0
					lcName = left(lcName, lnPos - 1)
				else
					lnPos = at('(', lcName)
					if lnPos > 0
						lcName = left(lcName, lnPos - 1)
					endif lnPos > 0
				endif lnPos > 0
				loNode = loXML.createElement(ccMEMBER_DATA_XML_ELEMENT)
				loNode.setAttribute('name',    lower(lcName))
				loNode.setAttribute('type',    lcType)
				loNode.setAttribute('display', lcName)
				if tlFavorites
					loNode.setAttribute('favorites', ccXML_TRUE)
				endif tlFavorites
		
		* Get the root node of the MemberData XML. If it doesn't exist, create it.
		
				loRoot = loXML.selectSingleNode('/' + ccXML_ROOT_NODE)
				if vartype(loRoot) <> 'O'
					loRoot = loXML.createElement(ccXML_ROOT_NODE)
					loXML.appendChild(loRoot)
				endif vartype(loRoot) <> 'O'
		
		* Add the new node to the root node and add line breaks if desired.
		
				loRoot.appendChild(loNode)
				lcMemberData = loXML.xml
				if .lAddCR
					lcMemberData = strtran(lcMemberData, '>' + ccCRLF, '>')
					lcMemberData = strtran(lcMemberData, '>' + ccCR, '>')
					lcMemberData = strtran(lcMemberData, '>' + ccLF, '>')
					lcMemberData = strtran(lcMemberData, '>' + ccTAB, '>')
					lcMemberData = strtran(lcMemberData, '>', '>' + ccCR)
				endif .lAddCR
		
		* put the XML into _MemberData as long as it doesn't exceed the maximum length.
		
				if len(lcMemberData) >= cnMAX_MEMBER_DATA_SIZE
					messagebox(ccLOC_STRING_TOO_LONG, MB_OK + MB_ICONEXCLAMATION, ;
						.Caption)
					llReturn = .F.
				else
					.oObject._MemberData = lcMemberData
				endif len(lcMemberData) >= cnMAX_MEMBER_DATA_SIZE
			endif llOK
		endwith
		
	ENDPROC

	PROCEDURE cboVisibility.Init
		* Set the default visibility to "Public".
		
		This.ListIndex = 1
		
	ENDPROC

	PROCEDURE chkAccess.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_ACCESS
		
	ENDPROC

	PROCEDURE chkAssign.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_ASSIGN
		
	ENDPROC

	PROCEDURE chkFavorites.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_FAVORITES
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		* Try to add the member to the object. If we succeeded, clear the form so the
		* user can enter another one.
		
		with Thisform
			if .AddMemberToObject()
				.ClearForm()
			endif .AddMemberToObject()
		endwith
		
	ENDPROC

	PROCEDURE cmdAdd.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_ADD
		
	ENDPROC

	PROCEDURE cmdAdd.Refresh
		* This button is only enabled if a name was entered.
		
		This.Enabled = not empty(Thisform.txtName.Value)
		
	ENDPROC

	PROCEDURE cmdAddClose.Click
		* Add the member to the object and, if it succeeded, close the form.
		
		if Thisform.AddMemberToObject()
			Thisform.Release()
		endif Thisform.AddMemberToObject()
		
	ENDPROC

	PROCEDURE cmdAddClose.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_ADD_CLOSE
		
	ENDPROC

	PROCEDURE cmdAddClose.Refresh
		* This button is only enabled if a name was entered.
		
		This.Enabled = not empty(Thisform.txtName.Value)
		
	ENDPROC

	PROCEDURE cmdClose.Click
		* Close the form.
		
		Thisform.Release()
		
	ENDPROC

	PROCEDURE cmdClose.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_CLOSE
		
	ENDPROC

	PROCEDURE edtDefault.KeyPress
		* Don't allow a CR.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = 13
			MessageBeep(MB_ICONSTOP)
			nodefault
		else
			dodefault(tnKeyCode, tnShiftAltCtrl)
		endif tnKeyCode = 13
		
	ENDPROC

	PROCEDURE edtDefault.Refresh
		* This is disabled if we're adding an array property.
		
		This.Enabled = not '[' $ Thisform.txtName.Value and ;
			not '(' $ Thisform.txtName.Value
		
	ENDPROC

	PROCEDURE edtDescription.KeyPress
		* Don't allow a CR.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = 13
			MessageBeep(MB_ICONSTOP)
			nodefault
		else
			dodefault(tnKeyCode, tnShiftAltCtrl)
		endif tnKeyCode = 13
		
	ENDPROC

	PROCEDURE lblDefault.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_DEFAULT
		
	ENDPROC

	PROCEDURE lblDescription.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_DESCRIPTION
		
	ENDPROC

	PROCEDURE lblname.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_NAME
		
	ENDPROC

	PROCEDURE lblType.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_MEMBER_TYPE
	ENDPROC

	PROCEDURE lblVisibility.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_VISIBILITY
		
	ENDPROC

	PROCEDURE opgType.baseoptionbutton1.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_PROPERTY
	ENDPROC

	PROCEDURE opgType.baseoptionbutton2.Init
		* Set the caption to a localized string.
		
		This.Caption = ccLOC_CAP_METHOD
	ENDPROC

	PROCEDURE opgType.InteractiveChange
		Thisform.lMethod = This.Value = 2
		Thisform.AdjustForm()
		
	ENDPROC

	PROCEDURE opgType.Refresh
		This.Value = iif(Thisform.lMethod, 2, 1)
		
	ENDPROC

	PROCEDURE txtName.InteractiveChange
		* Refresh the buttons so they're enabled properly.
		
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtName.KeyPress
		* Disallow illegal characters.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		local lcChar
		if between(tnKeyCode, asc(' '), asc('z'))
			lcChar = chr(tnKeyCode)
			if not (isalpha(lcChar) or (isdigit(lcChar) and len(This.Value) >= 1) or ;
				inlist(lcChar, '_', '[', ']', '(', ')', ','))
				MessageBeep(MB_ICONSTOP)
				wait window ccLOC_INVALID_CHAR nowait
				nodefault
			endif not (isalpha(lcChar) ...
		endif between(tnKeyCode, asc(' '), asc('z'))
		
	ENDPROC

	PROCEDURE txtName.Valid
		local lcName, ;
			luReturn, ;
			lcFirst, ;
			lcSecond
		with Thisform
			lcName = This.Value
			do case
		
		* If the user is cancelling, do nothing.
		
				case lastkey() = 27
					luReturn = .T.
		
		* If the member already exists, display a warning.
		
				case pemstatus(.oObject, lcName, 5)
					messagebox(strtran(ccLOC_MEMBER_EXISTS, '<Insert1>', lcName), ;
						MB_OK + MB_ICONEXCLAMATION, .Caption)
					luReturn = 0
		
		* Assign a default value based on the data type of the property (if we can
		* determine it).
		
				otherwise
					lcFirst  = left(lcName, 1)
					lcSecond = substr(lcName, 2, 1)
					do case
						case .lMethod or not empty(.edtDefault.Value) or ;
							not islower(lcFirst) or not isupper(lcSecond)
						case lcFirst = 'l'
							.edtDefault.Value = '.F.'
						case inlist(lcFirst, 'n', 'i', 'b', 'y')
							.edtDefault.Value = '0'
						case lcFirst = 'd'
							.edtDefault.Value = '{}'
						case lcFirst = 't'
							.edtDefault.Value = '{:/}'
						case lcFirst = 'o'
							.edtDefault.Value = '.NULL.'
					endcase
					luReturn = .T.
			endcase
		endwith
		return luReturn
		
	ENDPROC

ENDDEFINE
