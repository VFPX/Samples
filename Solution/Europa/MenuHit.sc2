*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="menuhit.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 102
	Name = "Dataenvironment"
	Top = 446
	Width = 520

ENDDEFINE

DEFINE CLASS frmsolution1 AS frmsolution OF "..\solution.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditMenuHit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEnableMenuHit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNewPropSample" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditMenuContext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEnableMenuContext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNPSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNPDisable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNPScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMenuContextSample" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMCDisable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMCScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label10" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addscript
		*m: checkscripts
		*m: editscript
		*m: getdefaultmenucontextscript
		*m: getdefaultmenuhitscript
		*p: nstartwidth
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Foxcode Menu Scripts"
	DoCreate = .T.
	Height = 511
	MinWidth = 200
	Name = "Frmsolution1"
	ShowTips = .F.
	Width = 599
	_memberdata = <VFPData>

		</VFPData>		&& XML Metadata for customizable properties
	Behindscenes1.Anchor = 6
	Behindscenes1.Left = 12
	Behindscenes1.Name = "Behindscenes1"
	Behindscenes1.TabIndex = 22
	Behindscenes1.Top = 480
	Behindscenes1.ZOrderSet = 3
	Cmdclose1.Anchor = 12
	Cmdclose1.Height = 23
	Cmdclose1.Left = 516
	Cmdclose1.Name = "Cmdclose1"
	Cmdclose1.TabIndex = 23
	Cmdclose1.Top = 480
	Cmdclose1.Width = 72
	Cmdclose1.ZOrderSet = 6
	C_solutions1.fixedformborder = .F.
	C_solutions1.Left = 48
	C_solutions1.Name = "C_solutions1"
	C_solutions1.Top = 480
	label1.Anchor = 10
	label1.Caption = "You can create custom IntelliSense scripts in your Foxcode table that provide extensibility for Visual FoxPro menus."
	label1.Height = 25
	label1.Left = 24
	label1.Name = "label1"
	label1.TabIndex = 2
	label1.Top = 23
	label1.Width = 552
	label1.ZOrderSet = 8
	Label4.Left = 17
	Label4.Name = "Label4"
	Label4.TabIndex = 1
	Label4.Top = 5
	Label4.ZOrderSet = 4
	Shape2.Anchor = 10
	Shape2.Height = 36
	Shape2.Left = 12
	Shape2.Name = "Shape2"
	Shape2.Top = 12
	Shape2.Width = 576
	Shape2.ZOrderSet = 5

	ADD OBJECT 'cmdEditMenuContext' AS commandbutton WITH ;
		Caption = "View/Edit Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 120, ;
		Name = "cmdEditMenuContext", ;
		TabIndex = 18, ;
		Top = 432, ;
		Width = 96
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditMenuHit' AS commandbutton WITH ;
		Caption = "View/Edit Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 122, ;
		Name = "cmdEditMenuHit", ;
		TabIndex = 8, ;
		Top = 204, ;
		Width = 96
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdEnableMenuContext' AS commandbutton WITH ;
		Caption = "Enable Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 24, ;
		Name = "cmdEnableMenuContext", ;
		TabIndex = 17, ;
		Top = 432, ;
		Width = 96
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdEnableMenuHit' AS commandbutton WITH ;
		Caption = "Enable Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 24, ;
		Name = "cmdEnableMenuHit", ;
		TabIndex = 7, ;
		Top = 204, ;
		Width = 96
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdMCDisable' AS commandbutton WITH ;
		Caption = "Disable Sample", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 408, ;
		Name = "cmdMCDisable", ;
		TabIndex = 20, ;
		Top = 432, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdMCScript' AS commandbutton WITH ;
		Caption = "View Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 492, ;
		Name = "cmdMCScript", ;
		TabIndex = 21, ;
		Top = 432, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdMenuContextSample' AS commandbutton WITH ;
		Caption = "Install Shortcut Menu Sample", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 408, ;
		Name = "cmdMenuContextSample", ;
		TabIndex = 19, ;
		Top = 408, ;
		Width = 168
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNewPropSample' AS commandbutton WITH ;
		Caption = "Install New Properties Dialog Sample", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 324, ;
		Name = "cmdNewPropSample", ;
		TabIndex = 9, ;
		Top = 204, ;
		Width = 252
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNPDisable' AS commandbutton WITH ;
		Caption = "Disable Sample", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 324, ;
		Name = "cmdNPDisable", ;
		TabIndex = 10, ;
		Top = 228, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNPScript' AS commandbutton WITH ;
		Caption = "View Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 408, ;
		Name = "cmdNPScript", ;
		TabIndex = 11, ;
		Top = 228, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNPSource' AS commandbutton WITH ;
		Caption = "View Source", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 492, ;
		Name = "cmdNPSource", ;
		TabIndex = 12, ;
		Top = 228, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label10' AS label WITH ;
		AutoSize = .F., ;
		Caption = "The Sample uses the MenuContext script to replace the shortcut menu displayed when you right-click on a property in the Properties Window.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 24, ;
		Name = "Label10", ;
		TabIndex = 16, ;
		Top = 372, ;
		Width = 540, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "MenuHit Script", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 24, ;
		Name = "Label2", ;
		Style = 3, ;
		TabIndex = 3, ;
		Top = 64, ;
		Width = 97, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		Caption = "MenuContext Script", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 24, ;
		Name = "Label3", ;
		Style = 3, ;
		TabIndex = 13, ;
		Top = 280, ;
		Width = 130, ;
		ZOrderSet = 10
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		Caption = "This script is called when a Visual FoxPro system menu is chosen. For example, it can be used to override an existing Visual FoxPro dialog box with a custom dialog box.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 24, ;
		Name = "Label5", ;
		TabIndex = 4, ;
		Top = 84, ;
		Width = 559, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = "This script is called just before a Visual FoxPro shortcut menu is displayed and can be used to override an existing Visual FoxPro shortcut menu with a custom shortcut menu.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 24, ;
		Name = "Label6", ;
		TabIndex = 14, ;
		Top = 300, ;
		Width = 545, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Click on the Enable button to install a generic Menuhit script that can be used for multiple menu handlers. Once installed, you can view and make changes to the script.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 24, ;
		Name = "Label7", ;
		TabIndex = 5, ;
		Top = 120, ;
		Width = 532, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label8' AS label WITH ;
		AutoSize = .T., ;
		Caption = "The Sample uses the Menuhit script to replace the native New Property and New Method dialogs available in the Form/Class Designer with custom ones that integrate MemberData extensibility. Menuhit lookup records are added to FoxCode to handle this.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 24, ;
		Name = "Label8", ;
		TabIndex = 6, ;
		Top = 156, ;
		Width = 538, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label9' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Click on the Enable button to install a generic MenuContext script that can be used to override a Visual FoxPro shortcut menu. Once installed, you can view and make changes to the script.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 24, ;
		Name = "Label9", ;
		TabIndex = 15, ;
		Top = 336, ;
		Width = 530, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 192, ;
		Left = 12, ;
		Name = "Shape1", ;
		Style = 3, ;
		Top = 72, ;
		Width = 576, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape3' AS shape WITH ;
		Height = 180, ;
		Left = 12, ;
		Name = "Shape3", ;
		Style = 3, ;
		Top = 288, ;
		Width = 576, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE addscript
		LPARAMETERS tcType, tcAction
		
		* Add the records to FOXCODE.
		LOCAL lnSelect, lcMenuHitCode, lcSource, lcScript, lFound, lcAction
		
		lcAction = ALLTRIM(UPPER(GETWORDNUM(tcAction,1)))
		
		lnSelect = SELECT()
		SELECT 0
		
		IF lcAction = "ENABLE"
			lcMenuHitCode = IIF(ATC("MenuContext",tcType)#0,THIS.GetDefaultMenucontextScript(),THIS.GetDefaultMenuhitScript())
		ENDIF
		lcScript = IIF(ATC("MenuContext",tcType)#0,"MENUCONTEXT","MENUHIT")
		lcSource = "MSSolution"
		
		USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
		lFound = SEEK('S'+lcScript)
		
		DO CASE
		CASE lcAction = "ENABLE" AND !lFound
			* Check if record previously added
			IF SEEK('SMS_'+lcScript)
				REPLACE Abbrev WITH lcScript
			ELSE
				INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
					VALUES ('S', lcScript, lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))
			ENDIF
			MESSAGEBOX("The " + PROPER(tcType) + " script has been enabled in your Foxcode table.")
			
		CASE lcAction = "ENABLE" AND lFound
			* User already has a script
			IF ATC("MSSolution",Source)=0	&& not installed by MS
				IF MESSAGEBOX("A Foxcode script already exists. Would you like to overwrite with this generic handler? If Yes, a backup of your existing script will be saved.",36)=6
					REPLACE Abbrev WITH "XX_"+lcScript
					INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
						VALUES ('S', lcScript, lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))
				ENDIF
			ENDIF
			
		CASE lcAction = "DISABLE" AND lFound
			REPLACE Abbrev WITH "MS_"+lcScript
			MESSAGEBOX("The " + PROPER(tcType) + " script has been disabled in your Foxcode table.")
		
		OTHERWISE
			* User wants to disable but script is not found -- should not happen
			
		ENDCASE
		
		USE
		SELECT (lnSelect)
		
		THIS.CheckScripts()
	ENDPROC

	PROCEDURE checkscripts
		* Add the records to FOXCODE.
		LOCAL lnSelect,lSeek
		lnSelect = SELECT()
		SELECT 0
		
		TRY
			USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
		
			* Check MenuHit Handler Script
			IF SEEK("SMENUHIT") AND ATC("MSSolution",Source)#0
				THIS.cmdEnableMenuHit.Caption = "Disable Script"
			ELSE
				THIS.cmdEnableMenuHit.Caption = "Enable Script"	
			ENDIF
			THIS.cmdEditMenuHit.Enabled = ATC("Disable",THIS.cmdEnableMenuHit.Caption)#0
			
			* Check MenuContext Handler Script
			IF SEEK("SMENUCONTEXT") AND ATC("MSSolution",Source)#0
				THIS.cmdEnableMenuContext.Caption = "Disable Script"	
			ELSE
				THIS.cmdEnableMenuContext.Caption = "Enable Script"		
			ENDIF
			THIS.cmdEditMenuContext.Enabled = ATC("Disable",THIS.cmdEnableMenuContext.Caption)#0
		
			* Check Sample Menuhit Scripts
			lSeek = SEEK("MNEW PROPERTY...")
			THIS.cmdNPDisable.Enabled  = lSeek
			THIS.cmdNPScript.Enabled = lSeek
		
			* Check Sample MenuContext Script
			lSeek = SEEK("M24460")
			THIS.cmdMCDisable.Enabled  = lSeek
			THIS.cmdMCScript.Enabled = lSeek
		
			USE
		CATCH
			MESSAGEBOX("This sample may not function properly since your Foxcode table may be in use.")
		ENDTRY
		
		SELECT (lnSelect)
		
	ENDPROC

	PROCEDURE editscript
		LPARAMETERS tcType
		
		* Add the records to FOXCODE.
		LOCAL lnSelect
		lnSelect = SELECT()
		SELECT 0
		
		TRY
			USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
			IF SEEK(tcType)
				MODIFY MEMO Data
			ENDIF
			USE
		CATCH
		ENDTRY
		
		SELECT (lnSelect)
		
	ENDPROC

	PROCEDURE getdefaultmenucontextscript
		LOCAL lcMenuCode
		
		TEXT TO lcMenuCode TEXTMERGE NOSHOW
		LPARAMETERS toParameter
		
		LOCAL lnSelect, lcCode, llReturn, lScriptHandled
		
		TRY
			* First try FoxCode lookup for Type="M" records
			lnSelect = SELECT()
			SELECT 0
			USE (_FOXCODE) AGAIN SHARE ORDER 1
			IF SEEK('M' + PADR(UPPER(toParameter.MenuItem), LEN(ABBREV)))
				lcCode = DATA
			ENDIF
			USE
			SELECT (lnSelect)
			IF NOT EMPTY(lcCode)
				llReturn = EXECSCRIPT(lcCode, toParameter)
				lScriptHandled=.T.
			ENDIF
			
			* Handle by passing to external routine as specified in Tip field
			IF !lScriptHandled
				lcProgram = ALLTRIM(toParameter.Tip)
				IF FILE(lcProgram)
					DO (lcProgram) WITH toParameter,llReturn
				ENDIF
			ENDIF
			
			* Custom script successful so let's disable native behavior
			IF llReturn
				toParameter.ValueType = 'V'
			ENDIF
		CATCH
		ENDTRY
		
		RETURN llReturn
		
		ENDTEXT
		
		RETURN lcMenuCode
	ENDPROC

	PROCEDURE getdefaultmenuhitscript
		LOCAL lcMenuCode
		
		TEXT TO lcMenuCode TEXTMERGE NOSHOW
		LPARAMETERS toParameter
		
		LOCAL lnSelect, lcCode, llReturn, lScriptHandled
		
		TRY
			* First try FoxCode lookup for Type="M" records
			lnSelect = SELECT()
			SELECT 0
			USE (_FOXCODE) AGAIN SHARE ORDER 1
			IF SEEK('M' + PADR(UPPER(toParameter.MenuItem), LEN(ABBREV)))
				lcCode = DATA
			ENDIF
			USE
			SELECT (lnSelect)
			IF NOT EMPTY(lcCode)
				llReturn = EXECSCRIPT(lcCode, toParameter)
				lScriptHandled=.T.
			ENDIF
			
			* Handle by passing to external routine as specified in Tip field
			IF !lScriptHandled
				lcProgram = ALLTRIM(toParameter.Tip)
				IF FILE(lcProgram)
					DO (lcProgram) WITH toParameter,llReturn
				ENDIF
			ENDIF
			
			* Custom script successful so let's disable native behavior
			IF llReturn
				toParameter.ValueType = 'V'
			ENDIF
		CATCH
		ENDTRY
		
		RETURN llReturn
		
		ENDTEXT
		
		RETURN lcMenuCode
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		THIS.CheckScripts()
	ENDPROC

	PROCEDURE cmdEditMenuContext.Click
		THISFORM.Editscript("SMENUCONTEXT")
	ENDPROC

	PROCEDURE cmdEditMenuHit.Click
		THISFORM.Editscript("SMENUHIT")
	ENDPROC

	PROCEDURE cmdEnableMenuContext.Click
		THISFORM.AddScript("MENUCONTEXT",ALLTRIM(THIS.Caption))
		
	ENDPROC

	PROCEDURE cmdEnableMenuHit.Click
		THISFORM.AddScript("MENUHIT",ALLTRIM(THIS.Caption))
		
	ENDPROC

	PROCEDURE cmdMCDisable.Click
		LOCAL lnSelect
		
		lnSelect = SELECT()
		SELECT 0
		TRY
			USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
			IF SEEK('M24460')	
				REPLACE Abbrev WITH 'MS_24460'
			ENDIF
		
			* Check for prior existing script and prompt to replace
			IF SEEK('MXX_24460')
				IF MESSAGEBOX("You have a previously existing MenuContext script for this shortcut menu. Would you like to restore it?",36)=6
					REPLACE Abbrev WITH '24460'
				ENDIF
			ENDIF
			
			USE
		CATCH
		ENDTRY
		SELECT (lnSelect)
		THISFORM.Checkscripts()
		MESSAGEBOX("The sample MenuContext script has been disabled in your Foxcode table.")
		
	ENDPROC

	PROCEDURE cmdMCScript.Click
		THISFORM.Editscript("M24460")
	ENDPROC

	PROCEDURE cmdMenuContextSample.Click
		LOCAL lnSelect, lcMenuHitCode, lcSource, lnOverwrite
		
		lnSelect = SELECT()
		lnOverwrite=6
		SELECT 0
		
		lcSource = "MSSolution"
		
		TEXT to lcMenuHitCode NOSHOW TEXTMERGE
		LPARAMETER oParm
		
		LOCAL lcPEM, laObjs, laDock, lnPos, lnRow, lnCol, lnDockPos, lcWin
		
		lcPEM = oParm.UserTyped
		lnDockPos = 0
		
		DIMENSION laObjs[1]
		DO CASE
		CASE ASELOBJ(laObjs) # 0
			loObject = laObjs[1]
		CASE ASELOBJ(laObjs,1) # 0
			loObject = laObjs[1]
		OTHERWISE
			loObject=_SCREEN
		ENDCASE
		
		ACTIVATE SCREEN
		lnRow = MROW("")
		lnCol = MCOL("")
		
		IF lnCol = -1
			DIMENSION laDock[1]
			ADOCKSTATE(laDock)
			lnPos = ASCAN(laDock, "PROPERTIES", -1, -1, 1, 14)
			IF laDock[lnPos, 2] = 1				&& Properties Window is not docked or docked to desktop
				IF EMPTY(laDock[lnPos, 4]) OR laDock[lnPos, 4] == _SCREEN.Caption 	&& check if docked to another window
					lnDockPos = laDock[lnPos, 3]			
				ELSE
					* we need to traverse through other windows to find actual dock location
					lcWin = laDock[lnPos, 4]
					DO WHILE .T.
						lnPos = ASCAN(laDock, lcWin, -1, -1, 1, 14)
						DO CASE
						CASE lnPos = 0
							* Yikes
							EXIT
						CASE EMPTY(laDock[lnPos, 4]) OR laDock[lnPos, 4] == _SCREEN.Caption 	
							lnDockPos = laDock[lnPos, 3]
							EXIT
						OTHERWISE
							lcWin = laDock[lnPos, 4]
						ENDCASE
					ENDDO
				ENDIF		
				DO CASE
				CASE lnDockPos  = 1
					lnCol = 0 - WCOL("Properties") + (MCOL("Properties",3)/FONTMETRIC(6,_SCREEN.FontName,_SCREEN.FontSize))
				CASE lnDockPos = 2
					lnCol = WCOL("") + (MCOL("Properties",3)/FONTMETRIC(6,_SCREEN.FontName,_SCREEN.FontSize))
				ENDCASE		
			ENDIF
		ENDIF
		
		DEFINE POPUP myPopup FROM lnRow, lnCol SHORTCUT
		
		DEFINE BAR 1 OF myPopup PROMPT "\<Reset to Default"
		DEFINE BAR 2 OF myPopup PROMPT "Add to \<Favorites"
		DEFINE BAR 3 OF myPopup PROMPT "\-"
		DEFINE BAR 4 OF myPopup PROMPT "\<MemberData Editor..."
		DEFINE BAR 5 OF myPopup PROMPT "\<Hello World"
		
		ON SELECTION BAR 1 OF myPopup loObject.ResetToDefault(lcPEM)
		ON SELECTION BAR 2 OF myPopup DO (_BUILDER) with loObject, "MemberData", 11, lcPem
		ON SELECTION BAR 4 OF myPopup DO (_BUILDER) with loObject, "MemberData", 1, lcPem
		ON SELECTION BAR 5 OF myPopup MESSAGEBOX("Hello World")
		
		ACTIVATE POPUP myPopup
		
		RETURN .T.
		
		ENDTEXT
		
		TRY
			USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
			IF SEEK('M24460')
				IF ATC("MSSolution",Source)=0
					lnOverwrite=MESSAGEBOX("A MenuContext script for this already exists. Would you like to overwrite it? If Yes, a backup of your existing script will be saved.",36)
					IF lnOverwrite=6
						REPLACE Abbrev WITH 'XX_24460'
						INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
							VALUES ('M', '24460', lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))
					ENDIF
				ELSE
					MESSAGEBOX("A MenuContext script for this is already installed.")
				ENDIF
			ELSE
				IF SEEK('MMS_24460')	&& see if previously disabled
					REPLACE Abbrev WITH '24460'
				ELSE
					INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
						VALUES ('M', '24460', lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))
				ENDIF
			ENDIF
			
			USE
		CATCH
		ENDTRY
		SELECT (lnSelect)
		
		IF !THISFORM.cmdEnableMenuContext.Enabled
			MESSAGEBOX("The sample Properties Window MenuContext script has been enabled. However, you first need to enable the MenuContext script.")
		ELSE
			MESSAGEBOX("The sample Properties Window MenuContext script has been enabled in your Foxcode table.")
		ENDIF
		
		THISFORM.CheckScripts()
	ENDPROC

	PROCEDURE cmdNewPropSample.Click
		LOCAL lnSelect, lcMenuHitCode, lcSource, lcPath, lnOverwrite
		
		lnSelect = SELECT()
		lnOverwrite=6
		SELECT 0
		
		lcPath = ADDBS(JUSTPATH(SYS(1271, THISFORM))) + "NewProp\"
		
		lcSource = "MSSolution"
		
		TEXT to lcMenuHitCode NOSHOW TEXTMERGE
		LPARAMETERS toParameter
		LOCAL llReturn, ;
			llMethod, ;
			llClass
		TRY
			llMethod = toParameter.MenuItem  = 'New Method...'
			llClass  = toParameter.UserTyped = 'Class'
			RELEASE _oNewProperty
			PUBLIC _oNewProperty
			_oNewProperty = NEWOBJECT('NewPropertyDialog', 'NewProperty.vcx', ;
				'<<FORCEPATH('NewPropertyDialog.APP', lcPath)>>', llMethod, ;
				llClass)
			_oNewProperty.SHOW()
			llReturn = .T.
		CATCH
		ENDTRY
		RETURN llReturn
		ENDTEXT
		
		TRY
			USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
			IF SEEK('MNEW PROPERTY...') 
				IF ATC("MSSolution",Source)=0
					lnOverwrite=MESSAGEBOX("A Menuhit script for this already exists. Would you like to overwrite it? If Yes, a backup of your existing script will be saved.",36)
					IF lnOverwrite=6
						REPLACE Abbrev WITH 'XX_NEW PROPERTY...'
						INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
							VALUES ('M', 'NEW PROPERTY...', lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))			
					ENDIF
				ELSE
					MESSAGEBOX("A Menuhit script for this is already installed.")
				ENDIF
			ELSE
				IF SEEK('MMS_NEW PROPERTY...')	&& see if previously disabled
					REPLACE Abbrev WITH 'NEW PROPERTY...'
				ELSE
					INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
						VALUES ('M', 'NEW PROPERTY...', lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))
				ENDIF
			ENDIF
			
			IF SEEK('MNEW METHOD...')
				IF ATC("MSSolution",Source)=0 AND lnOverwrite=6
					REPLACE Abbrev WITH 'XX_NEW METHOD...'
					INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
						VALUES ('M', 'NEW METHOD...', lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))			
				ENDIF
			ELSE
				IF SEEK('MMS_NEW METHOD...')
					REPLACE Abbrev WITH 'NEW METHOD...'
				ELSE
					INSERT INTO FOXCODE (Type, Abbrev, Data, Save, Timestamp, Source, UniqueID) ;
						VALUES ('M', 'NEW METHOD...', lcMenuHitCode, .T., DATETIME(), lcSource, SYS(2015))
				ENDIF	
			ENDIF
			USE
		CATCH
		ENDTRY
		SELECT (lnSelect)
		
		IF !THISFORM.cmdEditMenuHit.Enabled
			MESSAGEBOX("The sample New Property/Method dialog Menuhit scripts have been enabled. However, you first need to enable the Menuhit script.")
		ELSE
			MESSAGEBOX("The sample New Property/Method dialog Menuhit scripts have been enabled in your Foxcode table.")
		ENDIF
		
		THISFORM.CheckScripts()
	ENDPROC

	PROCEDURE cmdNPDisable.Click
		LOCAL lnSelect
		
		lnSelect = SELECT()
		SELECT 0
		TRY
			USE (_FOXCODE) AGAIN SHARED ALIAS FOXCODE ORDER 1
			IF SEEK('MNEW PROPERTY...') 
				REPLACE Abbrev WITH 'MS_NEW PROPERTY...'
			ENDIF
			IF SEEK('MNEW METHOD...') 
				REPLACE Abbrev WITH 'MS_NEW METHOD...'
			ENDIF
			
			* Check for prior existing script and prompt to replace
			IF SEEK('MXX_NEW PROPERTY...')
				IF MESSAGEBOX("You have a previously existing Menuhit script for the New Property... dialog. Would you like to restore it?",36)=6
					REPLACE Abbrev WITH 'NEW PROPERTY...'
					IF SEEK('MXX_NEW METHOD...') 
						REPLACE Abbrev WITH 'NEW METHOD...'
					ENDIF
				ENDIF
			ENDIF
			
			USE
		CATCH
		ENDTRY
		SELECT (lnSelect)
		THISFORM.CHeckscripts()
		MESSAGEBOX("The sample New Property/Method dialog Menuhit scripts have been disabled in your Foxcode table.")
		
	ENDPROC

	PROCEDURE cmdNPScript.Click
		THISFORM.Editscript("MNEW PROPERTY...")
	ENDPROC

	PROCEDURE cmdNPSource.Click
		MODIFY PROJECT (ADDBS(JUSTPATH(SYS(1271, THISFORM))) + "NewProp\NewPropertyDialog.PJX") NOWAIT
	ENDPROC

ENDDEFINE
