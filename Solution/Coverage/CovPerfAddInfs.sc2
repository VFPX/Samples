*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="covperfaddinfs.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "covaddin.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmscovperf AS formset 
 	*< CLASSDATA: Baseclass="formset" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="FrmMain" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmDisplay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmDisplay.Edit1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.cmdPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.cmdcancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.Combo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.Combo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="findform.Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.cmdHighlightColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.spnduration" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.spntoppercent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.cmdOk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.optcol" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.cmdForeColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.textFontString" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.cmdFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.textPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOptions.Label9" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checklogdbf		&& Checks that is a valid log table
		*m: checklogfile		&& Checks that it is a valid coverage profile log
		*m: checkpath		&& Check and set Foxpro path
		*m: cleararray
		*m: deletetempfiles
		*m: editsourcefile
		*m: exitaddin
		*m: fixlaprocs
		*m: fixorigorder
		*m: gethitinfo
		*m: headerclick
		*m: indexlogdbf
		*m: logsetup
		*m: opendbf
		*m: openlogfile		&& Opens a new coverage log file and analyzes it
		*m: options
		*m: prgfiletype		&& get code for hits with .prg file type
		*m: resetorder
		*m: resetsets
		*m: savelogtable
		*m: scxfiletype
		*m: search
		*m: setdatassion		&& Sets to correct datasession
		*m: setfilter		&& Sets filter to value set in toolbar combo
		*m: setgrid
		*m: setsets
		*m: skippedfiles		&& Displays the skipped files
		*m: slowlines
		*m: startcoverage
		*m: stopcoverage
		*m: viewhelp		&& View the readme
		*m: viewlogfile		&& View the coverage log
		*m: viewslowlines		&& View slow lines report
		*m: viewslowmethods
		*p: bordersize
		*p: ccoverage
		*p: ccurdir
		*p: classlib
		*p: fontstring
		*p: highlightcolor
		*p: highlightcolumn
		*p: highlightduration
		*p: laddin
		*p: ldelete
		*p: ldraw
		*p: lhighlight
		*p: localdir
		*p: logdbf
		*p: nolddecimals
		*p: ocovobj
		*p: ocovobjtype
		*p: oform
		*p: ofrmoptions
		*p: oldescape
		*p: oldexact		&& Old Exact setting
		*p: oldmemowidth		&& old memowidth setting
		*p: oldpath		&& VFP path coming in
		*p: oldsafety
		*p: osearchform		&& Search form object reference
		*p: otoolbar
		*p: tcfile
		*p: tooltext
		*p: toppercent
		*p: vfpversion
		*a: gaasc[10,1]
	*</DefinedPropArrayMethod>

	AutoRelease = .T.
	bordersize = 3
	DataSession = 1
	fontstring = 
	highlightcolor = 255
	highlightcolumn = 1
	highlightduration = 0
	ldelete = .F.
	ldraw = .T.
	Name = "FrmsCovperf"
	ofrmoptions = .F.
	oldpath = .F.		&& VFP path coming in
	oldsafety = off
	tooltext = 
	toppercent = 25
	vfpversion = 6

	ADD OBJECT 'findform' AS form WITH ;
		AlwaysOnTop = .T., ;
		AutoCenter = .T., ;
		BorderStyle = 1, ;
		Caption = "Find Value", ;
		DoCreate = .T., ;
		Height = 131, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "findform", ;
		ShowWindow = 2, ;
		Visible = .F., ;
		Width = 355, ;
		WindowType = 1
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'findform.cmdcancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Height = 27, ;
		Left = 240, ;
		Name = "cmdcancel", ;
		TabIndex = 5, ;
		Top = 96, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'findform.cmdFind' AS commandbutton WITH ;
		Caption = "Find Next", ;
		Default = .F., ;
		Height = 27, ;
		Left = 24, ;
		Name = "cmdFind", ;
		TabIndex = 3, ;
		Top = 96, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'findform.cmdPrev' AS commandbutton WITH ;
		Caption = "Find Previous", ;
		Height = 27, ;
		Left = 132, ;
		Name = "cmdPrev", ;
		TabIndex = 4, ;
		Top = 96, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'findform.Combo1' AS combobox WITH ;
		Height = 24, ;
		Left = 126, ;
		Name = "Combo1", ;
		TabIndex = 1, ;
		Top = 29, ;
		Width = 168
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'findform.Combo2' AS combobox WITH ;
		Height = 24, ;
		Left = 126, ;
		Name = "Combo2", ;
		TabIndex = 2, ;
		Top = 60, ;
		Width = 168
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'findform.Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Specify text to search for and a data column to search.", ;
		Height = 17, ;
		Left = 24, ;
		Name = "Label1", ;
		Top = 8, ;
		Width = 295
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'findform.Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Column to search:", ;
		Height = 17, ;
		Left = 13, ;
		Name = "Label2", ;
		Top = 65, ;
		Width = 103
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'findform.Label3' AS label WITH ;
		AutoSize = .F., ;
		Caption = "Search for:", ;
		Height = 17, ;
		Left = 55, ;
		Name = "Label3", ;
		Top = 34, ;
		Width = 61
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmDisplay' AS form WITH ;
		AlwaysOnTop = .T., ;
		AutoCenter = .T., ;
		Caption = "Form2", ;
		DefHeight = , ;
		DefWidth = , ;
		DoCreate = .T., ;
		Height = (THISFORMSET.FORM1.HEIGHT-15), ;
		MaxButton = .F., ;
		MinButton = .F., ;
		MinHeight = 400, ;
		MinWidth = 600, ;
		Name = "frmDisplay", ;
		ShowWindow = 2, ;
		Visible = .F., ;
		Width = (THISFORMSET.FORM1.WIDTH-15), ;
		WindowState = 0, ;
		WindowType = 1
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'frmDisplay.Edit1' AS editbox WITH ;
		ControlSource = "", ;
		FontName = "Arial", ;
		FontSize = 10, ;
		Height = 536, ;
		IntegralHeight = .T., ;
		Left = 0, ;
		Name = "Edit1", ;
		Top = 0, ;
		Width = 800
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'FrmMain' AS form WITH ;
		AlwaysOnTop = .F., ;
		Caption = "Coverage Profiler Performance Add-in", ;
		DoCreate = .T., ;
		Height = 1025, ;
		Left = 0, ;
		MinHeight = 100, ;
		MinWidth = 150, ;
		Name = "FrmMain", ;
		ShowTips = .T., ;
		ShowWindow = 2, ;
		Top = 0, ;
		Width = 1400, ;
		WindowState = 2
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'frmOptions' AS form WITH ;
		AlwaysOnTop = .T., ;
		AutoCenter = .T., ;
		BorderStyle = 1, ;
		Caption = "Options", ;
		DoCreate = .T., ;
		Height = 269, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmOptions", ;
		ShowTips = .T., ;
		ShowWindow = 2, ;
		Visible = .F., ;
		Width = 456, ;
		WindowState = 0
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'frmOptions.cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Height = 27, ;
		Left = 248, ;
		Name = "cmdCancel", ;
		TabIndex = 18, ;
		Top = 233, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmOptions.cmdFont' AS commandbutton WITH ;
		Caption = "...", ;
		Height = 27, ;
		Left = 348, ;
		Name = "cmdFont", ;
		TabIndex = 9, ;
		ToolTipText = "Font properties", ;
		Top = 86, ;
		Width = 23
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmOptions.cmdForeColor' AS commandbutton WITH ;
		Caption = "", ;
		Height = 27, ;
		Left = 348, ;
		Name = "cmdForeColor", ;
		Picture = ("colors.bmp"), ;
		TabIndex = 12, ;
		ToolTipText = "Font ForeColor", ;
		Top = 125, ;
		Width = 23
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmOptions.cmdHighlightColor' AS commandbutton WITH ;
		Caption = "", ;
		Height = 27, ;
		Left = 377, ;
		Name = "cmdHighlightColor", ;
		Picture = ("gridrow.bmp"), ;
		TabIndex = 13, ;
		ToolTipText = "Highlight color for slow lines", ;
		Top = 125, ;
		Width = 23
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmOptions.cmdOk' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		Height = 27, ;
		Left = 130, ;
		Name = "cmdOk", ;
		TabIndex = 17, ;
		Top = 233, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmOptions.Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Time threshold for line highlight:", ;
		Height = 17, ;
		Left = 43, ;
		Name = "Label1", ;
		TabIndex = 2, ;
		Top = 25, ;
		Width = 176, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Percentage for slow method report:", ;
		Height = 17, ;
		Left = 76, ;
		Name = "Label2", ;
		TabIndex = 14, ;
		Top = 194, ;
		Width = 194
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label3' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Column to base highlighting on:", ;
		Height = 17, ;
		Left = 41, ;
		Name = "Label3", ;
		TabIndex = 5, ;
		Top = 57, ;
		Width = 175, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label4' AS label WITH ;
		AutoSize = .T., ;
		Caption = " Grid appearance and behavior ", ;
		Height = 17, ;
		Left = 24, ;
		Name = "Label4", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 174
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label5' AS label WITH ;
		AutoSize = .T., ;
		Caption = "seconds", ;
		Height = 17, ;
		Left = 335, ;
		Name = "Label5", ;
		TabIndex = 4, ;
		Top = 25, ;
		Width = 50
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = "%", ;
		Height = 17, ;
		Left = 345, ;
		Name = "Label6", ;
		TabIndex = 16, ;
		Top = 194, ;
		Width = 13
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label7' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Font:", ;
		Height = 17, ;
		Left = 65, ;
		Name = "Label7", ;
		TabIndex = 7, ;
		Top = 91, ;
		Width = 29
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label8' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Colors:", ;
		Height = 17, ;
		Left = 52, ;
		Name = "Label8", ;
		TabIndex = 10, ;
		Top = 124, ;
		Width = 42
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.Label9' AS label WITH ;
		AutoSize = .T., ;
		Caption = " Reporting ", ;
		Height = 17, ;
		Left = 24, ;
		Name = "Label9", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 175, ;
		Width = 62
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmOptions.optcol' AS optiongroup WITH ;
		ButtonCount = 3, ;
		Height = 24, ;
		Left = 239, ;
		Name = "optcol", ;
		TabIndex = 6, ;
		Top = 52, ;
		Value = 1, ;
		Width = 144, ;
		Option1.AutoSize = .F., ;
		Option1.Caption = "First", ;
		Option1.Height = 17, ;
		Option1.Left = 3, ;
		Option1.Name = "Option1", ;
		Option1.Top = 4, ;
		Option1.Value = 1, ;
		Option1.Width = 42, ;
		Option2.AutoSize = .F., ;
		Option2.Caption = "Avg", ;
		Option2.Height = 17, ;
		Option2.Left = 51, ;
		Option2.Name = "Option2", ;
		Option2.Top = 4, ;
		Option2.Width = 37, ;
		Option3.AutoSize = .F., ;
		Option3.Caption = "Total", ;
		Option3.Height = 17, ;
		Option3.Left = 94, ;
		Option3.Name = "Option3", ;
		Option3.Top = 4, ;
		Option3.Width = 45
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'frmOptions.Shape1' AS shape WITH ;
		BackStyle = 1, ;
		Height = 161, ;
		Left = 15, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 9, ;
		Width = 421
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'frmOptions.Shape2' AS shape WITH ;
		BackStyle = 1, ;
		Height = 43, ;
		Left = 15, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 182, ;
		Width = 421
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'frmOptions.spnduration' AS spinner WITH ;
		Height = 24, ;
		KeyboardHighValue = 20, ;
		KeyboardLowValue = 0, ;
		Left = 238, ;
		Name = "spnduration", ;
		SpinnerHighValue = 20.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 3, ;
		Top = 21, ;
		Width = 92
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'frmOptions.spntoppercent' AS spinner WITH ;
		Height = 24, ;
		KeyboardHighValue = 100, ;
		KeyboardLowValue = 1, ;
		Left = 282, ;
		Name = "spntoppercent", ;
		TabIndex = 15, ;
		Top = 191, ;
		Width = 55
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'frmOptions.textFontString' AS textbox WITH ;
		Height = 23, ;
		Left = 107, ;
		Name = "textFontString", ;
		ReadOnly = .T., ;
		TabIndex = 8, ;
		Top = 88, ;
		Width = 232
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmOptions.textPreview' AS textbox WITH ;
		Height = 41, ;
		Left = 106, ;
		Name = "textPreview", ;
		TabIndex = 11, ;
		Top = 120, ;
		Value = thisform.cmd1.click(), ;
		Width = 232
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE checklogdbf		&& Checks that is a valid log table
		LPARAMETERS dbfname
		LOCAL lok,ii
		CREATE CURSOR covperf2 (CODE c(200),hits i,FIRST N(12,6),AVG N(12,6),TOTAL N(12,6),SOURCE c(115),LINE i, ;
			method c(115),objclass c(115),filetype c(4),pline i)
		USE (dbfname) IN 0 ALIAS covperf3
		SELECT covperf2
		FOR ii= 1 TO FCOUNT()
			IF !FIELD(ii,'covperf2')==FIELD(ii,'covperf3')
				USE IN covperf3
				USE IN covperf2
				RETURN .F.
			ENDIF
		ENDFOR
		USE IN covperf3
		USE IN covperf2
		RETURN .T.
		
	ENDPROC

	PROCEDURE checklogfile		&& Checks that it is a valid coverage profile log
		LPARAMETERS logfile
		IF !FILE(logfile)
			MESSAGEBOX(FILE_NOT_EXIST)
			RETURN
		ENDIF 
		LOCAL ii
		CREATE CURSOR temp (f1 m)
		INSERT INTO temp VALUES(ALLTRIM(FILETOSTR(logfile)))
		FOR ii =1 TO 10
			cline=MLINE(f1,ii)
			IF !OCCURS(",",cline)==5 AND !EMPTY(ALLTRIM(cline))
				USE IN temp
				RETURN .F.
			ENDIF
		ENDFOR
		USE IN temp
		RETURN .T.
		
	ENDPROC

	PROCEDURE checkpath		&& Check and set Foxpro path
		* Set up path
		IF EMPTY(SET("Path"))
			SET PATH TO (THISFORMSET.localdir)+";"+JUSTPATH(THISFORMSET.tcfile)
		ELSE
			IF !LEN(SET("path")+";"+THISFORMSET.localdir+";"+JUSTPATH(THISFORMSET.tcfile))>254
				SET PATH TO (SET("path")+";"+THISFORMSET.localdir)+";"+JUSTPATH(THISFORMSET.tcfile)
			ELSE && path will be too long.  It's not too bad because we will reset it on exit
				SET PATH TO (THISFORMSET.localdir)+";"+JUSTPATH(THISFORMSET.tcfile)
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cleararray
		LPARAMETERS laNewRows
		LOCAL nele
		nele=ALEN(laNewRows,1)
		FOR iele =1 TO 11
			laNewRows[nele,iele]=''
		ENDFOR
		
	ENDPROC

	PROCEDURE deletetempfiles
		CREATE CURSOR deletefiles (cfile c(225))
		INDEX ON cfile TAG cfile unique
		SELECT deletefiles
		cfilestodelete=''
		
		nfiles=ADIR(afiles,"*_COV?.DBF")
		FOR ii=1 TO nfiles
		INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_COV??.DBF")
		FOR ii=1 TO nfiles
		INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_COV?.fpt")
		FOR ii=1 TO nfiles
			INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_COV??.fpt")
		FOR ii=1 TO nfiles
			INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_skip?.DBF")
		FOR ii=1 TO nfiles
			INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_skip??.DBF")
		FOR ii=1 TO nfiles
			INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_stack?.XML")
		FOR ii=1 TO nfiles
			INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		
		nfiles=ADIR(afiles,"*_stack??.XML")
		FOR ii=1 TO nfiles
			INSERT INTO deletefiles values(afiles[ii,1])
		ENDFOR 
		RELEASE afiles
		SCAN 
			cfilestodelete=cfilestodelete+TRIM(cfile)+CR
		ENDSCAN 
		cfilestodelete="Would you like to delete the following temp files?"+CR+cfilestodelete
		IF MESSAGEBOX(cfilestodelete,36)=6
			SCAN 
			DELETE FILE (TRIM(cfile))
			ENDSCAN 
		ENDIF 
		
	ENDPROC

	PROCEDURE Destroy
		oldsafety=thisformset.oldsafety
		SET SAFETY &oldsafety
		
	ENDPROC

	PROCEDURE editsourcefile
		LOCAL cfiletype,cmethod,nresult
		m.cfiletype=UPPER(covperf.filetype)
		
		DO CASE
		
			CASE m.cfiletype == ".PRG" OR ;
					cfiletype == ".FXP" OR;
					cfiletype == ".FRX" OR ;
					cfiletype == ".MPR" OR ;
					cfiletype == ".QPR" OR ;
					cfiletype == ".QPX" OR ;
					cfiletype == ".SPR" OR ;
					cfiletype == ".H" OR ;
					cfiletype == ".FRT" OR ;
					cfiletype == ".LBX" OR ;
					cfiletype == ".MPX" OR ;
					cfiletype == ".DBC" OR ;
					cfiletype == ".DCT"
		
				nresult=EDITSOURCE(ALLTRIM(covperf.SOURCE),covperf.LINE)
			CASE m.cfiletype=".VCT"
				IF OCCURS('.',covperf.method)>1  &&assume there is at least 1
				*get second
					nbegin=RAT('.',covperf.method,2)+1
					cmethod=TRIM(SUBSTR(covperf.method,nbegin))
				ELSE
					nbegin=RAT('.',covperf.method,1)+1
					cmethod=TRIM(SUBSTR(covperf.method,nbegin))
				ENDIF
		
				* only get classname
				DO CASE
					CASE  OCCURS("!",objclass)>0
						CCLASS=TRIM(SUBSTR(objclass,AT("!",objclass)+1))
					CASE  OCCURS(".",objclass)>0
						CCLASS=TRIM(SUBSTR(objclass,AT(".",objclass)+1))
		
					OTHERWISE
						CCLASS=TRIM(objclass)
		
				ENDCASE
				nresult=EDITSOURCE(ALLTRIM(covperf.SOURCE), ;
					covperf.LINE, ;
					CCLASS, ;
					cmethod)
			CASE m.cfiletype=".SCT"
				CCLASS=SUBSTR(objclass,1,IIF(AT(".",objclass)>0,AT(".",objclass),LEN(RTRIM(objclass))))
				cmethod=RTRIM(SUBSTR(method,AT('.',method)+1))
				nresult=EDITSOURCE(ALLTRIM(covperf.SOURCE), ;
					covperf.LINE, ;
					CCLASS, ;
					cmethod)
			
		ENDCASE
		
		DO CASE
			CASE  VARTYPE(nresult)="L"
				nopen=MESSAGEBOX(COULD_NOT_OPEN_OPEN, ;
					36,"Open File")
				IF  nopen=6
					cfiletype=LOCFILE(ALLTRIM(SOURCE))
					IF !EMPTY(cfiletype)
						EDITSOURCE(cfiletype)
					ENDIF
				ENDIF
		
			CASE  nresult=132
				MESSAGEBOX(FILE_IN_USE)
			CASE  nresult=925
				MESSAGEBOX(COULD_NOT_FIND_METHOD)
		ENDCASE
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		IF nError=2059  &&User defined error
			MESSAGEBOX(MESSAGE())
		ELSE
			MESSAGEBOX("Error#: "+TRANSFORM(nError)+CR+"Line:"+TRANSFORM(nLine)+CR+"Method: "+cMethod+CR+"Error:"+MESSAGE())
		ENDIF
		
	ENDPROC

	PROCEDURE exitaddin
		Thisformset.RELEASE
		
	ENDPROC

	PROCEDURE fixlaprocs
		LPARAMETERS laallprocs
		LOCAL delcount,lalen,ii
		delcount=0
		lalen=ALEN(laallprocs,1)
		FOR ii=1 TO lalen
			IF UPPER(laallprocs[ii,3])#"PROCEDURE"
				ADEL(laallprocs,ii)
				delcount = delcount + 1
				ii=ii-1  && retest because of delete slide up
			ENDIF
			IF ii=lalen-delcount
				EXIT
			ENDIF
		ENDFOR
		DIMENSION laallprocs[lalen-delcount,4]
		RETURN lalen-delcount
		
	ENDPROC

	PROCEDURE fixorigorder
		LOCAL lreadcorrectly
		lreadcorrectly=.T.
		SELECT covperf
		replace ALL pline WITH -1
		SELECT fromlog
		
		GO TOP
		SCAN
		IF RECNO('fromlog')%500=0  && check every once in a while
			SELECT * from covperf WHERE pline<0 INTO ARRAY latestarray
			IF _tally=0
				RETURN &&all filled in
			ENDIF 
		ENDIF 
		SELECT covperf
			LOCATE FOR ;
				covperf.SOURCE=fromlog.hostfile AND LOWER(covperf.method)=fromlog.executing ;
				AND covperf.LINE=fromlog.procline and pline=-1
		
			IF FOUND()
				REPLACE covperf.pline WITH RECNO('fromlog')
				ELSE
				LOCATE FOR ;
				covperf.SOURCE=fromlog.hostfile AND ALLTRIM(LOWER(SUBSTR(covperf.method,AT("!",covperf.method)+1)))=ALLTRIM(fromlog.executing) ;
				AND covperf.LINE=fromlog.procline and pline=-1
				IF FOUND()
					REPLACE covperf.pline WITH RECNO('fromlog')
				ENDIF 
			ENDIF
			SELECT fromlog
			
		ENDSCAN
		
		
	ENDPROC

	PROCEDURE gethitinfo
		SELECT markedcode
		DO case
			CASE markedcode.filetype='.sct' OR markedcode.filetype='.vct'
			thisformset.scxfiletype()
			OTHERWISE 
		 	thisformset.prgfiletype()
		ENDCASE 
		return
		
	ENDPROC

	PROCEDURE headerclick
		LPARAMETERS COL
		LOCAL laindex
		laindex=VAL(SUBSTR(col.name,7))
		IF THIS.gaASC[laindex]=.t.
			SET ORDER TO VAL(SUBSTR(col.name,7)) DESCENDING
			THIS.gaASC[laindex]=.F.
		ELSE
			SET ORDER TO VAL(SUBSTR(col.name,7)) ASCENDING
			THIS.gaASC[laindex]=.T.
		ENDIF
		GO TOP
		THISFORMSET.FrmMain.grdcov1.Refresh
		
	ENDPROC

	PROCEDURE indexlogdbf
		IF EMPTY(CDX(1))
					FOR ii=1 TO FCOUNT()
						inexpr="INDEX ON "+FIELD(ii)+" TAG "+FIELD(ii)
						&inexpr
					ENDFOR
		ENDIF 
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS covobj
		thisformset.SetAll('icon','covaddin.ico','form')
		thisformset.fontstring = "Arial,9,N"
		thisformset.vfpversion=VAL(VERSION(4))
		Thisformset.ocovobj=covobj  &&store reference to CP
		Thisformset.ocovobjtype=VARTYPE(Thisformset.ocovobj)  
		LOCAL nformcount,ii,tlUnattended,tcAddIn
		* Find everything we need
		thisformset.localdir=JUSTPATH(SYS(1271,Thisformset))
		CD justpath(SYS(1271,this))
		Thisformset.classlib=thisformset.localdir+'\covaddin.vcx'
		IF !FILE(Thisformset.classlib)	
			MESSAGEBOX(MISSING_COV)
			return .f.
			ELSE
			SET classlib TO (thisformset.classlib)
		ENDIF
		* Pre/Post cleanup
		IF USED('covperf')
			USE IN covperf
		ENDIF 
		IF TYPE("_ocoverage ")="O"  AND !Thisformset.ocovobjtype="O"  &&Coverage profiler is open&&Coverage profiler is open but this was not started as addin
			nformcount=_SCREEN.FORMCOUNT
			FOR ii=1 TO nformcount
				IF _SCREEN.FORMS(ii).NAME="cov_toolbar" AND _SCREEN.FORMS(ii).VISIBLE=.F.
					RELEASE _ocoverage
				ENDIF
			ENDFOR
		ENDIF
		* Parse and check the passed parameters
		IF Thisformset.ocovobjtype="C"  &&passed logfile or saved dbf file
			IF FILE(covobj)  && dbf file or logfile
				IF UPPER(JUSTEXT(covobj))="DBF"  && Passed in a table
					IF !Thisformset.checklogdbf(covobj)
						MESSAGEBOX(BAD_DBF)
						return .f.
					ENDIF
					Thisformset.logdbf=covobj
				ELSE
					IF UPPER(JUSTEXT(covobj))="LOG" OR  UPPER(JUSTEXT(covobj))="TXT"
						IF !Thisformset.checklogfile(covobj)
							MESSAGEBOX(BAD_DBF)
							return .f.
						ENDIF
					ENDIF
				ENDIF
				* IF we made it this far then it is a valid file
				Thisformset.tcfile=covobj
			ELSE  && string was passed but can't find the file
				MESSAGEBOX(NO_LOCATE_FILE)
				return .f.
			ENDIF
		ENDIF
		
		
		IF EMPTY(Thisformset.logdbf)  &&wasn't passed a dbf
			* Open Coverage log-
			IF !Thisformset.ocovobjtype="O"  && not called as addin
				IF EMPTY(Thisformset.tcfile)  
					Thisformset.tcfile=GETFILE('log,txt',"Open Coverage Log","Open",1,"Select a coverage log")
				ENDIF
				thisformset.checkpath()
				tlUnattended=.T.
				tcAddIn=""
				ON ERROR * 
				Thisformset.ocovobj= NEWOBJECT(COV_CLASS_TO_INSTANCE,COV_CLASS_CLASSLIB,CAPPFILE, ;
					Thisformset.tcfile, tlUnattended, tcAddIn)
				IF VARTYPE(Thisformset.ocovobj)#"O" && make sure it worked - else quit
					MESSAGEBOX(CANCELING_BAD_LOG)
					ON ERROR 
					return .f.
				ELSE
					ON ERROR
				ENDIF
			ENDIF
			*set up data
			Thisformset.setdatassion()  && Need to hook into coverage datasession
			CREATE CURSOR covperf (CODE c(200),hits i,FIRST N(12,6),AVG N(12,6),TOTAL N(12,6),SOURCE c(115),LINE i, ;
				method c(115),objclass c(115),filetype c(4),pline i)
		
			WITH THISFORMSET
				.indexlogdbf()
				.logsetup()  && Create our cursor
				.fixorigorder()
			ENDWITH
			* Set up grid
			SELECT covperf
			thisformset.FrmMain.AddObject('grdcov1','grdcov')
			IF EMPTY(Thisformset.tcfile)  && we did not pass one in but we opened it or coverage profiler opened it
				Thisformset.tcfile=_ocoverage.csourcefile
			ENDIF  
		ELSE  && Passed a dbf
			USE (Thisformset.logdbf) IN 0 ALIAS covperf
			Thisformset.indexlogdbf()
			SELECT covperf
			thisformset.FrmMain.AddObject('grdcov1','grdcov')
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		thisformset.highlightcolor=255
		thisformset.highlightduration=.010001
		thisformset.toppercent=25
		thisformset.highlightcolumn=1
		
	ENDPROC

	PROCEDURE logsetup
		LOCAL nrec,lpromode,inexpr
		SELECT markedcode
		lpromode=Thisformset.ocovobj.lInProfileMode
		Thisformset.ocovobj.lInProfileMode=.T.
		nrec=IIF(!EOF() AND RECCOUNT()>0,RECNO(),RECCOUNT())
		
		SCAN FOR EMPTY(profiled)  && get sourcecode for every line
			Thisformset.ocovobj.markonetargetrecord(.F.,.F.,.F.)
		ENDSCAN
		
		SELECT markedcode
		* create cursor for results
		* go through each record in the marked code cursor
		* It has the hit info
		
		SCAN && Main processing loop
			Thisformset.gethitinfo()
			SELECT markedcode
		ENDSCAN
		GOTO nrec IN markedcode
		GOTO TOP IN covperf
		
	ENDPROC

	PROCEDURE opendbf
		LOCAL clogdbf
		clogdbf=GETFILE('dbf',"Open a previously saved log table","Open",2,"Open a saved log table")
		IF !EMPTY(clogdbf) AND FILE(clogdbf)
			thisformset.FrmMain.LockScreen=.t.
			
			IF !Thisformset.checklogdbf(clogdbf)
						MESSAGEBOX(BAD_DBF)
						thisformset.FrmMain.LockScreen=.f.
						return .f.
			ENDIF
				USE IN covperf
				USE (clogdbf) ALIAS covperf
				IF EMPTY(CDX(1))
					Thisformset.indexlogdbf()
				ENDIF
			Thisformset.FrmMain.LOCKSCREEN=.T.
			thisformset.FrmMain.REMOVEOBJECT('grdcov1')
			thisformset.FrmMain.ADDOBJECT('grdcov1','grdcov')
			THISFORMSET.FrmMain.grdcov1.RESIZE()	
			thisformset.FrmMain.grdcov1.visible=.t.
			thisformset.FrmMain.LockScreen=.f.
			thisformset.tcfile=''  && reset the logfile 
		ENDIF
		
		
	ENDPROC

	PROCEDURE openlogfile		&& Opens a new coverage log file and analyzes it
		LPARAMETERS cfile
		LOCAL cOldtcfile
		cOldtcfile=thisformset.tcfile
		IF PCOUNT()=1
			THISFORMSET.tcfile=cfile
		ELSE
			THISFORMSET.tcfile=GETFILE('log,txt',"Open Coverage Log","Open",1,"Select a coverage log")
			IF EMPTY(THISFORMSET.tcfile)  && Canceled out of file dialog	
				thisformset.tcfile=cOldtcfile
				RETURN .f.
			ENDIF 
			IF !THISFORMSET.checklogfile(THISFORMSET.tcfile)
				MESSAGEBOX(NOT_VALID_LOG)
			ENDIF
		ENDIF
		thisformset.checkpath()
		* Do it the easy way.  Kill the existing coverage profiler app open
		RELEASE _ocoverage
		tlUnattended=.T.
		tcAddIn=""
		ON ERROR *
		IF VARTYPE(THISFORMSET.ocovobj)#"O"
			THISFORMSET.ocovobj= NEWOBJECT(COV_CLASS_TO_INSTANCE,COV_CLASS_CLASSLIB,CAPPFILE, ;
				THISFORMSET.tcfile, tlUnattended, tcAddIn)
		ELSE
			SET DATASESSION TO 1
			THISFORMSET.ocovobj=''
			THISFORMSET.ocovobj= NEWOBJECT(COV_CLASS_TO_INSTANCE,COV_CLASS_CLASSLIB,CAPPFILE, ;
				THISFORMSET.tcfile, tlUnattended, tcAddIn)
		ENDIF
		IF VARTYPE(THISFORMSET.ocovobj)#"O" && make sure it worked - else quit
			MESSAGEBOX(CANCELING_BAD_LOG)
			ON ERROR
			RETURN .F.
		ELSE
			ON ERROR
		ENDIF
		*set up data
		THISFORMSET.setdatassion()  && Need to hook into coverage datasession
		CREATE CURSOR covperf (CODE c(200),hits i,FIRST N(12,6),AVG N(12,6),TOTAL N(12,6),SOURCE c(115),LINE i, ;
			method c(115),objclass C(115),filetype c(4),pline i)
		
		WITH THISFORMSET
			.indexlogdbf()
			.logsetup()  && Create our cursor
			.fixorigorder()
		ENDWITH
		* Set up grid
		IF USED("covperf")
			SELECT covperf
			ELSE
			MESSAGEBOX(CANCELING_PROBLEM_UNKNOWN)
		ENDIF 
		THISFORMSET.FrmMain.LOCKSCREEN=.T.
		THISFORMSET.FrmMain.REMOVEOBJECT('grdcov1')
		THISFORMSET.FrmMain.ADDOBJECT('grdcov1','grdcov')
		THISFORMSET.FrmMain.grdcov1.RESIZE
		THISFORMSET.FrmMain.grdcov1.VISIBLE=.T.
		THISFORMSET.FrmMain.LOCKSCREEN=.F.
		
	ENDPROC

	PROCEDURE options
		thisformset.frmOptions.Show(1)
		
	ENDPROC

	PROCEDURE prgfiletype		&& get code for hits with .prg file type
		LOCAL cproc,iprocline,nfixedline,nlines,nNewrow,lsomehits,cfixline
		LOCAL ARRAY  laNewRows[1,11]
		_MLINE =0
		cproc=''
		iprocline=0
		nfixedline=0
		nlines=MEMLINES(markedcode.profiled)
		nNewrow=0
		lsomehits=.f.
		laNewRows=''
		cfixline=''
		FOR iprocline=1 TO nlines
			cfixline=MLINE(markedcode.profiled, 1, _MLINE)
			cfixline=CHRTRAN(ALLTRIM(cfixline ),CHR(9),'')
			IF EMPTY(ALLTRIM(cfixline))
				LOOP
			ENDIF
			IF ("PROCEDURE "$UPPER(cfixline) OR "FUNCTION "$UPPER(cfixline))
				cproc=GETWORDNUM(cfixline,2)
				LOOP
			ENDIF
			IF "ENDPROC"$UPPER(cfixline)
				cproc=''
				LOOP
			ENDIF
			IF "Hit"$cfixline AND !"0 Hits"$cfixline
				nNewrow=nNewrow+1
				DIMENSION laNewRows[nNewRow,11]
				Thisformset.cleararray(@laNewRows)
				laNewRows[nNewRow,_CODE]=SUBSTR(cfixline,AT("Avg",cfixline)+13)
				laNewRows[nNewRow,_HITS]=VAL(cfixline)
				laNewRows[nNewRow,_FIRST]=VAL(SUBSTR(cfixline,AT("1st",cfixline)+5))
				laNewRows[nNewRow,_AVG]=VAL(SUBSTR(cfixline,AT("Avg",cfixline)+5))
				laNewRows[nNewRow,_TOTAL]=laNewRows[nNewRow,_HITS]*laNewRows[nNewRow,_AVG]
				laNewRows[nNewRow,_SOURCE]=markedcode.hostfile
				laNewRows[nNewRow,_LINE]=iprocline
				laNewRows[nNewRow,_METHOD]=IIF(!EMPTY(markedcode.objclass),ALLTRIM(markedcode.objclass)+"."+cproc,cproc)
				laNewRows[nNewRow,_CLASS]=markedcode.objclass
				laNewRows[nNewRow,_FILETYPE]=markedcode.filetype
				laNewRows[nNewRow,_PLINE]=iprocline
				lsomehits=.T.
			ENDIF
		ENDFOR
		
		IF lsomehits
			SELECT covperf
			APPEND FROM ARRAY laNewRows
		ENDIF
		
		RELEASE laNewRows
		
	ENDPROC

	PROCEDURE resetorder
		SET ORDER TO pline
		GO TOP
		Thisformset.FrmMain.grdcov1.REFRESH
		
	ENDPROC

	PROCEDURE resetsets
		LOCAL oldescape,oldexact,oldsafety
		SET DECIMALS TO &Thisformset.nolddecimals
		oldesc=Thisformset.oldescape
		SET ESCAPE &oldesc
		oldexact=Thisformset.oldexact
		SET EXACT &oldexact
		SET MEMOWIDTH TO (Thisformset.oldmemowidth)
		SET CLASSLIB TO
		ON ERROR
		CD (thisformset.ccurdir)
		SET PATH TO (thisformset.oldpath)
		
		
		
	ENDPROC

	PROCEDURE savelogtable
		LOCAL cdbfpath
		cdbfpath=PUTFILE("Save log table to disk",'log.dbf','dbf')
		IF EMPTY(cdbfpath)
			WAIT WINDOW CANCELING TIMEOUT 1
			RETURN 
		ENDIF
		SELECT * FROM covperf INTO TABLE (cdbfpath)
		*we will index when we open
		USE IN (juststem(cdbfpath))
		
		
	ENDPROC

	PROCEDURE scxfiletype
		LOCAL cproc,iprocline,nfixedline,nlines,nNewrow,lsomehits,cfixline
		LOCAL ARRAY  laNewRows[1,11]
		_MLINE =0
		iprocline=0
		nlines=MEMLINES(markedcode.profiled)  &&ALINES(codelines,cstr) && array with all lines of code
		nNewrow=0
		lsomehits=.F.
		nfixedline=1
		FOR iprocline=1 TO nlines
			cfixline=MLINE(markedcode.profiled, 1, _MLINE)
			cfixline=CHRTRAN(ALLTRIM(cfixline ),CHR(9),'')
			DO CASE
				CASE  EMPTY(ALLTRIM(cfixline))
					nfixedline=nfixedline+1
					LOOP
		
				CASE  ("PROCEDURE "$UPPER(cfixline) OR "FUNCTION "$UPPER(cfixline))
					cproc=GETWORDNUM(cfixline,2)
					nfixedline=1
					LOOP
		
				CASE  "ENDPROC"$UPPER(cfixline)
					nfixedline=1
					LOOP
		
				CASE  "Hit"$cfixline AND !"0 Hits"$cfixline
					nNewrow=nNewrow+1
					DIMENSION laNewRows[nNewRow,11]
					THISFORMSET.cleararray(@laNewRows)
					laNewRows[nNewRow,_CODE]=SUBSTR(cfixline,AT("Avg",cfixline)+13)
					laNewRows[nNewRow,_HITS]=VAL(cfixline)
					laNewRows[nNewRow,_FIRST]=VAL(SUBSTR(cfixline,AT("1st",cfixline)+4)) && changed from 5 to 4
			   		laNewRows[nNewRow,_AVG]=VAL(SUBSTR(cfixline,AT("Avg",cfixline)+4)) && changed from 5 to 4
					laNewRows[nNewRow,_TOTAL]=laNewRows[nNewRow,_HITS]*laNewRows[nNewRow,_AVG]
					laNewRows[nNewRow,_SOURCE]=markedcode.hostfile
					laNewRows[nNewRow,_LINE]=nfixedline
					laNewRows[nNewRow,_METHOD]=IIF(!EMPTY(markedcode.objclass),ALLTRIM(markedcode.objclass)+"."+cproc,cproc)
					laNewRows[nNewRow,_CLASS]=markedcode.objclass
					laNewRows[nNewRow,_FILETYPE]=markedcode.filetype
					laNewRows[nNewRow,_PLINE]=iprocline
					lsomehits=.T.
		
			ENDCASE
			nfixedline=nfixedline+1
		ENDFOR
		
		IF lsomehits
			SELECT covperf
			APPEND FROM ARRAY laNewRows
		ENDIF
		
		RELEASE laNewRows
		
	ENDPROC

	PROCEDURE search
		this.osearchform=thisformset.findform
		this.osearchform.SHOW(1)
		
	ENDPROC

	PROCEDURE setdatassion		&& Sets to correct datasession
		LOCAL nsessions
		IF !USED("markedcode") && must have open -it's from coverage profiler
			nsessions=ASESSIONS(lasessions)
			FOR ii=1 TO nsessions  &&spin through sessions and find it
				IF VERSION(5)>=800
				try
				SET DATASESSION TO (lasessions[ii])
				CATCH TO oerr
				endtry 
				ELSE
				ON ERROR *
				SET DATASESSION TO (lasessions[ii])
				ON ERROR
				ENDIF 
				
				IF USED("markedcode")
					EXIT
				ENDIF
			ENDFOR
			IF !USED("markedcode") && major problem!
				MESSAGEBOX(PROBLEM_LOG_EXIT)
				RETURN .F.
			ENDIF
		ENDIF
		RETURN .t.
	ENDPROC

	PROCEDURE setfilter		&& Sets filter to value set in toolbar combo
		LPARAMETERS cfilter
		SELECT covperf
		IF "clear filter"$LOWER(cfilter)
			SET FILTER TO
		ELSE
			SET FILTER TO &cfilter
		ENDIF
		GO TOP 
		thisformset.FrmMain.grdcov1.refresh()
		thisformset.FrmMain.grdcov1.setfocus()
		
	ENDPROC

	PROCEDURE setgrid
		WITH THISFORMSET.FrmMain
			.GRDCOV1.RECORDSOURCE=SPACE(0)
			.GRDCOV1.RECORDSOURCE='covperf'
			.GRDCOV1.COLUMNCOUNT=10
			FOR ii=1 TO .GRDCOV1.COLUMNCOUNT
				.GRDCOV1.COLUMNS(ii).CONTROLSOURCE="covperf."+FIELD(ii,'covperf')
				.GRDCOV1.COLUMNS(ii).REMOVEOBJECT("header1")
				.GRDCOV1.COLUMNS(ii).ADDOBJECT("header1","hd")
				.GRDCOV1.COLUMNS(ii).header1.CAPTION=FIELD(ii,'covperf')
			ENDFOR
			THISFORMSET.resetorder()
		ENDWITH
		
	ENDPROC

	PROCEDURE setsets
		Thisformset.oldescape=SET("Escape")
		Thisformset.nolddecimals=SET("Decimals")
		Thisformset.oldexact=SET("Exact")
		Thisformset.oldmemowidth=SET("Memowidth")
		thisformset.ccurdir=SET("Default")+CURDIR()
		thisformset.oldpath=SET("Path")
		thisformset.oldsafety=SET("Safety")
		SET SAFETY off
		SET ESCAPE ON
		SET DECIMALS TO 6
		SET MEMOWIDTH TO 255
		
	ENDPROC

	PROCEDURE skippedfiles		&& Displays the skipped files
		LOCAL cstr
		IF EMPTY(thisformset.tcfile)
				WAIT WINDOW NO_SKIPPED_FILES TIMEOUT 3
				RETURN
		ENDIF 
		IF !USED('skippedfiles') OR (USED('skippedfiles') AND RECCOUNT('skippedfiles')=0)
			WAIT WINDOW NO_SKIPPED_FILES TIMEOUT 3
			RETURN
		ENDIF
		SELECT skippedfiles
		cstr=''
		SCAN
			cstr=cstr+TRIM(skippedfiles)+CR
		ENDSCAN
		WITH THISFORMSET
			.frmdisplay.edit1.VALUE=cstr
			.frmdisplay.WIDTH=800
			.frmdisplay.HEIGHT=600
			.frmdisplay.SHOW(1)
			.frmdisplay.CAPTION="Coverage Profiler Skipped files"
		ENDWITH
		
	ENDPROC

	PROCEDURE slowlines
		LOCAL oGrd,ii
		THISFORMSET.lhighlight=!THISFORMSET.lhighlight
		oGrd = THISFORMSET.FrmMain.grdcov1
		SELECT covperf
		ON ERROR *
		oGrd.SETALL("dynamicbackcolor", "", "Column")
		oGrd.SETALL("dynamicforecolor", "", "Column")
		IF THISFORMSET.lhighlight
			DO CASE
				CASE THISFORMSET.highlightcolumn=1  &&first
		
					oGrd.SETALL("dynamicbackcolor", ;
						"IIF(first > thisformset.highlightduration , thisformset.highlightcolor, RGB(255,255,255))", "Column")
				CASE THISFORMSET.highlightcolumn=2  &&avg
		
					oGrd.SETALL("dynamicbackcolor", ;
						"IIF(avg > thisformset.highlightduration , thisformset.highlightcolor, RGB(255,255,255))", "Column")
				CASE THISFORMSET.highlightcolumn=1  &&total
		
					oGrd.SETALL("dynamicbackcolor", ;
						"IIF(total > thisformset.highlightduration , thisformset.highlightcolor, RGB(255,255,255))", "Column")
			ENDCASE
		ENDIF
		
		oGrd.REFRESH
		ON error
		RETURN
		
	ENDPROC

	PROCEDURE startcoverage
		LOCAL cfile
		
		cfile=PUTFILE("Coverage Log filename",'covlog.log','log')
		IF !EMPTY(cfile)
			SET COVERAGE TO (cfile)
			thisformset.cCoverage=cfile
			WAIT WINDOW COVERAGE_STARTED TIMEOUT 2
			RETURN .t.
			ELSE
			RETURN .f. 
		ENDIF 
	ENDPROC

	PROCEDURE stopcoverage
		LOCAL cfile
		IF !EMPTY(SET("Coverage"))
			cfile=SET("Coverage")
			thisformset.openlogfile(cfile)
		ENDIF 
		SET COVERAGE TO 
		thisformset.ccoverage=''
	ENDPROC

	PROCEDURE viewhelp		&& View the readme
		IF FILE(THISFORMSET.localdir+'\readmecov.txt')
			ctext=FILETOSTR(THISFORMSET.localdir+'\readmecov.txt')
			WITH THISFORMSET
				.frmDisplay.edit1.VALUE=ctext
				.frmDisplay.WIDTH=800
				.frmDisplay.HEIGHT=600
				.frmDisplay.AUTOCENTER=.T.
				.frmDisplay.CAPTION="Help"
				.frmDisplay.SHOW(1)
			ENDWITH
		ENDIF
		
	ENDPROC

	PROCEDURE viewlogfile		&& View the coverage log
		IF !EMPTY(Thisformset.tcfile)
			WITH thisformset
			.frmDisplay.edit1.Value=FILETOSTR(.tcfile)
			.frmdisplay.Caption="Coverage Profile Log: "+.tcfile
			.frmdisplay.width=.FrmMain.Width-20
			.frmdisplay.height=.FrmMain.height-20
			.frmdisplay.AutoCenter=.t.
			.frmDisplay.show(1)
			ENDWITH 
		ENDIF 
	ENDPROC

	PROCEDURE viewslowlines		&& View slow lines report
		LOCAL nrec
		nrec=RECNO("covperf")
		csel="SELECT TOP "+TRANSFORM(thisformset.toppercent)+" PERCENT * FROM covperf ORDER BY " +;
		(IIF(thisformset.highlightcolumn=1,"First",IIF(thisformset.highlightcolumn=2,"Avg","total"))) + ;
		" descending into CURSOR slowlines "
		&csel
		toppercent=thisformset.toppercent
		basedon=(IIF(thisformset.highlightcolumn=1,"First",IIF(thisformset.highlightcolumn=2,"Avg","total")))
		thisformset.frmDisplay.width=1000
		thisformset.frmDisplay.height=600
		thisformset.frmDisplay.caption="Report Preview-Slow lines report"
		thisformset.frmDisplay.autocenter=.t.
		REPORT FORM (thisformset.localdir+'\slowlines.frx') PREVIEW WINDOW (thisformset.frmDisplay.Name)
		GOTO nrec
	ENDPROC

	PROCEDURE viewslowmethods
		LOCAL nrec
		nrec=RECNO("covperf")
		SELECT TOP (thisformset.toppercent) PERCENT SUM(covperf.TOTAL),;
			covperf.method, covperf.objclass, covperf.SOURCE;
			FROM covperf;
			GROUP BY covperf.method, covperf.objclass,;
			covperf.SOURCE;
			ORDER BY 1 DESC INTO cursor cutemp
			toppercent=thisformset.toppercent
			
			WITH thisformset
				.frmDisplay.width=1000
				.frmDisplay.height=600 
				.frmDisplay.caption="Report Preview-Slow methods report"
				.frmDisplay.autocenter=.t.
				REPORT FORM (thisformset.localdir+'\methodsummary.frx') WINDOW (thisformset.frmDisplay.Name) PREVIEW 
			ENDWITH 
		GOTO nrec
	ENDPROC

	PROCEDURE findform.cmdcancel.Click
			THISFORM.hide()
	ENDPROC

	PROCEDURE findform.cmdFind.Click
		IF EMPTY(THISFORM.combo2.DISPLAYVALUE)  && 1 field only
			MESSAGEBOX(FIELD_SRC)
			THISFORM.combo2.SETFOCUS
			RETURN
		ENDIF
		nrec=RECNO()
		cboval=THISFORM.combo1.DISPLAYVALUE
		cfield=UPPER(THISFORM.combo2.DISPLAYVALUE)
		corder=SYS(21)
		corder=TAG(VAL(corder))
		cval=EVALUATE(corder)
		SET EXACT ON
		DO CASE
			CASE INLIST(cfield,"CODE","SOURCE","OBJCLASS","FILETYPE","PROC")=.T.  &&character fields
				lfound=.F.
				SCAN REST
					cc="["+ALLTRIM(UPPER(cboval))+"]"+"$UPPER("+(cfield)+")"
					IF &cc AND RECNO()#nrec
						lfound=.T.
						EXIT
					ENDIF
				ENDSCAN
				IF !lfound
		
					WAIT WINDOW NOT_FOUND TIMEOUT 2
					GOTO nrec
				ENDIF
			CASE INLIST(cfield,"LINE","FIRST","AVG","HITS","TOTAL")=.T.  &&Numbers fields
				IF AT(">",cboval)>0 OR AT("<",cboval)>0 OR AT("=",cboval)>0 &&expression
					lfound=.F.
					SCAN REST
						cc=(cfield)+(cboval)
						IF &cc AND RECNO()#nrec
							lfound=.T.
							EXIT
						ENDIF
					ENDSCAN
					IF !lfound
						WAIT WINDOW "Not found!" TIMEOUT 2
						GOTO nrec
					ENDIF
				ELSE
					lfound=.F.
					SCAN REST
						IF TRANSFORM(EVAL(cfield))=(cboval) AND RECNO()#nrec
							lfound=.T.
							EXIT
						ENDIF
					ENDSCAN
					IF !lfound
						GO nrec
						WAIT WINDOW NOT_FOUND TIMEOUT 2
					ENDIF
				ENDIF
		ENDCASE
		IF THISFORMSET.ldraw
			THISFORMSET.FrmMain.LOCKSCREEN=.T.
			THISFORMSET.FrmMain.grdcov1.SETFOCUS  &&refresh
			THISFORMSET.FrmMain.grdcov1.ACTIVATECELL(THISFORMSET.FrmMain.grdcov1.ACTIVEROW,THISFORM.combo2.LISTINDEX)
			THIS.SETFOCUS
			THISFORMSET.FrmMain.LOCKSCREEN=.F.
		ENDIF
		RETURN
		
		
	ENDPROC

	PROCEDURE findform.cmdPrev.Click
		THISFORMSET.ldraw=.F.
		corder=SYS(21)
		corder=TAG(VAL(corder))
		ASC=.T.
		IF DESCENDING()
			SET ORDER TO (corder) ASCENDING
		ELSE
			ASC=.F.
			SET ORDER TO (corder) DESCENDING
		ENDIF
		THISFORM.cmdfind.CLICK()
		IF !ASC
			SET ORDER TO (corder) ASCENDING
		ELSE
			SET ORDER TO (corder) DESCENDING
		ENDIF
		
		THISFORMSET.FrmMain.LOCKSCREEN=.T.
		THISFORMSET.FrmMain.grdcov1.SETFOCUS  &&refresh
		THISFORMSET.FrmMain.grdcov1.ACTIVATECELL(THISFORMSET.FrmMain.grdcov1.ACTIVEROW,THISFORM.combo2.LISTINDEX)
		THIS.SETFOCUS
		THISFORMSET.FrmMain.LOCKSCREEN=.F.
		THISFORMSET.ldraw=.T.
		
	ENDPROC

	PROCEDURE findform.Combo1.Valid
			THIS.ADDITEM(THIS.TEXT)
	ENDPROC

	PROCEDURE findform.Error
		LPARAMETERS nError, cMethod, nLine
		thisformset.error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE findform.QueryUnload
		NODEFAULT 
		thisform.Visible=.f.
		RETURN .f.
	ENDPROC

	PROCEDURE findform.Show
		LPARAMETERS nStyle
		IF THISFORM.combo2.LISTCOUNT=0
			FOR x=1 TO FCOUNT()
				THISFORM.combo2.ADDITEM(Proper(FIELDS(x)))
			ENDFOR
			THISFORM.combo2.DISPLAYVALUE=Proper(FIELDS(1))
		ENDIF
		
	ENDPROC

	PROCEDURE frmDisplay.Error
		LPARAMETERS nError, cMethod, nLine
		thisformset.error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE frmDisplay.QueryUnload
		NODEFAULT 
		thisform.Visible=.f.
		
	ENDPROC

	PROCEDURE frmDisplay.Resize
		this.edit1.width=thisform.width-(2*thisformset.bordersize)
		this.edit1.Height=thisform.height-(2*thisformset.bordersize)
		this.edit1.Top=thisformset.bordersize
		this.edit1.Left=thisformset.bordersize
		thisform.Height=thisform.edit1.Height+(2*thisformset.bordersize)
		this.edit1.ReadOnly=.t.
	ENDPROC

	PROCEDURE frmDisplay.Show
		LPARAMETERS nStyle
		this.Resize()
	ENDPROC

	PROCEDURE FrmMain.Activate
		IF VARTYPE(THIS.oToolBar)#"O"
			thisform.AddProperty("oToolbar",' ')
			thisform.oToolbar=CREATEOBJECT("AddinFormToolbar")
			Thisform.oToolBar.parentform = Thisformset
			Thisformset.FrmMain.oToolBar.DOCK(0)
			Thisform.oToolBar.SHOW(1)
		* 	thisformset.FrmMain.oToolBar.cbofontsize.displayvalue=TRANSFORM(thisform.grdcov1.fontsize)
		ENDIF
		
	ENDPROC

	PROCEDURE FrmMain.Destroy
		IF USED('covperf')
			USE IN covperf
		ENDIF 
		RELEASE thisformset
	ENDPROC

	PROCEDURE FrmMain.Error
		LPARAMETERS nError, cMethod, nLine
		thisformset.Error(nError, cMethod, nLine) 
	ENDPROC

	PROCEDURE FrmMain.Load
		Thisformset.setsets()
		thisform.Width=_screen.Width
		thisform.height=_screen.height
		THISFORM.AUTOCENTER=.T.
		
		
	ENDPROC

	PROCEDURE FrmMain.QueryUnload
		LOCAL cOlddir,nDelete
		
		IF !THISFORMSET.ocovobjtype="O"  AND VARTYPE(_ocoverage)="O"  &&not started as addin
			RELEASE _ocoverage
		ENDIF
		THISFORMSET.ocovobj=NULL
		
		* make sure messageboxes below don't appear behind options dialog
		thisformset.frmOptions.Hide()
		SET COVERAGE TO
		CD (JUSTPATH(THISFORMSET.tcfile))
		IF !THISFORMSET.ldelete
			thisformset.deletetempfiles()
		ENDIF
		THISFORMSET.resetsets()
		
	ENDPROC

	PROCEDURE FrmMain.Resize
		LOCAL lnOldLockScreen
		WITH THISFORM
			lnOldLockScreen = .LOCKSCREEN
			.LOCKSCREEN = .T.
			.grdcov1.TOP=THISFORMSET.bordersize
			.grdcov1.LEFT=THISFORMSET.bordersize
			.grdcov1.WIDTH = .WIDTH- (2 * THISFORMSET.bordersize)
			.grdcov1.HEIGHT = .HEIGHT - (2 * THISFORMSET.bordersize)
			.LOCKSCREEN = lnOldLockScreen
		ENDWITH
		
	ENDPROC

	PROCEDURE frmOptions.cmdCancel.Click
		thisform.queryunload()
	ENDPROC

	PROCEDURE frmOptions.cmdFont.Click
		local lcFontString 
		lcFontString = Alltrim(thisform.textFontString.value)
		lcFontString = GetFont(Substr(lcFontString,1,At(",",lcFontString,1)-1), ;
				Int(Val(Substr(lcFontString,At(",",lcFontString,1)+1))),;
				Substr(lcFontString,At(",",lcFontString,2)+1))
		* will be empty if font dialog cancelled
		if !Empty(lcFontString)
			thisform.textFontString.value = lcFontString
			with thisform.textPreview
				.fontname = Substr(lcFontString ,1,At(",",lcFontString,1)-1)
				.fontsize = Int(Val(Substr(lcFontString,At(",",lcFontString,1)+1)))
				.fontbold = "B" $ Substr(lcFontString,At(",",lcFontString,2)+1)
				.fontitalic = "I" $ Substr(lcFontString,At(",",lcFontString,2)+1)
			endwith
		endif
		
	ENDPROC

	PROCEDURE frmOptions.cmdForeColor.Click
		nColor = GetColor(thisform.textPreview.ForeColor)
		IF nColor > -1
			thisform.textPreview.ForeColor = nColor
		ENDIF 
	ENDPROC

	PROCEDURE frmOptions.cmdForeColor.Error
		LPARAMETERS nError, cMethod, nLine
		this.parent.parentform.error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE frmOptions.cmdHighlightColor.Click
		local lnColor 
		lnColor = GetColor(thisform.textPreview.backcolor) 
		if lnColor != -1  && Dialog was not cancelled
			thisform.textPreview.backcolor = lnColor 
		endif
	ENDPROC

	PROCEDURE frmOptions.cmdOk.Click
		thisformset.highlightcolor=thisform.textPreview.BackColor
		thisformset.highlightduration=thisform.spnduration.value
		thisformset.toppercent=thisform.spntoppercent.value
		thisformset.highlightcolumn=thisform.optcol.value
		local lcFontString
		lcFontString = thisform.textFontString.value
		with thisformset.FrmMain.grdcov1
				.fontname = Substr(lcFontString ,1,At(",",lcFontString,1)-1)
				.fontsize = Int(Val(Substr(lcFontString,At(",",lcFontString,1)+1)))
				.fontbold = "B" $ Substr(lcFontString,At(",",lcFontString,2)+1)
				.fontitalic = "I" $ Substr(lcFontString,At(",",lcFontString,2)+1)
				.FORECOLOR = thisform.textPreview.ForeColor
				.resize()
		endwith
		thisformset.fontstring = thisform.textFontString.value
		thisform.hide
		
		
	ENDPROC

	PROCEDURE frmOptions.Error
		LPARAMETERS nError, cMethod, nLine
		thisformset.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE frmOptions.Hide
		DODEFAULT()
		thisformset.frmMain.enabled=.t.
	ENDPROC

	PROCEDURE frmOptions.Init
		thisform.spnDURATION.Value=thisformset.highlightduration
		thisform.spnTOPPERCENT.Value=thisformset.toppercent
		thisform.cmdHighLightcolor.ForeColor=thisformset.highlightcolor
		thisform.optCOL.Value=thisformset.highlightcolumn
		thisform.spnDURATION.Increment=.000001
		
	ENDPROC

	PROCEDURE frmOptions.QueryUnload
		* we cancelled out
		NODEFAULT
		thisform.hide
	ENDPROC

	PROCEDURE frmOptions.Show
		LPARAMETERS nStyle
		thisformset.frmMain.enabled=.f.
		local lcFontString 
		lcFontString = thisformset.fontstring
		thisform.textFontString.Value = lcFontString 
		with thisform.textPreview
			.fontname = Substr(lcFontString ,1,At(",",lcFontString,1)-1)
			.fontsize = Int(Val(Substr(lcFontString,At(",",lcFontString,1)+1)))
			.fontbold = "B" $ Substr(lcFontString,At(",",lcFontString,2)+1)
			.fontitalic = "I" $ Substr(lcFontString,At(",",lcFontString,2)+1)
			.ForeColor = thisformset.frmMain.grdCov1.forecolor
			.BackColor = thisformset.highlightcolor
		endwith
		
		
	ENDPROC

ENDDEFINE
