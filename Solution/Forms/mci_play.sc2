*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="mci_play.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cmdtop AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPlay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Player" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdStop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPause" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLoading" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdclose1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOpen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Timer1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNonVisual" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEnd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdTop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="C_solutions1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Behindscenes1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="olePosition" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: disable		&& Resets all elements to a state with no media file loaded.
		*m: domci		&& Executes an MCI command string.
		*m: getmcierror		&& Returns the last MCI error message.
		*m: showmcierror		&& Displays the last MCI error.
		*p: mcierror		&& Displays the last MCI error that occured in a messagebox.
		*p: mcierrorstring		&& Saves the last MCI error string.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Play Multimedia Files Using MCI Commands"
	DataSession = 2
	DoCreate = .T.
	Height = 386
	HelpContextID = 1231572
	Left = 13
	MaxButton = .F.
	mcierror = 0		&& Displays the last MCI error that occured in a messagebox.
	mcierrorstring = 		&& Saves the last MCI error string.
	Name = "CMDTOP"
	Top = 4
	Width = 451

	ADD OBJECT 'Behindscenes1' AS behindscenes WITH ;
		Left = 415, ;
		Name = "Behindscenes1", ;
		TabIndex = 8, ;
		Top = 322
		*< END OBJECT: ClassLib="..\solution.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'C_solutions1' AS c_solutions WITH ;
		Height = 18, ;
		Left = 378, ;
		Name = "C_solutions1", ;
		Top = 104, ;
		Width = 25
		*< END OBJECT: ClassLib="..\solution.vcx" BaseClass="custom" />

	ADD OBJECT 'Cmdclose1' AS cmdclose WITH ;
		Left = 368, ;
		Name = "Cmdclose1", ;
		TabIndex = 9, ;
		Top = 351
		*< END OBJECT: ClassLib="..\solution.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEnd' AS commandbutton WITH ;
		Caption = ">", ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 10, ;
		Height = 25, ;
		Left = 334, ;
		Name = "cmdEnd", ;
		TabIndex = 7, ;
		Top = 341, ;
		Width = 15
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpen' AS commandbutton WITH ;
		Caption = "\<Open...", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 368, ;
		Name = "cmdOpen", ;
		TabIndex = 1, ;
		Top = 197, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdPause' AS commandbutton WITH ;
		Caption = "P\<ause", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 368, ;
		Name = "cmdPause", ;
		TabIndex = 3, ;
		Top = 254, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdPlay' AS commandbutton WITH ;
		Caption = "\<Play", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 368, ;
		Name = "cmdPlay", ;
		TabIndex = 2, ;
		Top = 226, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdStop' AS commandbutton WITH ;
		Caption = "\<Stop", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 368, ;
		Name = "cmdStop", ;
		TabIndex = 4, ;
		Top = 283, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdTop' AS commandbutton WITH ;
		Caption = "<", ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 10, ;
		Height = 25, ;
		Left = 19, ;
		Name = "cmdTop", ;
		TabIndex = 5, ;
		Top = 341, ;
		Width = 15
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Caption = "The Multimedia Command Interface (MCI) allows you to play multimedia files using Windows API calls.  Open a multimedia file by clicking the Open button.  Once the file is playing, you can change the position by dragging the slider below.", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 21, ;
		Name = "Label1", ;
		TabIndex = 0, ;
		Top = 22, ;
		Width = 409, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = " Instructions ", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 19, ;
		Name = "Label2", ;
		TabIndex = 0, ;
		Top = 7, ;
		Width = 62
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblLoading' AS label WITH ;
		Caption = "Loading File...", ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontSize = 12, ;
		Height = 25, ;
		Left = 122, ;
		Name = "lblLoading", ;
		TabIndex = 0, ;
		Top = 188, ;
		Visible = .F., ;
		Width = 120
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblNonVisual' AS label WITH ;
		Caption = "Non-visual media file loaded.", ;
		FontBold = .T., ;
		FontSize = 12, ;
		Height = 22, ;
		Left = 65, ;
		Name = "lblNonVisual", ;
		TabIndex = 0, ;
		Top = 187, ;
		Visible = .F., ;
		Width = 228
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'olePosition' AS olecontrol WITH ;
		Enabled = .F., ;
		Height = 19, ;
		Left = 38, ;
		Name = "olePosition", ;
		TabIndex = 6, ;
		Top = 343, ;
		Width = 293
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgAAAAEAAAD+////AAAAAAAAAAD////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9/////vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADDA1EmD08ABAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAB8AAAAAAAAABAAAAAIAAAD+/////v///wwkoXREbFqAMDwKDYoIUM0EggAAABIHgAA9wEAABGuKwoAAAYAHAAAAAAAAAAFAAAAAQAAAAAAAAAKAAAAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTF9AAAATQBpAGMAcgBvAHMAbwBmAHQAIABEAGEAdABlACAAYQABAACACgAAAFRpY2tTdHlsZQAJAAAASQoAAAADAAAAAG8AbgB0AHIAbwBsACwAIAB2AGUAcgBzAGkAbwBuACAAAAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAHvzasAAAUA0E/9AQYAAAAAAAAAwMDAAEjtEgAf3uy9AQAFAEjtEgA4ADcANQA0AEQAQQAxAH0AAABNAGkAYwByAG8AcwBvAGYAdAAgAEYAbABhAHQAIABTAGMAcgBvAGwAbABiAGEAcgAgAEMAbwBuAHQAcgBvAGwALAAgAHYAZQByAHMAaQBvAG4AIAA2AC4AMAAJAHsARgBFADMAOAA3ADUAMwBBAC0ANAA0AEEAMwAtADEAMQBEADEALQBCADUAQgA3AC0AMAAwADAAMABDADAAOQAwADAAMABDADQAfQAAAA==" />

	ADD OBJECT 'Player' AS shape WITH ;
		BorderStyle = 0, ;
		BorderWidth = 1, ;
		Height = 240, ;
		Left = 17, ;
		Name = "Player", ;
		Top = 82, ;
		Width = 320
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Height = 298, ;
		Left = 11, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 77, ;
		Width = 346
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackStyle = 0, ;
		Height = 56, ;
		Left = 11, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Top = 13, ;
		Width = 429
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Timer1' AS timer WITH ;
		Height = 23, ;
		Interval = 0, ;
		Left = 381, ;
		Name = "Timer1", ;
		Top = 75, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Activate
		THIS.c_solutions1.saveHelp
	ENDPROC

	PROCEDURE Deactivate
		IF TYPE("THIS.c_solutions1") = "O" THEN
			THIS.c_solutions1.restoreHelp
		ENDIF
	ENDPROC

	PROCEDURE disable		&& Resets all elements to a state with no media file loaded.
		PARAMETERS lDisable
		
		*!* This is a one-stop place to disable and enable all 
		*!* approprate controls based on whether a media file is
		*!* loaded or not
		IF lDisable = .T. THEN
			THISFORM.cmdPlay.enabled = .F.
			THISFORM.cmdPause.enabled = .F.
			THISFORM.cmdStop.enabled = .F.
			THISFORM.cmdTop.enabled = .F.
			THISFORM.cmdEnd.enabled = .F.
			THISFORM.lblNonVisual.visible = .F.
			THISFORM.olePosition.value = 0
			THISFORM.olePosition.enabled = .F.
		ELSE
			THISFORM.cmdPlay.enabled = .T.
			THISFORM.cmdPause.enabled = .T.
			THISFORM.cmdStop.enabled = .T.
			THISFORM.cmdTop.enabled = .T.
			THISFORM.cmdEnd.enabled = .T.
			THISFORM.olePosition.enabled = .T.
		ENDIF	
	ENDPROC

	PROCEDURE domci		&& Executes an MCI command string.
		LPARAMETERS cMCIcmd
		
		*!* This method takes a MCI command string and executes it using
		*!* the Windows API function mciSendString
		
		*!* If the function executes successfully, the result is returned.
		*!* Otherwise, the error string is returned.
		cRetString = space(80)
		nRetValue = mciSendString(cMCIcmd,@cRetString,len(cRetString),0)
		
		cErr = THIS.getMCIerror(nRetValue)
		IF nRetValue > 0
			RETURN CeRR
		ENDIF
		   
		RETURN TRIM(STRTRAN(cRetString,chr(0),""))
		
	ENDPROC

	PROCEDURE getmcierror		&& Returns the last MCI error message.
		LPARAMETERS cError
		LOCAL lcErrorString,nError
		
		*!* This method is called from the doMCI to retrieve the last
		*!* MCI error string.
		*!* This function also saves the last error number and string
		*!* into properties associated with the form.
		
		nError=0
		IF TYPE("cError")="C"
		   IF LEFT(cError,7)="*ERROR*"
		      nError=val(substr(cError,8))
		   ENDIF
		ENDIF   
		
		IF TYPE("cError")="N"
		  nError=cError
		ENDIF
		
		cErrorString=SPACE(256)  
		=mciGetErrorString(nError,@cErrorString,len(cErrorString))
		
		THISFORM.MCIerror = nError
		THISFORM.MCIerrorString = cErrorString
		
		RETURN TRIM(CHRTRAN(cErrorString,CHR(0),""))
		
	ENDPROC

	PROCEDURE Init
		IF  fontmetric(1, 'MS Sans Serif', 8, '') # 13 OR ;
			fontmetric(4, 'MS Sans Serif', 8, '') # 2 OR ;
			fontmetric(6, 'MS Sans Serif', 8, '') # 5 OR ;
			fontmetric(7, 'MS Sans Serif', 8, '') # 11
			this.setall('fontname', 'Tahoma')  
		ELSE
			this.setall('fontname','MS Sans Serif')
		ENDIF
		this.setall('fontsize',8)
		
		
		*!* This is the primary Windows API function that is used to 
		*!* send MCI commands
		DECLARE INTEGER mciSendString ;
		   IN WinMM.DLL ;
		   STRING cMCIString,;
		   STRING @cRetString,;
		   INTEGER nRetLength,;
		   INTEGER hInstance
		
		*!* This function allows us to retrieve the last MCI error that occured
		DECLARE INTEGER mciGetErrorString ;
		   IN WINMM.DLL ;
		   INTEGER nErrorno, ;
		   STRING @cBuffer, ;
		   INTEGER nBufSize
		   
		*!* When MCI plays a video, it creates its own Window.  By using
		*!* this Windows API function we can position this Window to be
		*!* in the same position as our Player rectangle on the form
		DECLARE integer SetWindowPos ;
			IN User32 ;
			integer, integer, integer, integer, integer, integer, integer
		
	ENDPROC

	PROCEDURE showmcierror		&& Displays the last MCI error.
		
		*!* This method shows the last MCI error string that occured.
		messagebox(THISFORM.MCIerrorString + " (" + STR(THISFORM.MCIerror) + ")")
		
	ENDPROC

	PROCEDURE cmdEnd.Click
		
		*!* Make sure that there is a media file loaded
		IF THISFORM.doMCI("STATUS FoxMedia READY") = "true" THEN
			*!* If so, seek to the end
			THISFORM.doMCI("SEEK FoxMedia to end")
		ENDIF
		
	ENDPROC

	PROCEDURE cmdOpen.Click
		
		*!* Check to make sure a media file is not already open
		cCmd = ("STATUS FoxMedia READY")
		IF THISFORM.doMCI(cCmd) = "true" THEN
			*!* If one is, close it
			cCMD = ("CLOSE FoxMedia WAIT")
			THISFORM.doMCI(cCmd)
			
			*!* And use the custom Disable method of the form to disable
			*!* all appropriate controls
			THISFORM.disable(.T.)
		ENDIF
		
		*!* Prompt the user for the media file to open
		cFileName = GETFILE("avi|mov|wav|mid","Select file to play")
		IF !EMPTY(cFileName) THEN
			
			_SCREEN.MousePointer = 11
			THISFORM.lblLoading.visible = .T.
		
			* Returns Handle of Main VFP Window
			Main_hWnd =_VFP.hWnd
			
			* Get Handle of the form with FOXTOOLS.FLL
			cur_window = THISFORM.HWnd 
			
			NullPointer = 0
			
			*!* Set up open MCI command into string variable
			cCmd = ('OPEN "' + cFileName + '" alias FoxMedia' + ;
			  ' style child parent ' + ALLTRIM(STR(cur_window)) + ' WAIT')
		
			*!* Execute the MCI command
			THISFORM.doMCI(cCmd)
		
			*!* Check to see if MCI command succeeded
			IF THISFORM.MCIerror > 0 THEN
				*!* If not, it might be a non-visual media
				*!* We'll try to open it without setting the window parent
				cCmd = ('OPEN "' + cFileName + '" alias FoxMedia WAIT')
				THISFORM.doMCI(cCmd)
				IF THISFORM.MCIerror > 0 THEN
					*!* Nope, still won't open.  Some other error.  
					*!* Let's show the user the MCI error and get out
					messagebox(THISFORM.MCIerrorString)
					THISFORM.lblLoading.visible = .F.
					_SCREEN.MousePointer = 0
					RETURN
				ELSE
					*!* It's not a visual media, so let's show a label
					*!* to let the user know the media has been loaded
					THISFORM.lblNonVisual.visible = .T.
				ENDIF
			ELSE
				*!* It does have visual media, so we need to set up the window
				*!* it will play in.
				
				*!* Get the window handle of the window playing the video
				cCmd = "status FoxMedia window handle wait"
				hWin = INT(VAL(THISFORM.doMCI(cCmd)))
			
				*!* Once we have the window handle, we need to position
				*!* the video window to be the same position and size
				*!* as our player rectangle on the form
				x1Pos = THISFORM.player.LEFT
				y1Pos = THISFORM.player.TOP
				x2Pos = THISFORM.player.width
				y2pos = THISFORM.player.height
		
				*!* Use the SetWindowPos Windows function to set position and size
				setWindowPos(hWin,0,x1Pos,y1Pos,x2Pos,y2Pos,0)
		
				*!* Everything's done, let's show the video
				cCmd = ("WINDOW FoxMedia state show")
				THISFORM.doMCI(cCmd)
		
			ENDIF
		
			*!* Set the device to use milliseconds when setting/getting position
			THISFORM.doMCI("SET FoxMedia time format milliseconds")
		
			*!* Enable all appropriate controls
			THISFORM.disable(.F.)
			
			THISFORM.lblLoading.visible = .F.
			_SCREEN.MousePointer = 0
		ENDIF
	ENDPROC

	PROCEDURE cmdPause.Click
		
		*!* Check to see if there is media acutally playing
		IF THISFORM.doMCI("STATUS FoxMedia mode") = "playing" THEN
		
			*!* Yes there is, so execute the PAUSE MCI command
			THISFORM.doMCI("PAUSE FoxMedia")
			IF THISFORM.MCIerror > 0 THEN
				THISFORM.showMCIerror
			ELSE
				THISFORM.timer1.interval = 0
			ENDIF
		ELSE
			THISFORM.cmdPlay.click
		ENDIF
	ENDPROC

	PROCEDURE cmdPlay.Click
		
		*!* First need to see if the media is at the end 
		*!* by comparing the total length with the current position
		nMediaLength = VAL(THISFORM.doMCI("STATUS FoxMedia length"))
		nMediaPosition = VAL(THISFORM.doMCI("STATUS FoxMedia position"))
		
		IF nMediaPosition >= nMediaLength THEN
			*!* The media is at the end, so we need to seek back to the start
			*!* of the clip before playing
			THISFORM.doMCI("SEEK FoxMedia to start WAIT")
		ENDIF
		
		*!* Now we can play the media
		THISFORM.doMCI("PLAY FoxMedia")
		IF THISFORM.MCIerror > 0 THEN
			THISFORM.showMCIerror
		ELSE
			THISFORM.timer1.interval = 360
		ENDIF
		
	ENDPROC

	PROCEDURE cmdStop.Click
		
		cCmd = "CLOSE FoxMedia"
		THISFORM.doMCI(cCmd)
		IF THISFORM.MCIerror > 0 THEN
			THISFORM.showMCIerror
		ENDIF
		
		THISFORM.timer1.interval = 0
		THISFORM.disable(.T.)
	ENDPROC

	PROCEDURE cmdTop.Click
		
		*!* Make sure that there is a media file loaded
		IF THISFORM.doMCI("STATUS FoxMedia READY") = "true" THEN
			*!* If so, seek to the beginning
			THISFORM.doMCI("SEEK FoxMedia to start")
		ENDIF
		
	ENDPROC

	PROCEDURE olePosition.Change
		*** OLE Control Event ***
		
		*!* Make sure that there is a media file loaded
		IF THISFORM.doMCI("STATUS FoxMedia READY") = "true" THEN
			*!* If so, seek to the end
			nPos = THIS.VALUE
			IF nPos = 0 THEN
				THISFORM.doMCI("SEEK FoxMedia to start")
			ELSE
				THISFORM.doMCI("SEEK FoxMedia to " + STR(nPos))
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE olePosition.MouseDown
		*** OLE Control Event ***
		LPARAMETERS button, shift, x, y
		THISFORM.timer1.tag = STR(THISFORM.timer1.interval)
		THISFORM.timer1.interval = 0
	ENDPROC

	PROCEDURE olePosition.MouseUp
		*** OLE Control Event ***
		LPARAMETERS button, shift, x, y
		THISFORM.timer1.interval = VAL(THISFORM.timer1.tag)
	ENDPROC

	PROCEDURE Timer1.Timer
		
		*!* Make sure that there is a media file loaded
		cCmd = ("STATUS FoxMedia READY")
		IF THISFORM.doMCI(cCmd) = "true" THEN
		
			*!* Need to get the total length of the clip and the current position
			nMediaLength = VAL(THISFORM.doMCI("STATUS FoxMedia length"))
			nMediaPosition = VAL(THISFORM.doMCI("STATUS FoxMedia position"))
			
			*!* Since the gauge control only allows a MAX setting up to 32,000
			*!* we need to proportionally reduce the length and position values
			*!* to be below 32000.
		*	DO WHILE !BETWEEN(nMediaLength,0,32000)
		*	nMediaLength = nMediaLength/2
		*		nMediaPosition = nMediaPosition/2
		*	ENDDO
			*!* Now we can set the proper gauge properties.
			THISFORM.olePosition.Max = nMediaLength
			THISFORM.olePosition.value = nMediaPosition
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	Name = "Dataenvironment"

ENDDEFINE
