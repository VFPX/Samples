*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="solution.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS behindscenes AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = ""
	Height = 23
	Name = "behindscenes"
	Picture = bts.bmp
	ToolTipText = "Help"
	Width = 25
	
	PROCEDURE Click
		#DEFINE FOXHELPFILE		"DV_FOXHELP.CHM"
		LOCAL lcSaveHelp,lcFoxHelp
		lcSaveHelp = SET("Help",1)
		IF ATC(FOXHELPFILE,lcSaveHelp)=0
			DO CASE
			CASE FILE(ADDBS(HOME(1))+FOXHELPFILE)
				lcFoxHelp=ADDBS(HOME(1))+FOXHELPFILE
			CASE FILE(ADDBS(HOME(1))+FOXHELPFILE)
				lcFoxHelp=ADDBS(HOME(1))+FOXHELPFILE
			OTHERWISE
				RETURN
			ENDCASE
			SET HELP TO (lcFoxHelp)
		ENDIF
		IF THISFORM.HelpContextID > 0
			HELP ID (THISFORM.HelpContextID)
		ELSE
			HELP
		ENDIF
		IF ATC(FOXHELPFILE,lcSaveHelp)=0 AND !EMPTY(lcSaveHelp)
			SET HELP TO (lcSaveHelp)
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS c_solutions AS custom 		&& common solutions sample functionality
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addtopath
		*m: getdirectory
		*m: restorehelp		&& Restores the help file setting previously saved.
		*m: savehelp		&& Saves the current help file setting.
		*p: autosetdefault		&& Whether or not to set the default directory in the Init of the class
		*p: ccurrency		&& Old SET CURRENCY TO setting
		*p: cdate		&& Old SET DATE TO setting
		*p: cdeleted
		*p: cdirectory		&& Stores the SET DEFAULT directory when the form was run and restores it after the form is closed.
		*p: centerform		&& If .T., Thisform.Autocenter is set to .T.
		*p: chelpfile		&& Help file for the sample
		*p: coldhelp		&& original help file
		*p: coldpath
		*p: cpoint		&& old SET POINT TO setting
		*p: csep		&& Old SET SEPARATOR TO setting
		*p: ctalk
		*p: fixedformborder		&& If .T., borderstyle of the form is set to .T.
		*p: lcalledbysolution
	*</DefinedPropArrayMethod>

	PROTECTED ccurrency,cdate,cdeleted,cdirectory,chelpfile,coldhelp,cpoint,csep,ctalk
	ccurrency = 		&& Old SET CURRENCY TO setting
	cdate = 		&& Old SET DATE TO setting
	cdeleted = 
	cdirectory = 		&& Stores the SET DEFAULT directory when the form was run and restores it after the form is closed.
	centerform = .T.		&& If .T., Thisform.Autocenter is set to .T.
	chelpfile = dv_foxhelp.chm		&& Help file for the sample
	coldhelp = 		&& original help file
	coldpath = 
	cpoint = 		&& old SET POINT TO setting
	csep = 		&& Old SET SEPARATOR TO setting
	ctalk = OFF
	fixedformborder = .T.		&& If .T., borderstyle of the form is set to .T.
	Height = 18
	Name = "c_solutions"
	Width = 25
	
	PROCEDURE addtopath
		LPARAMETER tcPath
		
		LOCAL lcPath
		tcPath = ALLTRIM(tcPath)
		lcSetPath = ALLTRIM(SET("PATH"))
		
		IF ATC(tcPath,lcSetPath)#0
			DO CASE
			CASE ATC(tcPath+";",lcSetPath)#0
				RETURN
			CASE ATC(ADDBS(tcPath)+";",lcSetPath)#0
				RETURN
			CASE ATC(RIGHT(lcSetPath,LEN(tcPath)),tcPath)#0
				RETURN
			ENDCASE
		ENDIF
		
		IF EMPTY(lcSetPath)
			SET PATH TO (tcPath)	
		ELSE
			SET PATH TO (lcSetPath + IIF(RIGHT(lcSetPath,1)=";","",";") + tcPath)
		ENDIF
		
	ENDPROC

	PROCEDURE Destroy
		* Restore old SET settings.  This isn't necessary for forms 
		* with a Private DataSession
		
		cMacro = THIS.cTalk
		SET TALK &cMacro
		cMacro = THIS.cDeleted
		SET DELETED &cMacro
			
		SET POINT TO THIS.cPoint
		SET SEPARATOR TO THIS.cSep
		SET DATE TO (THIS.cDate)
		SET CURRENCY TO THIS.cCurrency
		
		THIS.restoreHelp
		
		IF EMPTY(THIS.cOldPath)
			SET PATH TO
		ELSE
			SET PATH TO (THIS.cOldPath)
		ENDIF
		
		IF THIS.AutoSETDEFAULT AND !EMPTY(THIS.cDirectory)
			SET DEFAULT TO (THIS.cDirectory)
		ENDIF
		
		
		* If this form is run from the solutions form,
		* the hidden form object, solutions, is made visible when
		* this control is destroyed.
		
		IF THIS.lCalledBySolution AND NOT (TYPE('solution')='U' OR ISNULL(solution))
			Solution.Show
			THISFORM.Visible = .F.
		ENDIF
		
	ENDPROC

	PROTECTED PROCEDURE getdirectory
		* Return the directory name from a file
		LPARAMETERS lcFile
		
		IF TYPE("lcFile") = "L" && No parameter passed in
			IF TYPE("THISFORM") = "O"
				lcFile = SYS(1271, THISFORM)
				IF VARTYPE(lcFile) = "L"
					lcFile = SYS(16,1)
				ENDIF
			ELSE
				lcFile = SYS(16,1)
			ENDIF
		ENDIF
		
		RETURN JUSTPATH(lcFile)
		
	ENDPROC

	PROCEDURE Init
		#define POINT_LOC "."
		#define SEP_LOC ","
		#define DATE_LOC "AMERICAN"
		#define CURRENCY_LOC "$"
		*----------------------< c_solutions >-----------------------*
		* This class is added to all forms in the Solutions
		* sample suite.
		*---------------------------------------------------------*
		LOCAL lcDir, lcSamplePaths, lcHome
		
		IF ATC("SOLUTIONS.",PROG(PROG(-1)-1))#0
			THIS.lCalledBySolution = .T.
		ENDIF
		
		THISFORM.ShowTips = .T.
		THISFORM.AutoCenter = This.CenterForm
		IF THIS.FixedFormBorder
			THISFORM.BorderStyle = 2 && Fixed Dialog
		ENDIF
		
		THIS.cOldPath = SET("PATH")
		SET PATH TO 
		lcDir= THIS.GetDirectory()	&&directory of sample
		
		IF !EMPTY(HOME(2))
			lcHome = HOME(2)
		ELSE
			lcHome = HOME()+"Samples\"
		ENDIF
		
		THIS.AddToPath(lcHome+"CLASSES")
		THIS.AddToPath(lcHome+"SOLUTION")
		THIS.AddToPath(lcDir)
		
		THIS.cDirectory = SET("DEFAULT") + CURDIR()
		IF THIS.AutoSETDEFAULT
			SET DEFAULT TO (lcDir)
		ENDIF
		
		* Save old settings to be restored.
		THIS.cPoint = SET("POINT")
		THIS.cSep = SET("SEPARATOR")
		THIS.cDate = SET("DATE")
		THIS.cCurrency = SET("CURRENCY", 1)
		THIS.cTalk = SET("TALK")
		THIS.cDeleted = SET("DELETED")
		
		SET POINT TO POINT_LOC
		SET SEPARATOR TO SEP_LOC
		SET DATE TO DATE_LOC
		SET CURRENCY TO CURRENCY_LOC
		SET DELETED ON && ignore records marked for deletion
		SET TALK OFF
		
	ENDPROC

	PROCEDURE restorehelp		&& Restores the help file setting previously saved.
		IF !EMPTY(THIS.cOldHelp)
			IF FILE(THIS.cOldHelp)
				SET HELP TO (THIS.cOldHelp)
			ELSE
				SET HELP TO EVAL(THIS.cOldHelp)
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE savehelp		&& Saves the current help file setting.
		IF !UPPER(JUSTSTEM(THIS.cHelpFile)) $ UPPER(SET("HELP",1)) THEN
			THIS.cOldHelp = SET("HELP",1)
		ENDIF
		IF !EMPTY(THIS.cHelpFile) AND FILE(THIS.cHelpFile) THEN
			SET HELP TO (THIS.cHelpFile)
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdclose AS commandbutton 		&& Close button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Cancel = .T.
	Caption = "Close"
	FontBold = .F.
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 23
	Name = "cmdclose"
	Width = 72
	
	PROCEDURE Click
		IF TYPE("THISFORM.Parent") = "O"
			THISFORMSET.Release
		ELSE
			THISFORM.Release
		ENDIF
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL lnChoice
		#DEFINE CR CHR(13)
		DO CASE
			CASE nError = 1545 && Uncommitted changes
			*------------------------------------
				#DEFINE MSG1_LOC "Do you want to save your changes?"
				#DEFINE MSG2_LOC "Uncommitted Changes"
				lnChoice = MESSAGEBOX(MSG1_LOC, 4+48+0, MSG2_LOC)
				DO CASE
					CASE lnChoice = 6 && yes
						=TABLEUPDATE(.T., .T.)
					CASE lnChoice = 7 && no
						=TABLEREVERT(.T.)
				ENDCASE
				OTHERWISE  && Unanticipated error
			*--------------------------------------	
				#DEFINE NUM_LOC "Error Number: "
				#DEFINE PROG_LOC "Program: "
				#DEFINE CAP_LOC "ERROR"
				lcMsg = NUM_LOC + ALLTRIM(STR(nError)) + CR + CR + ;
						MESSAGE()+ CR + CR + PROG_LOC + PROGRAM(1)
				lnChoice = MESSAGEBOX(lcMsg, 2+48+512, CAP_LOC)
				DO CASE
					CASE lnChoice = 3 &&Abort
						CANCEL
					CASE lnChoice = 4 &&Retry
						RETRY
					CASE lnChoice = 5 &&Ignore
						RETURN
				ENDCASE
		ENDCASE
		
	ENDPROC

ENDDEFINE

DEFINE CLASS datachecker AS custom 		&& manages conflicts
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\classes\checker.bmp" ClassIcon="..\classes\checker.bmp" />

	*<DefinedPropArrayMethod>
		*m: checkconflicts		&& Notifies a user if someone else has changed the data in the table after he or she began editing a record.
		*m: handlerecord		&& compares the current value, old value, and original value of each field, displaying a messagebox if a change or conflict is detected.
		*m: string		&& returns type 'c' equivalent of passed value
		*m: verifychanges		&& Prompts a user to save all changes made to a table or record.
		*m: verifyeachchange		&& Prompts a user to confirm each change he or she made.
	*</DefinedPropArrayMethod>

	Height = 15
	Name = "datachecker"
	Width = 23
	
	PROCEDURE checkconflicts		&& Notifies a user if someone else has changed the data in the table after he or she began editing a record.
		*---------------------------------------------------------------*
		*  Checks to see whether another user has changed the value 
		*  stored in a table.  If so, calls HandleRecord to display
		*  the new value and allow the user to decide what to do.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Changes Made to the Current Values
		*    1 -- Successfully Made User-Specified Changes
		*	 2 -- Unable to Make Write One or More User-Specifed Changes to Table
		*---------------------------------------------------------------*
		
		#define NOBUFF1_LOC 'Data buffering is not enabled.'
		LOCAL lnSuccess, llnRec
		m.lnSuccess = 0  
		
		DO CASE
			CASE INLIST(CURSORGETPROP('Buffering'), 2,3) && Row Buffering
				IF '2' $ GETFLDSTATE(-1)				 && Data has changed
					m.lnSuccess = THIS.HandleRecord(0)
				ENDIF	
			CASE INLIST(CURSORGETPROP('Buffering'), 4,5) && Table Buffering
				m.llnRec = GETNEXTMODIFIED(0)
				DO WHILE m.llnRec > 0
					GO m.llnRec
					m.lnSuccess = IIF(m.lnSuccess != 2, THIS.HandleRecord(0), 2)
					m.llnRec = GETNEXTMODIFIED(m.llnRec)	
				ENDDO
			OTHERWISE									 && no buffering
				WAIT WINDOW NOBUFF_LOC NOWAIT
		ENDCASE
		RETURN m.lnSuccess
	ENDPROC

	PROCEDURE handlerecord		&& compares the current value, old value, and original value of each field, displaying a messagebox if a change or conflict is detected.
		*---------------------------------------------------------------*
		*  This method is called from the CheckConflicts method and the 
		*  VerifyEachChange method.  It loops through each field in the
		*  current record and compares the current value with the value
		*  stored in the table. If a value of 1 is passed to this method,
		*  the method also compares the current value with the value in
		*  the field before user made any edits.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Change Made to the Current Value
		*    1 -- Successfully Made User-Specified Change
		*	 2 -- Unable to Make User-Specifed Change
		*---------------------------------------------------------------*
		
		LPARAMETERS lnScope
		
		*--Valid values for lnScope:
		* 	0 - Only manage conflicts   && default
		*   1 - Also prompt for changed values
		
		* Verify parameter
		IF TYPE("m.lnScope") != "N"
			m.lnScope = 0 
		ENDIF
		IF !BETWEEN(m.lnScope, 0, 1)
			#define WINDMSG_LOC "Invalid value passed to conflictmanager.handlerecord"
			WAIT WINDOW WINDMSG_LOC
		ENDIF
		
		* Declare constants & variables
		#define CR_LOC CHR(13)
		#define SAVE_LOC "Do you want to overwrite the current value with your change?" + CR_LOC + "(Choose 'Cancel' to restore the original value.)"
		#define CONFLICT_LOC "Data Conflict"
		#define VERIFY_LOC "Verify Changes"
		#define ORG_LOC "Original Value: "
		#define CUR_LOC "Current Value: " 
		#define CHG_LOC "Your change: "
		#define MEMO_LOC " is a Memo field."
		#define FIELD_LOC "Field: "
		#define RECORD_LOC "Record Number: "
		#define VALCHG1_LOC "A value has been changed by another user."
		#define VALCHG2_LOC "A value has been changed."
		
		LOCAL lnChoice, lnField, lcField, luOldVal, luCurVal, luField, llMadeChange, llSuccess
		m.llMadeChange = .F.
		m.llSuccess = .T.
		
		* refresh current record in views before checking for conflicts
		IF CURSORGETPROP('SourceType') != 3 && not a local table
			=REFRESH()
		ENDIF
		
		* Check each field in the record for conflict or value change
		FOR m.lnField = 1 to FCOUNT()
			m.lnChoice = 0
			
			m.lcField = FIELD(m.lnField)
			IF TYPE(m.lcField) = "G"
				LOOP && Can't check general fields
			ENDIF
			m.luOldVal = OLDVAL(m.lcField)
			m.luCurVal = CURVAL(m.lcField)
			
			DO CASE
				* -----< check for conflicts only >--------
				CASE m.lnScope = 0
					IF m.luOldVal != m.luCurVal
						m.llMadeChange = .T.  
						m.lnChoice = MESSAGEBOX(VALCHG1_LOC + CR_LOC + FIELD_LOC + lcField + CR_LOC + ;
						RECORD_LOC + ALLTRIM(STR(RECNO())) + ;
							IIF(TYPE("m.lcField") != "M", CR_LOC + CR_LOC + ORG_LOC + THIS.String(m.luOldVal) + ;
							CR_LOC + CUR_LOC + THIS.String(m.luCurVal) + ;
							CR_LOC + CHG_LOC + THIS.String(EVAL(m.lcField)), CR_LOC + CR_LOC + m.lcField + MEMO_LOC) + ;
							CR_LOC + CR_LOC + SAVE_LOC, + 3+48+0, CONFLICT_LOC)					
					ENDIF
				* -----< check for conflicts and verify all changes >--------
				CASE m.lnScope = 1 && Verify all changes
					m.luField = EVAL(m.lcField)
					IF m.luOldVal != m.luField OR m.luCurVal != m.luField
						m.llMadeChange = .T.  
						m.lnChoice = MESSAGEBOX(VALCHG2_LOC + CR_LOC + FIELD_LOC + m.lcField + CR_LOC + ;
						RECORD_LOC + ALLTRIM(STR(RECNO())) + ;
							IIF(TYPE("m.lcField") != "M", CR_LOC + CR_LOC + ORG_LOC + THIS.String(m.luOldVal) + ;
							CR_LOC + CUR_LOC + THIS.String(m.luCurVal) + ;
							CR_LOC + CHG_LOC + THIS.String(EVAL(m.lcField)), CR_LOC  + CR_LOC + m.lcField + MEMO_LOC) + ;
						CR_LOC + CR_LOC + SAVE_LOC, + 3+48+0, VERIFY_LOC)
					ENDIF
			ENDCASE
			DO CASE
			CASE m.lnChoice = 7 && No, don't save changes
				REPLACE (m.lcField) WITH m.luCurVal
			CASE m.lnChoice = 2 && Cancel, restore original value
				REPLACE (m.lcField) WITH m.luOldVal
			ENDCASE
		ENDFOR
		IF m.llMadeChange
			m.llSuccess = TABLEUPDATE(.F., .T.)
			RETURN IIF(m.llSuccess, 1, 2)
		ELSE
			RETURN 0 
		ENDIF
		
	ENDPROC

	PROCEDURE string		&& returns type 'c' equivalent of passed value
		*---------------------------------------------------------------*
		*  This method is called from the HandleRecord method.  It 
		*  returns the character equivalent of the value passed in as a
		*  parameter.  If a memo field is passed in, a notice to this
		*  effect is returned rather than the value in the memo field so
		*  that potentially large amounts of text aren't displayed in the 
		*  messagebox.
		*---------------------------------------------------------------*
		
		LPARAMETERS luValue
		
		m.uType = TYPE('m.luValue')
		DO CASE
			CASE m.uType = 'C'
				RETURN ALLTRIM(m.luValue)
			CASE INLIST(m.uType, 'N', 'Y')
				RETURN ALLTRIM(STR(m.luValue))
			CASE m.uType = 'D'
				RETURN DTOC(m.luValue)
			CASE m.uType = 'T'
				RETURN TTOC('m.luValue')
			CASE m.uType = 'L'
				RETURN IIF(m.luValue, '.T.', '.F.')
			CASE uType = 'M'
				RETURN 'Memo field'
		ENDCASE
	ENDPROC

	PROCEDURE verifychanges		&& Prompts a user to save all changes made to a table or record.
		*---------------------------------------------------------------*
		*  If any changes have been made to the table or record, prompt the
		*  user to save the changes.  If the user says 'yes,' all changes
		*  are saved.  Any changes made to the data by other users after
		*  this user made the change and before the change was committed
		*  will be lost.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Changes Made to the Current Values
		*    1 -- Successfully Made All User Changes
		*	 2 -- Unable to Write One or More User-Specifed Changes to Table
		*---------------------------------------------------------------*
		
		* Declare constants & variables
		#define SAVECHG_LOC 'Do you want to save your changes?'
		#define SAVECHG2_LOC 'Save Changes'
		#define NOBUFF_LOC2 'Data buffering is not enabled.'
		
		LOCAL lnChoice, llMadeChange, lnSuccess
		m.llMadeChange = .F.
		m.lnSuccess = 0
		
		* If the user has changed anything, prompt to save or discard changes
		DO CASE
			CASE INLIST(CURSORGETPROP('Buffering'), 2,3) && Row Buffering
				IF '2' $ GETFLDSTATE(-1)
					m.llMadeChange = .T.
				ENDIF
			CASE INLIST(CURSORGETPROP('Buffering'), 4,5) && Table Buffering
				IF GETNEXTMODIFIED(0) > 0
					m.llMadeChange = .T.
				ENDIF
			OTHERWISE
				WAIT WINDOW NOBUFF_LOC NOWAIT
		ENDCASE
		
		IF m.llMadeChange
			m.lnChoice = MESSAGEBOX(SAVECHG_LOC, 4+32, SAVECHG2_LOC)
			IF m.lnChoice = 6 && Yes
				m.lnSuccess = IIF(TABLEUPDATE(.T.,.T.), 1, 2)
			ELSE
				=TABLEREVERT(.T.)
			ENDIF
		ENDIF	
		RETURN m.lnSuccess
	ENDPROC

	PROCEDURE verifyeachchange		&& Prompts a user to confirm each change he or she made.
		*--------------------------------------------------------------------
		*  If any changes have been made to the table or record, for each
		*  change, display the old value and the new value, prompting the
		*  user to save or discard the change.  Conflict management is also
		*  included in the HandleRecord method.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Changes Made to the Current Values
		*    1 -- Successfully Made User-Specified Changes
		*	 2 -- Unable to Write One or More User-Specifed Changes to Table
		*---------------------------------------------------------------*
		
		#define NOBUFF_LOC3 'Data buffering is not enabled.'
		LOCAL lnSuccess, lnRec
		m.lnSuccess = 0
		
		DO CASE
			CASE INLIST(CURSORGETPROP('Buffering'), 2,3) && Row Buffering
				IF '2' $ GETFLDSTATE(-1)				 && Data has changed
					m.lnSuccess = THIS.HandleRecord(1)
				ENDIF	
			CASE INLIST(CURSORGETPROP('Buffering'), 4,5) && Table Buffering
				m.lnRec = GETNEXTMODIFIED(0)
				DO WHILE m.lnRec > 0
					GO m.lnRec
					m.lnSuccess = IIF(m.lnSuccess != 2, THIS.HandleRecord(1), 2)
					m.lnRec = GETNEXTMODIFIED(m.lnRec)	
				ENDDO
			OTHERWISE									 && No Buffering
				WAIT WINDOW NOBUFF_LOC NOWAIT
		ENDCASE
		RETURN m.lnSuccess
	ENDPROC

ENDDEFINE

DEFINE CLASS formmargin AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 255,0,255
	Height = 253
	Left = 0
	Name = "Shape5"
	Top = 64
	Width = 10

ENDDEFINE

DEFINE CLASS frmsolution AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="C_solutions1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Behindscenes1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdclose1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addtopath
		*p: crunpath
		*p: csavesetpath
		*p: lsetffcpath
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	Caption = "Solutions"
	csavesetpath = 
	DataSession = 2
	DoCreate = .T.
	Height = 197
	HelpContextID = 1231204
	MaxButton = .F.
	Name = "frmsolution"
	Width = 348

	ADD OBJECT 'Behindscenes1' AS behindscenes WITH ;
		Left = 9, ;
		Name = "Behindscenes1", ;
		TabIndex = 3, ;
		Top = 165
		*< END OBJECT: ClassLib="solution.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'C_solutions1' AS c_solutions WITH ;
		centerform = .F., ;
		Height = 18, ;
		Left = 309, ;
		Name = "C_solutions1", ;
		Top = 125, ;
		Width = 25
		*< END OBJECT: ClassLib="solution.vcx" BaseClass="custom" />

	ADD OBJECT 'Cmdclose1' AS cmdclose WITH ;
		Left = 265, ;
		Name = "Cmdclose1", ;
		TabIndex = 4, ;
		Top = 165
		*< END OBJECT: ClassLib="solution.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Sample instructions", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 30, ;
		Left = 24, ;
		Name = "Label1", ;
		TabIndex = 0, ;
		Top = 24, ;
		Width = 300, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Instructions", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 16, ;
		Name = "Label4", ;
		Style = 3, ;
		TabIndex = 0, ;
		Top = 5, ;
		Width = 59
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackStyle = 0, ;
		Height = 48, ;
		Left = 12, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 12, ;
		Width = 324
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Activate
		IF TYPE("THIS.c_solutions1.Baseclass")="C"
			THIS.c_solutions1.saveHelp
		ENDIF
		
	ENDPROC

	PROCEDURE addtopath
		LPARAMETER tcPath
		
		LOCAL lcPath
		tcPath = ALLTRIM(tcPath)
		lcSetPath = ALLTRIM(SET("PATH"))
		
		IF ATC(tcPath,lcSetPath)#0
			DO CASE
			CASE ATC(tcPath+";",lcSetPath)#0
				RETURN
			CASE ATC(ADDBS(tcPath)+";",lcSetPath)#0
				RETURN
			CASE ATC(RIGHT(lcSetPath,LEN(tcPath)),tcPath)#0
				RETURN
			ENDCASE
		ENDIF
		
		IF EMPTY(lcSetPath)
			SET PATH TO (tcPath)	
		ELSE
			SET PATH TO (lcSetPath + IIF(RIGHT(lcSetPath,1)=";","",";") + tcPath)
		ENDIF
		
	ENDPROC

	PROCEDURE Deactivate
		IF TYPE("THIS.c_solutions1.Baseclass")="C"
			THIS.c_solutions1.restoreHelp
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		THIS.SetAll('Fontname', 'Tahoma')
		THIS.SetAll('Fontsize',8)
		IF VARTYPE(SYS(1271, THISFORM)) = "L"
			THISFORM.cRunPath = ADDBS(JUSTPATH(SYS(16, 1))) 
		ELSE
			THISFORM.cRunPath = ADDBS(JUSTPATH(SYS(1271, THISFORM)))
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		IF THIS.lSetFFCPath
			LOCAL lcFFCPath
			THIS.cSaveSetPath = SET("PATH")
			THIS.AddToPath(HOME()+"FFC")
			THIS.AddToPath(HOME()+"WIZARDS")
			THIS.AddToPath(HOME()+"GALLERY")
		ENDIF
	ENDPROC

	PROCEDURE Unload
		SET MESSAGE TO
		IF THIS.lSetFFCPath
			IF EMPTY(THIS.cSaveSetPath)
				SET PATH TO
			ELSE
				SET PATH TO (THIS.cSaveSetPath)
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Label1.Init
		IF  fontmetric(1, 'MS Sans Serif', 8, '') # 13 OR ;
			fontmetric(4, 'MS Sans Serif', 8, '') # 2 OR ;
			fontmetric(6, 'MS Sans Serif', 8, '') # 5 OR ;
			fontmetric(7, 'MS Sans Serif', 8, '') # 11 
				this.top = thisform.shape2.top + 7
				this.left = thisform.shape2.left + 7
				this.width = thisform.shape2.width - 14
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS resizable AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addtoarray
		*m: adjustcontrols		&& call from resize event of a form to adjust the placement and size of contained objects.
		*m: loopthroughcontrols
		*m: reset		&& Resets the Timer control so that it starts counting from 0.
		*m: setposition
		*m: setsize
		*p: initialformheight
		*p: initialformwidth
		*p: initialresize		&& Is this the first time the controls are being adjusted?
		*p: repositionlist
		*p: resizelist
		*a: acontrolstats[1,5]
	*</DefinedPropArrayMethod>

	PROTECTED acontrolstats,initialformheight,initialformwidth,initialresize
	Height = 19
	initialformheight = 0
	initialformwidth = 0
	initialresize = .T.		&& Is this the first time the controls are being adjusted?
	Name = "resizable"
	repositionlist = Commandbutton Combobox Checkbox Listbox Form Grid Textbox Label Shape Editbox Olecontrol Pageframe Image Spinner
	resizelist = Commandbutton Combobox Checkbox Listbox Form Grid Textbox Label Shape Editbox Olecontrol Pageframe Image Spinner
	Width = 27
	
	PROTECTED PROCEDURE addtoarray
		LPARAMETERS oControl
		nLen = ALEN(THIS.aControlStats,1)
		THIS.aControlStats[nLen,1] = oControl.Top / THIS.InitialFormHeight
		THIS.aControlStats[nLen,2] = oControl.Left / THIS.InitialFormWidth
		THIS.aControlStats[nLen,3] = oControl.Height / THIS.InitialFormHeight
		THIS.aControlStats[nLen,4] = oControl.Width / THIS.InitialFormWidth
		THIS.aControlStats[nLen,5] = IIF(TYPE("oControl.FontSize") = 'U', 0, oControl.FontSize)
		DIMENSION THIS.aControlStats[nLen+1, 5]
		
	ENDPROC

	PROCEDURE adjustcontrols		&& call from resize event of a form to adjust the placement and size of contained objects.
		IF THIS.InitialResize
			THIS.LoopThroughControls("INITIALIZE_AND_ADJUST")
			THIS.InitialResize = .F.
		ELSE
			THIS.LoopThroughControls("ADJUST")
		ENDIF
	ENDPROC

	PROCEDURE Init
		THIS.InitialFormHeight = THISFORM.Height
		THIS.InitialFormWidth = THISFORM.Width
	ENDPROC

	PROTECTED PROCEDURE loopthroughcontrols
		LPARAMETERS cTask
		* Valid parameters for cTask are 'Initialize_And_Adjust' and 'Adjust'
		cTask = UPPER(cTask)
		
		nOldDecimal = SET("DECIMAL")
		SET DECIMAL TO 18
		
		nPos = 0
		THISFORM.LockScreen = .T.
		FOR m.i = 1 TO THISFORM.ControlCount
			oControl = THISFORM.Controls[m.i]
				nPos = nPos + 1
				If cTask = 'INITIALIZE_AND_ADJUST'
					THIS.AddToArray(oControl)
				ENDIF
				IF oControl.Class$THIS.ResizeList
					THIS.SetSize(oControl, nPos)
				ENDIF
				IF oControl.Class$THIS.RepositionList
					THIS.SetPosition(oControl, nPos)
				ENDIF
				
			*A pageframe can contain only pages
			IF THISFORM.Controls[m.i].Baseclass$"Pageframe"
				*Loop through each page of the pageframe
				FOR m.j = 1 TO THISFORM.Controls[m.i].PageCount
					WITH THISFORM.Controls[m.i].pages[m.j]
						*loop through all the controls on the page
						FOR m.k = 1 TO .ControlCount
							nPos = nPos + 1
							IF cTask = 'INITIALIZE_AND_ADJUST'
								THIS.AddToArray(.Controls[m.k])
							ENDIF
							IF oControl.Class$THIS.ResizeList
								THIS.SetSize(oControl, nPos)
							ENDIF
							IF oControl.Class$THIS.RepositionList
								THIS.SetPosition(oControl, nPos)
							ENDIF
						ENDFOR
					ENDWITH
				ENDFOR
			ENDIF			
		ENDFOR
		
		THISFORM.LockScreen = .F.
		SET DECIMAL TO nOldDecimal
	ENDPROC

	PROCEDURE reset		&& Resets the Timer control so that it starts counting from 0.
		* Call the reset method when you add a control to the form at runtime.
		THIS.InitialResize = .T.
		DIMENSION THIS.aControlStats[1,5]
		THIS.InitialFormHeight = THISFORM.Height
		THIS.InitialFormWidth = THISFORM.Width
		
	ENDPROC

	PROTECTED PROCEDURE setposition
		LPARAMETERS oControl, nPos
		oControl.Top = THISFORM.Height * THIS.aControlStats[nPos,1]
		oControl.Left = THISFORM.Width * THIS.aControlStats[nPos,2]
		
	ENDPROC

	PROTECTED PROCEDURE setsize
		LPARAMETERS oControl, nPos
		oControl.Width = THISFORM.Width * THIS.aControlStats[nPos,4]
		IF !oControl.Baseclass $ "Textbox Spinner"
			oControl.Height = THISFORM.Height * THIS.aControlStats[nPos,3]
		ENDIF
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tbrbackcolor AS toolbar 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdRed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGreen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBlue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdWhite" UniqueID="" Timestamp="" />

	Caption = "Form BackColor"
	ControlBox = .F.
	Height = 32
	Left = 0
	Name = "tbrbackcolor"
	Top = 0
	Width = 103

	ADD OBJECT 'cmdBlue' AS commandbutton WITH ;
		Caption = "", ;
		Default = .F., ;
		Height = 23, ;
		Left = 52, ;
		Name = "cmdBlue", ;
		Picture = menus\blue.bmp, ;
		Top = 6, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdGreen' AS commandbutton WITH ;
		Caption = "", ;
		Default = .F., ;
		Height = 23, ;
		Left = 29, ;
		Name = "cmdGreen", ;
		Picture = menus\green.bmp, ;
		Top = 6, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdRed' AS commandbutton WITH ;
		Caption = "", ;
		Default = .F., ;
		Height = 23, ;
		Left = 6, ;
		Name = "cmdRed", ;
		Picture = menus\red.bmp, ;
		Top = 6, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdWhite' AS commandbutton WITH ;
		Caption = "", ;
		Default = .F., ;
		Height = 23, ;
		Left = 75, ;
		Name = "cmdWhite", ;
		Picture = menus\white.bmp, ;
		Top = 6, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE Destroy
		THIS.Visible = .F.
	ENDPROC

	PROCEDURE cmdBlue.Click
		_SCREEN.ActiveForm.LockScreen = .T.
		_SCREEN.ActiveForm.BackColor = RGB(0,0,255)
		_SCREEN.ActiveForm.SetAll("ForeColor", RGB(255,255,255), "LABEL")
		_SCREEN.ActiveForm.SetAll("BackColor", _SCREEN.ActiveForm.BackColor, "LABEL")
		_SCREEN.ActiveForm.SetAll("ForeColor", RGB(255,255,255), "CHECKBOX")
		_SCREEN.ActiveForm.LockScreen = .F.
		
	ENDPROC

	PROCEDURE cmdGreen.Click
		_SCREEN.ActiveForm.LockScreen = .T.
		_SCREEN.ActiveForm.BackColor = RGB(0,255,0)
		_SCREEN.ActiveForm.SetAll("ForeColor", RGB(0,0,0))
		_SCREEN.ActiveForm.SetAll("BackColor", _SCREEN.ActiveForm.BackColor, "LABEL")
		_SCREEN.ActiveForm.LockScreen = .F.
		
	ENDPROC

	PROCEDURE cmdRed.Click
		_SCREEN.ActiveForm.LockScreen = .T.
		_SCREEN.ActiveForm.BackColor = RGB(255,0,0)
		_SCREEN.ActiveForm.SetAll("ForeColor", RGB(255,255,255), "LABEL")
		_SCREEN.ActiveForm.SetAll("BackColor", _SCREEN.ActiveForm.BackColor, "LABEL")
		_SCREEN.ActiveForm.SetAll("ForeColor", RGB(255,255,255), "CHECKBOX")
		_SCREEN.ActiveForm.LockScreen = .F.
		
	ENDPROC

	PROCEDURE cmdWhite.Click
		_SCREEN.ActiveForm.LockScreen = .T.
		_SCREEN.ActiveForm.BackColor = RGB(255,255,255)
		_SCREEN.ActiveForm.SetAll("ForeColor", RGB(0,0,0))
		_SCREEN.ActiveForm.SetAll("BackColor", _SCREEN.ActiveForm.BackColor, "LABEL")
		_SCREEN.ActiveForm.LockScreen = .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vcr AS container 		&& generic vcr buttons
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdTop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrior" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBottom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Datachecker1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: beforerecordpointermoved
		*m: enabledisablebuttons
		*m: recordpointermoved		&& Method called each time the record pointer is moved, basically providing a new event for the class.
		*p: enabledisableoninit
		*p: skiptable		&& The table to move the record pointer in .
	*</DefinedPropArrayMethod>

	BackColor = 192,192,192
	BorderWidth = 1
	enabledisableoninit = .T.
	Height = 24
	Name = "vcr"
	skiptable = 		&& The table to move the record pointer in .
	Width = 104

	ADD OBJECT 'cmdBottom' AS commandbutton WITH ;
		Caption = ">|", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 78, ;
		Name = "cmdBottom", ;
		TabIndex = 4, ;
		ToolTipText = "Bottom", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNext' AS commandbutton WITH ;
		Caption = ">", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 52, ;
		Name = "cmdNext", ;
		TabIndex = 3, ;
		ToolTipText = "Next", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrior' AS commandbutton WITH ;
		Caption = "<", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 26, ;
		Name = "cmdPrior", ;
		TabIndex = 2, ;
		ToolTipText = "Prior", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdTop' AS commandbutton WITH ;
		Caption = "|<", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 0, ;
		Name = "cmdTop", ;
		TabIndex = 1, ;
		ToolTipText = "Top", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Datachecker1' AS datachecker WITH ;
		Height = 15, ;
		Left = 44, ;
		Name = "Datachecker1", ;
		Top = 6, ;
		Width = 23
		*< END OBJECT: ClassLib="solution.vcx" BaseClass="custom" />
	
	PROCEDURE beforerecordpointermoved
		IF !EMPTY(This.SkipTable)
			SELECT (This.SkipTable)
		ENDIF
		
	ENDPROC

	PROCEDURE enabledisablebuttons
		LOCAL nRec, nTop, nBottom
		IF EOF() && Table empty or no records match a filter
			THIS.SetAll("Enabled", .F.)
			RETURN
		ENDIF
		
		nRec = RECNO()
		GO TOP
		nTop = RECNO()
		GO BOTTOM
		nBottom = RECNO()
		GO nRec
		
		DO CASE
			CASE nRec = nTop
				THIS.cmdTop.Enabled = .F.
				THIS.cmdPrior.Enabled = .F.
				THIS.cmdNext.Enabled = .T.
				THIS.cmdBottom.Enabled = .T.
			CASE nRec = nBottom
				THIS.cmdTop.Enabled = .T.
				THIS.cmdPrior.Enabled = .T.
				THIS.cmdNext.Enabled = .F.
				THIS.cmdBottom.Enabled = .F.
			OTHERWISE
				THIS.SetAll("Enabled", .T.)
		ENDCASE
	ENDPROC

	PROCEDURE Error
		Parameters nError, cMethod, nLine
		#define NUM_LOC "Error Number: "
		#define PROG_LOC "Procedure: "
		#define MSG_LOC "Error Message: "
		#define CR_LOC CHR(13)
		#define SELTABLE_LOC "Select Table:"
		#define OPEN_LOC "Open"
		#define SAVE_LOC "Do you want to save your changes anyway?"
		#define CONFLICT_LOC "Unable to resolve data conflict."
		
		DO CASE
			CASE nError = 13 && Alias not found
			*-----------------------------------------------------------
			* If the user tries to move the record pointer when no
			* table is open or when an invalid SkipTable property has been
			* specified, prompt the user for a table to open.
			*-----------------------------------------------------------
				cNewTable = GETFILE('DBF', SELTABLE_LOC, OPEN_LOC)
				IF FILE(cNewTable)
					SELECT 0
					USE (cNewTable)
					This.SkipTable = ALIAS()
				ELSE
					This.SkipTable = ""
				ENDIF
			CASE nError = 1585 
			*-----------------------------------------------------------
			* Update conflict handled by datachecker class.
			*-----------------------------------------------------------
				nConflictStatus = THIS.DataChecker1.CheckConflicts()
				IF nConflictStatus = 2
					WAIT WINDOW CONFLICT_LOC
				ENDIF
			OTHERWISE
			*-----------------------------------------------------------
			* Display information about an unanticipated error.
			*-----------------------------------------------------------
				lcMsg = NUM_LOC + ALLTRIM(STR(nError)) + CR_LOC + CR_LOC + ;
						MSG_LOC + MESSAGE( )+ CR_LOC + CR_LOC + ;
						PROG_LOC + PROGRAM(1)
				lnAnswer = MESSAGEBOX(lcMsg, 2+48+512)
				DO CASE
					CASE lnAnswer = 3 &&Abort
						CANCEL
					CASE lnAnswer = 4 &&Retry
						RETRY
					OTHERWISE
						RETURN
				ENDCASE
		ENDCASE
		
	ENDPROC

	PROCEDURE Init
		IF THIS.EnableDisableOnInit
			THIS.EnableDisableButtons
		ENDIF
	ENDPROC

	PROCEDURE recordpointermoved		&& Method called each time the record pointer is moved, basically providing a new event for the class.
		IF TYPE('_VFP.ActiveForm') = 'O'
			_VFP.ActiveForm.Refresh
		ENDIF
		
	ENDPROC

	PROCEDURE cmdBottom.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		GO BOTTOM
		
		THIS.Parent.EnableDisableButtons
		THIS.Parent.RecordPointerMoved
	ENDPROC

	PROCEDURE cmdBottom.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE cmdNext.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		SKIP 1
		IF EOF()
			GO BOTTOM
		ENDIF
		
		THIS.Parent.RecordPointerMoved
		THIS.Parent.EnableDisableButtons
		
	ENDPROC

	PROCEDURE cmdNext.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE cmdPrior.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		SKIP -1
		IF BOF()
			GO TOP
		ENDIF
		
		THIS.Parent.RecordPointerMoved
		THIS.Parent.EnableDisableButtons
		
	ENDPROC

	PROCEDURE cmdPrior.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE cmdTop.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		GO TOP
		
		THIS.Parent.RecordPointerMoved
		THIS.Parent.EnableDisableButtons
		
	ENDPROC

	PROCEDURE cmdTop.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

ENDDEFINE
