*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="trycatch.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="C_solutions1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Behindscenes1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdclose1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page1.cmdExecute" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page1.edtProp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page1.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page1.cboExceptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page2.edtStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page2.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page2.cmdExecute" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page2.cboTable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page2.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page3.edtProp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page3.cboExceptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page3.cmdExecute" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfTry.Page3.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtHelp" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: createexceptiontext		&& Creates a string of the properties and values of an exception object.
		*m: executepage1try		&& Executes a TRY...CATCH block that generates an exception based on the nErrorCode parameter.
		*m: executepage2try		&& Executes a TRY...CATCH block that attempts to read from a file passed in the cFile parameter.
		*m: executepage3try
		*m: setinstructiontext
	*</DefinedPropArrayMethod>

	Caption = "Using Structured Exception Handling "
	DoCreate = .T.
	Height = 364
	HelpContextID = 1231678
	Left = 6
	MaxButton = .F.
	Name = "Form1"
	ShowTips = .T.
	Top = 8
	Width = 442
	WindowState = 0

	ADD OBJECT 'Behindscenes1' AS behindscenes WITH ;
		Left = 5, ;
		Name = "Behindscenes1", ;
		TabIndex = 4, ;
		Top = 334
		*< END OBJECT: ClassLib="..\solution.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'C_solutions1' AS c_solutions WITH ;
		Height = 18, ;
		Left = 46, ;
		Name = "C_solutions1", ;
		Top = 340, ;
		Width = 25
		*< END OBJECT: ClassLib="..\solution.vcx" BaseClass="custom" />

	ADD OBJECT 'Cmdclose1' AS cmdclose WITH ;
		FontName = "Tahoma", ;
		Height = 23, ;
		Left = 365, ;
		Name = "Cmdclose1", ;
		TabIndex = 5, ;
		Top = 336, ;
		Width = 72
		*< END OBJECT: ClassLib="..\solution.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtHelp' AS editbox WITH ;
		BorderStyle = 0, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 86, ;
		Left = 9, ;
		Name = "edtHelp", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		TabIndex = 2, ;
		TabStop = .F., ;
		Top = 15, ;
		Width = 424
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label3", ;
		TabIndex = 6, ;
		Top = 108, ;
		Width = 0, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = " Instructions ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 14, ;
		Name = "Label6", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 65
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfTry' AS pageframe WITH ;
		ErasePage = .T., ;
		Height = 224, ;
		Left = 5, ;
		Name = "pgfTry", ;
		PageCount = 3, ;
		TabIndex = 3, ;
		Top = 108, ;
		Width = 433, ;
		Page1.Caption = "CATCHing Exceptions", ;
		Page1.FontName = "Tahoma", ;
		Page1.FontSize = 8, ;
		Page1.Name = "Page1", ;
		Page2.Caption = "Using FINALLY", ;
		Page2.FontName = "Tahoma", ;
		Page2.FontSize = 8, ;
		Page2.Name = "Page2", ;
		Page3.Caption = "THROWing Exceptions", ;
		Page3.FontName = "Tahoma", ;
		Page3.FontSize = 8, ;
		Page3.Name = "Page3"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'pgfTry.Page1.cboExceptions' AS combobox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 7, ;
		Name = "cboExceptions", ;
		TabIndex = 1, ;
		ToolTipText = "Select an error from the list or specify your own error number.", ;
		Top = 10, ;
		Width = 306
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfTry.Page1.cmdExecute' AS commandbutton WITH ;
		AutoSize = .T., ;
		Caption = "Execute \<TRY Block", ;
		Default = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 319, ;
		Name = "cmdExecute", ;
		TabIndex = 2, ;
		Top = 9, ;
		Width = 104
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfTry.Page1.edtProp' AS editbox WITH ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 133, ;
		Left = 6, ;
		Name = "edtProp", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		TabStop = .F., ;
		Top = 55, ;
		Width = 417
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfTry.Page1.Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Exception Object Properties:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 7, ;
		Name = "Label2", ;
		TabIndex = 3, ;
		Top = 39, ;
		Width = 140
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfTry.Page2.cboTable' AS combobox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 80, ;
		Name = "cboTable", ;
		TabIndex = 2, ;
		ToolTipText = "Select a table from the list or specify your own to open.", ;
		Top = 10, ;
		Width = 269
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfTry.Page2.cmdExecute' AS commandbutton WITH ;
		AutoSize = .F., ;
		Caption = "\<TRY ", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 355, ;
		Name = "cmdExecute", ;
		TabIndex = 3, ;
		Top = 9, ;
		Width = 69
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfTry.Page2.edtStatus' AS editbox WITH ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 133, ;
		Left = 6, ;
		Name = "edtStatus", ;
		ReadOnly = .T., ;
		TabIndex = 5, ;
		TabStop = .F., ;
		Top = 55, ;
		Width = 417
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfTry.Page2.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Table to \<open:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 7, ;
		Name = "Label1", ;
		TabIndex = 1, ;
		Top = 15, ;
		Width = 70, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfTry.Page2.Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Status:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 7, ;
		Name = "Label2", ;
		TabIndex = 4, ;
		Top = 39, ;
		Width = 37
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfTry.Page3.cboExceptions' AS combobox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 7, ;
		Name = "cboExceptions", ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 306
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfTry.Page3.cmdExecute' AS commandbutton WITH ;
		AutoSize = .T., ;
		Caption = "Execute \<TRY Block", ;
		Default = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 319, ;
		Name = "cmdExecute", ;
		TabIndex = 2, ;
		Top = 9, ;
		Width = 104
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfTry.Page3.edtProp' AS editbox WITH ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 133, ;
		Left = 6, ;
		Name = "edtProp", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		TabStop = .F., ;
		Top = 55, ;
		Width = 417
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfTry.Page3.Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Exception Object Properties:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 7, ;
		Name = "Label2", ;
		TabIndex = 3, ;
		Top = 39, ;
		Width = 140
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackStyle = 0, ;
		Height = 91, ;
		Left = 6, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 11, ;
		Width = 430
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE createexceptiontext		&& Creates a string of the properties and values of an exception object.
		#DEFINE CR_LF 	CHR(13)+CHR(10)
		LPARAMETERS eException As Exception, nTabLevel as Integer
		LOCAL ARRAY laExceptionPropArray(1)
		LOCAL lcText As String, lcPropName as String, lcValue as String
		LOCAL i as Integer, lnTabLevel as Integer
		lnTabLevel = IIF(EMPTY(nTabLevel) OR VARTYPE(nTabLevel)!="N",0,nTabLevel)
		lcText = ""
		
		AMEMBERS(laExceptionPropArray, eException, 1)  && Array containing Exception properties
		
		FOR i = 1 TO ALEN(laExceptionPropArray,1)
			IF ALLTRIM(UPPER(laExceptionPropArray[i,2])) == "PROPERTY"
				lcPropName = "eException." + laExceptionPropArray[i,1]
				
				DO CASE
					CASE TYPE(lcPropName) == "C"
						lcValue = EVALUATE(lcPropName)
					CASE TYPE(lcPropName) == "N"
						lcValue = ALLTRIM(STR(EVALUATE(lcPropName)))
					CASE TYPE(lcPropName) == "L"
						lcValue = IIF(EVALUATE(lcPropName), ".T.", ".F.")
					CASE TYPE(lcPropName) == "O"
						lcValue = "(Object)"				
						IF ( (PEMSTATUS(EVALUATE(lcPropName), "BaseClass", 5) ) AND ;
						   (ALLTRIM(UPPER(&lcPropName..BaseClass )) == "EXCEPTION") )
							lcValue = lcValue + " : " + CR_LF + This.CreateExceptiontext( EVALUATE(lcPropName), 1 )
						ENDIF	
					OTHERWISE
						lcValue = ""	
				ENDCASE
						
				lcText = lcText + REPLICATE([  ],lnTabLevel) + PADR(laExceptionPropArray[i,1],15) + " :" + lcValue + CR_LF
			ENDIF
		ENDFOR
		
		
		RETURN lcText
		 
		 
		
	ENDPROC

	PROCEDURE Destroy
		RELEASE gaExceptions
	ENDPROC

	PROCEDURE executepage1try		&& Executes a TRY...CATCH block that generates an exception based on the nErrorCode parameter.
		LPARAMETERS nErrorCode As Integer
		LOCAL myException As Exception 
		
		TRY
			*-- Typically, we would be doing actual work in this block.
			*-- We are purposely calling ERROR here to show how the flow 
			*--    of control is passed to the CATCH block only when an 
			*--    exception occurs.
			ERROR nErrorCode
		
		CATCH TO myException
			*-- You can use the UserValue property of the Exception object
			*-- To store any additionl information about the error.
			myException.UserValue = "I can handle this."
			
			thisform.pgfTry.Page1.edtProp.Value = Thisform.CreateExceptionText( myException )
		
		ENDTRY
		
			
	ENDPROC

	PROCEDURE executepage2try		&& Executes a TRY...CATCH block that attempts to read from a file passed in the cFile parameter.
		#DEFINE CR_LF 	CHR(13)+CHR(10)
		LPARAMETERS cTableFullName As String
		LOCAL myException As Exception 
		LOCAL lcText as String, lcStatus as String, lcTableName as string
		LOCAL lnPrevArea as Integer 
		lcStatus = ""
		lcTableName = JUSTSTEM(cTableFullName)
		
		TRY
			lcStatus = lcStatus + "--- TRY: Attempt to open table --- " + CR_LF + cTableFullName + CR_LF
			
			lnPrevArea = SELECT()
			USE (cTableFullName) IN 0 EXCLUSIVE 
		
			lcStatus = lcStatus + "--- TRY: Opened table sucessfully --- " + CR_LF 
					
					
		CATCH TO myException WHEN myException.ErrorNo = 1 && File Does Not Exist
			
			lcStatus = lcStatus + "--- CATCH 1: File Exist Exception Caught! --- " + CR_LF + ;
					Thisform.CreateExceptionText( myException )
		
		CATCH TO myException WHEN myException.ErrorNo = 3 && File is in use
			
			lcStatus = lcStatus + "--- CATCH 2: File in Use Exception Caught! --- " + CR_LF + ;
					Thisform.CreateExceptionText( myException )
		
		CATCH TO myException WHEN myException.ErrorNo = 1704  && File Access is Denied 
			
			lcStatus = lcStatus + "--- CATCH 3: File Access is Denied Exception Caught! --- " + CR_LF + ;
					Thisform.CreateExceptionText( myException )
		
		CATCH TO myException && Catch anything else
			
			lcStatus = lcStatus + "--- CATCH 4: Exception Caught! --- " + CR_LF + ;
					Thisform.CreateExceptionText( myException )
		
		FINALLY
			IF USED(lcTableName)
				USE IN (lcTableName)
				lcStatus = lcStatus + "--- FINALLY: Closed table sucessfully --- " + CR_LF
			ENDIF
			SELECT (lnPrevArea)
			lcStatus = lcStatus + "--- FINALLY: Previous work area selected --- " 
		ENDTRY
		
		Thisform.pgfTry.page2.edtStatus.Value = lcStatus
			
	ENDPROC

	PROCEDURE executepage3try
		LPARAMETERS nErrorCode As Integer
		LOCAL InnerException As Exception, OuterException As Exception  
		
		TRY
			
			*-- Do some work
			
		
			TRY
				*-- Typically, we would be doing actual work in this block.
				*-- We are purposely calling ERROR here to show how the flow 
				*--    of control is passed to the CATCH block only when an 
				*--    exception occurs.
				ERROR nErrorCode
		
			CATCH TO InnerException WHEN InnerException.ErrorNo = 1 
				*-- You can use the UserValue property of the Exception object
				*-- To store any additionl information about the error.
				InnerException.UserValue = "INNER TRY: I can handle this."
				
				thisform.pgfTry.Page3.edtProp.Value = Thisform.CreateExceptionText( InnerException )
			
			CATCH TO InnerException 
				*-- I can't handle this so THROW it up to the higher-level handler.
				*-- The higher-level handler in this case is in this same method, however,
				*-- the higher-level handler could be an outer TRY block in another calling method 
				*-- or be the Error method or ON ERROR handlers as well.
				InnerException.UserValue = "INNER TRY: I can't handle this one."
				THROW InnerException 
				
			
			ENDTRY
		
		CATCH TO OuterException 
				*-- When an exception is THROWn, the UserValue of the caught exception 
				*-- is the THROWn exception (from the inner try in this case)
						
				thisform.pgfTry.Page3.edtProp.Value = Thisform.CreateExceptionText( OuterException )
		
		ENDTRY		
		
	ENDPROC

	PROCEDURE Init
		PUBLIC ARRAY gaExceptions(3,1)
		
		gaExceptions(1,1) = "1 - File does not exist"
		gaExceptions(2,1) = "3 - File is in use"
		gaExceptions(3,1) = "4 - End of file encountered"
		
		
		WITH thisform.pgfTry.page1.cboExceptions
			.RowSourceType = 5
			.RowSource = 'gaExceptions'
			.Value = gaExceptions(1)
		ENDWITH	
		WITH thisform.pgfTry.page3.cboExceptions
			.RowSourceType = 5
			.RowSource = 'gaExceptions'
			.Value = gaExceptions(1)
		ENDWITH	
		
	ENDPROC

	PROCEDURE setinstructiontext
		LPARAMETERS nPage As Integer 
		LOCAL lnPage As Integer 
		LOCAL lcText As String 
		lnPage = IIF(EMPTY(nPage) OR VARTYPE(nPage)!="N",0,nPage)
		lcText = "You can use the TRY...CATCH...FINALLY statements for structured exception handling. This allows you to execute a particular block of statements if a specified exception occurs while your code is running." + CHR(13)+CHR(10)+CHR(13)+CHR(10)
		DO CASE
			CASE lnPage = 1
				thisform.edtHelp.Value = lcText + "Select an error you wish to cause in the TRY block from the dropdown then click the button. The CATCH block will execute and display the exception object properties."
			CASE lnPage = 2
				thisform.edtHelp.Value = "The FINALLY block usually cleans up any resources allocated by the TRY block and is always " + ;
										 "the last code to run before control leaves the TRY...CATCHFINALLY structure. " + ;
										 "Enter a table name and path in the textbox and click the TRY button below to test " + ;
										 "this style of error handling. "
			CASE lnPage = 3
				thisform.edtHelp.Value = "You can use THROW in a CATCH block to throw an exception to a higher-level error handler. " + ;
										 "This example uses nested TRY blocks. The inner TRY can only handle the first error. " + ;
										 "For anything else, it will THROW the exception object up to the outer TRY block. " + ;
										 "When an exception is THROWn, the UserValue of the caught exception (in the outer block) is the THROWn exception (from the inner block)."
			OTHERWISE	
				thisform.edtHelp.Value = ""
		ENDCASE
	ENDPROC

	PROCEDURE pgfTry.Page1.Activate
		Thisform.Setinstructiontext(1) 
	ENDPROC

	PROCEDURE pgfTry.Page1.cboExceptions.Init
		
		
	ENDPROC

	PROCEDURE pgfTry.Page1.cmdExecute.Click
		LOCAL lnErrorCode
		
		WITH Thisform.pgfTry.Page1.cboExceptions
		
			IF VAL(.Value) != 0
				lnErrorCode = VAL(.Value)
			ELSE
				lnErrorCode = VAL(.DisplayValue)
			ENDIF
					
		ENDWITH
		
		IF lnErrorCode = 0
			MESSAGEBOX("Please enter a valid VFP error code or select one from the list.",0,"Valid Error Code Needed")
		ELSE
			Thisform.ExecutePage1Try( lnErrorCode )
		ENDIF	
			
		
	ENDPROC

	PROCEDURE pgfTry.Page2.Activate
		Thisform.Setinstructiontext(2) 
	ENDPROC

	PROCEDURE pgfTry.Page2.cboTable.Destroy
		RELEASE gaTableNames
	ENDPROC

	PROCEDURE pgfTry.Page2.cboTable.Init
		PUBLIC ARRAY gaTableNames(2)
		
		gaTableNames(1) = "C:\NoTable.dbf"
		gaTableNames(2) = HOME()+"Samples\Data\Customer.dbf"
		
		This.RowSourceType = 5
		This.RowSource = 'gaTableNames'
		This.Value = gaTableNames(1)
		
		
		
	ENDPROC

	PROCEDURE pgfTry.Page2.cmdExecute.Click
		Thisform.ExecutePage2Try( thisform.pgfTry.page2.cboTable.Value )
		
		
		
	ENDPROC

	PROCEDURE pgfTry.Page3.Activate
		Thisform.Setinstructiontext(3) 
	ENDPROC

	PROCEDURE pgfTry.Page3.cboExceptions.Init
		
		
	ENDPROC

	PROCEDURE pgfTry.Page3.cmdExecute.Click
		LOCAL lnErrorCode
		
		WITH Thisform.pgfTry.Page3.cboExceptions
		
			IF VAL(.Value) != 0
				lnErrorCode = VAL(.Value)
			ELSE
				lnErrorCode = VAL(.DisplayValue)
			ENDIF
					
		ENDWITH
		
		IF lnErrorCode = 0
			MESSAGEBOX("Please enter a valid VFP error code or select one from the list.",0,"Valid Error Code Needed")
		ELSE
			Thisform.ExecutePage3Try( lnErrorCode )
		ENDIF	
			
		
	ENDPROC

ENDDEFINE
