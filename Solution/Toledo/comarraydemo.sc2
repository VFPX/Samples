*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="comarraydemo.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "comarraydemo.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS form1 AS frmsolution OF "..\solution.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Grid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Spinner1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: callcomserver
		*m: determinant
		*m: getarrayfromcursor
		*m: getcursorfromarray
		*m: matrixdim_assign
		*m: registercomserver
		*m: unregistercomserver
		*m: updatecursor
		*p: matrixdim
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 3
	Caption = "COMARRAY, DIMENSION...AS"
	DoCreate = .T.
	Height = 281
	HelpContextID = 1231686
	LockScreen = .F.
	Name = "Form1"
	Width = 400
	Behindscenes1.Left = 12
	Behindscenes1.Name = "Behindscenes1"
	Behindscenes1.Top = 253
	Cmdclose1.Left = 318
	Cmdclose1.Name = "Cmdclose1"
	Cmdclose1.Top = 253
	C_solutions1.Left = 309
	C_solutions1.Name = "C_solutions1"
	C_solutions1.Top = 197
	Label1.Caption = "This sample uses COMARRAY and DIMENSION... AS to pass a strongly typed array by reference to a COM Server which performs calculations and modifies the contents of the array. "
	Label1.Height = 41
	Label1.Left = 19
	Label1.Name = "Label1"
	Label1.Top = 17
	Label1.Width = 358
	Label4.Left = 16
	Label4.Name = "Label4"
	Label4.Top = 3
	Shape2.Height = 105
	Shape2.Left = 12
	Shape2.Name = "Shape2"
	Shape2.Top = 10
	Shape2.Width = 376

	ADD OBJECT 'cmdDet' AS commandbutton WITH ;
		Caption = "Determinant", ;
		Height = 25, ;
		Left = 302, ;
		Name = "cmdDet", ;
		Top = 149, ;
		Width = 85
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSet' AS commandbutton WITH ;
		Caption = "Set", ;
		Height = 25, ;
		Left = 351, ;
		Name = "cmdSet", ;
		Top = 120, ;
		Width = 36
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Grid1' AS grid WITH ;
		BackColor = 255,255,255, ;
		DeleteMark = .F., ;
		ForeColor = 0,0,0, ;
		GridLineColor = 192,192,192, ;
		GridLines = 3, ;
		GridLineWidth = 1, ;
		HeaderHeight = 20, ;
		Height = 120, ;
		Left = 12, ;
		Name = "Grid1", ;
		RecordMark = .F., ;
		RecordSource = "testtab1", ;
		ScrollBars = 3, ;
		Top = 120, ;
		Width = 276
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'Label2' AS label WITH ;
		BackStyle = 0, ;
		Caption = 'Enter values into the matrix below and then click the "Determinant" button to pass the matrix as a strongly typed array to the COM Server which calculates the determinant of the matrix using Gauss-Jordan Reduction.', ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 54, ;
		Left = 19, ;
		Name = "Label2", ;
		Top = 59, ;
		Width = 348, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Spinner1' AS spinner WITH ;
		Height = 25, ;
		Left = 302, ;
		Name = "Spinner1", ;
		SpinnerHighValue = 2.00, ;
		Top = 120, ;
		Width = 48
		*< END OBJECT: BaseClass="spinner" />
	
	PROCEDURE Activate
		DODEFAULT()
		THISFORM.cmdSet.Click()
	ENDPROC

	PROCEDURE callcomserver
		*-- This sample uses the COMARRAY function in order to pass a strongly typed array by reference 
		*-- to a COM Server which performs calculations and modifies the contents of the array.  This 
		*-- client form uses the new DIMENSION... AS syntax for declaring the strongly typed array below. 
		
		*-- Strongly Type our Array (AS Double)
		DIMENSION laMatrix(THISFORM.Matrixdim, THISFORM.Matrixdim) AS Double
		
		LOCAL lnResult as Integer
		LOCAL loMatrixCalc as Object
		
		Thisform.GetArrayFromCursor(@laMatrix)
		
		*-- Instantiate the COM Server
		loMatrixCalc = CREATEOBJECT(SERVERNAME+"."+CLASSNAME)
		
		*-- The Array is one based and is passed by reference
		COMARRAY(loMatrixCalc,11) 
		
		*-- Pass the Array to the COM Server by reference "As Double"
		lnResult = loMatrixCalc.Determinant(@laMatrix)
		
		MESSAGEBOX ("The matrix determinant is: " + TRANSFORM(lnResult) ,64,"Determinant")
		
		loMatrixCalc = Null
		
		*-- Redisplay the array values in the grid
		Thisform.GetCursorFromArray(@laMatrix)
	ENDPROC

	PROCEDURE Destroy
		THIS.UnregisterCOMServer(Thisform.cRunPath + SERVERNAME)
		USE IN (CURSOR_NAME)
	ENDPROC

	PROCEDURE determinant
	ENDPROC

	PROCEDURE getarrayfromcursor
		LPARAMETERS raMatrix
		LOCAL i, j
		
		&& converts matrix to array
		SELECT (CURSOR_NAME)
		GO TOP IN (CURSOR_NAME)
		FOR i = 1 TO THISFORM.Matrixdim
			FOR j = 1 TO THISFORM.Matrixdim
				raMatrix(i,j) = EVALUATE(CURSOR_NAME+".f"+TRANSFORM(j))
			NEXT
			
			IF i < THISFORM.Matrixdim THEN
				SKIP IN (CURSOR_NAME)
			ENDIF	
		NEXT
		GO TOP IN (CURSOR_NAME)
	ENDPROC

	PROCEDURE getcursorfromarray
		LPARAMETERS raMatrix
		LOCAL i, j
		
		&& converts array to matrix
		SELECT (CURSOR_NAME)
		GO TOP IN (CURSOR_NAME)
		FOR i = 1 TO THISFORM.MatrixDim
			FOR j = 1 TO THISFORM.MatrixDim
				REPLACE (CURSOR_NAME+".f"+TRANSFORM(j)) WITH raMatrix(i,j)
			NEXT	
			IF i < THISFORM.Matrixdim THEN
				SKIP IN (CURSOR_NAME)
			ENDIF	
		NEXT
		GO TOP IN (CURSOR_NAME)
	ENDPROC

	PROCEDURE Init
		
		
		DODEFAULT()
		IF (MESSAGEBOX("This sample needs to compile and register a VFP COM Server named VFPCOMArray onto your system in order to show the COM array enhancements in VFP8. The COM Server will be unregistered after you exit the sample. Is this okay?", 36, Thisform.Caption ) = 6) 
			THISFORM.Matrixdim = 4
			THISFORM.RegisterCOMServer()
		ELSE
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE matrixdim_assign
		LPARAMETERS vNewVal
		
		IF vNewVal < 2 THEN 
			vNewVal = 2
		ELSE
			IF vNewVal > MAXCOL THEN
				vNewVal = MAXCOL
			ENDIF	
		ENDIF
		
		THIS.matrixdim = m.vNewVal
		
	ENDPROC

	PROCEDURE registercomserver
		*-- The COM Server code below demonstrates the new interface declaration syntax 
		*-- for specifying ByRef typed arrays in the generated COM type library.
		
		TEXT TO mytext NOSHOW
		
		  DEFINE CLASS COMARRAYDemo AS session OLEPUBLIC
			
			*-------------------------------------------------------------------------
			*-- The array is now correctly written strongly typed to the type library.
			*-- The @ indicates that in the type library the array is passed ByRef. 
			*------------------------------------------------------------------------- 
			FUNCTION Determinant(mat[] AS Double @) AS Double
			*-------------------------------------------------------------------------
				LOCAL i as Integer
				LOCAL j as Integer
				LOCAL k as integer
				LOCAL factor as Double
				LOCAL temp as Double
				LOCAL det as Double
		
				dim = ALEN(mat,1)
				det = 1.0
		
				&& do the elimination 
				for i = 1 to dim-1       
			    	&& if the main diagonal value is zero 
				    && re-sort the array 
					if (mat(i,i) = 0) then
						for j = i+1 to dim
							if (mat(j,i) <> 0) then
								for k = 1 to dim            
									temp = mat(i,k)
									mat(i,k) = mat(j,k)
									mat(j,k) = temp
								next
								&& For Gauss-Jordan Elimination, 
								&& if we do a switch, the determinant 
								&& switches sign. 
								det = -det
				           		exit
			         		endif
			       		next
					endif
		
					&& if after the resorting, the value is still zero }
					&& then the determinant is definitely zero }
					if (mat(i,i) = 0) then
						gauss = 0
						exit
					endif
		
				    && eliminates the lower rows to achieve triangular zeroes
					for j = i+1 to dim 
						if (mat(j,i) <> 0) then
							factor = (mat(j,i) * 1.0) / mat(i,i)
							for k = i to dim 
								mat(j,k) = mat(j,k) - factor * mat(i,k)
								&& {2}
							next
							&& {1}
						endif
					next
				NEXT
		
				&& calculates the main diagonal }
				for i = 1 to dim 
					det = det * mat(i,i)
				next
		
				return det
			ENDFUNC
		  ENDDEFINE
		ENDTEXT
			
		lcFileName = Thisform.cRunPath + CLASSNAME+'.PRG'
		lcServerName = Thisform.cRunPath + SERVERNAME
		THIS.UnregisterCOMServer(lcServerName)
		
		DELETE FILE (lcFileName)
		
		STRTOFILE(mytext, lcFileName)
			
		BUILD PROJECT (lcServerName) FROM (lcFileName)
		BUILD DLL (lcServerName) from (lcServerName) recomp
	ENDPROC

	PROCEDURE unregistercomserver
		LPARAMETERS tcCOMServer as String
		
		IF FILE(tcCOMServer+".dll")
			mstr = [regsvr32 /u /s "]+ tcCOMServer +[.dll"]
		    !/n &mstr
			CLEAR DLLS
		ENDIF
	ENDPROC

	PROCEDURE updatecursor
		LOCAL nCount as Integer
		
		cSTR = "CREATE CURSOR " + CURSOR_NAME + " ("
		
		FOR i=1 TO THIS.Matrixdim
			cSTR = cSTR + "f" + TRANSFORM(i) + " B"
			IF i < THIS.Matrixdim THEN
				cStr = cStr + ","
			ELSE
				cStr = cStr + ")"
			ENDIF
		NEXT
		
		&cSTR
		
		FOR i = 1 TO THIS.Matrixdim
			APPEND BLANK
		NEXT
		GO TOP
	ENDPROC

	PROCEDURE cmdDet.Click
		Thisform.CallCOMServer()
		
	ENDPROC

	PROCEDURE cmdSet.Click
		THISFORM.Matrixdim = THISFORM.Spinner1.Value
		THISFORM.UpdateCursor
		
		WITH THISFORM.Grid1
			.RecordSource = CURSOR_NAME
			.RecordSourceType= 1
			.HeaderHeight=0
			.AllowRowSizing =.F.
			.Height = .RowHeight*THISFORM.Matrixdim+20
			.ScrollBars = 0
			FOR i = 1 TO .ColumnCount
				.Columns(i).Width = 60
			NEXT
			.Width = 60*THISFORM.Matrixdim+10
		ENDWITH
		
		
	ENDPROC

	PROCEDURE Grid1.Init
		THISFORM.Matrixdim = 4
		THISFORM.UpdateCursor
		THIS.RecordSource = CURSOR_NAME
		THIS.RecordSourceType= 1
		THIS.HeaderHeight=0
		THIS.AllowRowSizing =.F.
		This.Height = THIS.RowHeight*THISFORM.Matrixdim+20
		THIS.ScrollBars = 0
		FOR i = 1 TO THIS.ColumnCount
			THIS.Columns(1).Width = 60
		NEXT
		THIS.Width = 60*THISFORM.Matrixdim+10
	ENDPROC

	PROCEDURE Grid1.Resize
		THISFORM.Width = MAX(THIS.Width + THIS.Left*2 + THISFORM.cmdDet.Width*1.5, 400)
		THISFORM.Height = THIS.Height * 1.5 + 125
		THISFORM.cmdDet.Left = THIS.Width+THIS.Left+20
		THISFORM.Spinner1.Left = THISFORM.cmdDet.Left
		THISFORM.cmdSet.Left = THISFORM.Spinner1.Left+THISFORM.Spinner1.Width+2
		THISFORM.cmdDet.Top = THIS.Top+THIS.Height-THISFORM.cmdDet.Height
		THISFORM.Spinner1.Top = THISFORM.cmdDet.Top - THISFORM.Spinner1.Height - 5
		THISFORM.cmdSet.Top = THISFORM.Spinner1.Top
		
		THISFORM.cmdclose1.Top = Thisform.Height-THISFORM.cmdclose1.Height-6
		THISFORM.cmdclose1.Left = Thisform.Width-THISFORM.cmdclose1.Width-6
		THISFORM.behindscenes1.Top = Thisform.Height-THISFORM.behindscenes1.Height-6
	ENDPROC

	PROCEDURE Spinner1.Init
		THIS.SpinnerLowValue = 2
		THIS.SpinnerHighValue = MAXCOL
		THIS.Value = THISFORM.Matrixdim 
		
	ENDPROC

ENDDEFINE
